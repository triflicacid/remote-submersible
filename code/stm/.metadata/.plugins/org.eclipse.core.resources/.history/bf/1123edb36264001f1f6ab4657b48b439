
on-board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043f8  080043f8  0000602c  2**0
                  CONTENTS
  4 .ARM          00000000  080043f8  080043f8  0000602c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043f8  080043f8  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043f8  080043f8  000053f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043fc  080043fc  000053fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08004400  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000002c  0800442c  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800442c  000061c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0e1  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002614  00000000  00000000  0001513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00017758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1f  00000000  00000000  00018728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022c5  00000000  00000000  00019347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011805  00000000  00000000  0001b60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec86c  00000000  00000000  0002ce11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011967d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  001196c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043a0 	.word	0x080043a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	080043a0 	.word	0x080043a0

080001c8 <HAL_TIM_PeriodElapsedCallback>:
dc_motor_t g_secondary_motor;
stepper_motor_t ballast_motor;
volatile stepper_event_t g_ballast;

// INTERRUPT: override timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *h) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  if (h == &TIMER_ELECTROMAGNET_HANDLE) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d108      	bne.n	80001ea <HAL_TIM_PeriodElapsedCallback+0x22>
    // times up! reactivate magnet amd cancel timer
    write_pin(ELECTROMAGNET_PORT, ELECTROMAGNET_PIN, false);
 80001d8:	2200      	movs	r2, #0
 80001da:	2108      	movs	r1, #8
 80001dc:	480c      	ldr	r0, [pc, #48]	@ (8000210 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80001de:	f000 f9bf 	bl	8000560 <write_pin>
    HAL_TIM_Base_Stop_IT(&TIMER_ELECTROMAGNET_HANDLE);
 80001e2:	480a      	ldr	r0, [pc, #40]	@ (800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001e4:	f003 f857 	bl	8003296 <HAL_TIM_Base_Stop_IT>
    return;
 80001e8:	e00d      	b.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x3e>
  }

  if (h == &TIMER_STEPPER_HANDLE) {
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a09      	ldr	r2, [pc, #36]	@ (8000214 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d109      	bne.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x3e>
    // step ballast motor, stopping the timer if done
    if (stepper_event_step(&ballast_motor, &g_ballast)) {
 80001f2:	4909      	ldr	r1, [pc, #36]	@ (8000218 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80001f4:	4809      	ldr	r0, [pc, #36]	@ (800021c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80001f6:	f000 f902 	bl	80003fe <stepper_event_step>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d002      	beq.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x3e>
      HAL_TIM_Base_Stop_IT(h);
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f003 f848 	bl	8003296 <HAL_TIM_Base_Stop_IT>
    }
  }
}
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	20000128 	.word	0x20000128
 8000210:	48000400 	.word	0x48000400
 8000214:	20000174 	.word	0x20000174
 8000218:	20000064 	.word	0x20000064
 800021c:	20000054 	.word	0x20000054

08000220 <setup>:
  if (h == &SPI_HANDLE) { // LoRa device received data
    create_action(action_rx_opcode);
  }
}

void setup(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  //lora_receive_async(&g_lora, g_lora_buffer, sizeof(opcode_t));

  dc_motor_backwards(&g_primary_motor);
  dc_motor_set_speed(&g_primary_motor, 0.0);*/

  g_lora.spi = &SPI_HANDLE;
 8000226:	4b11      	ldr	r3, [pc, #68]	@ (800026c <setup+0x4c>)
 8000228:	4a11      	ldr	r2, [pc, #68]	@ (8000270 <setup+0x50>)
 800022a:	601a      	str	r2, [r3, #0]
  g_lora.nss_port = LORA_NSS_PORT;
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <setup+0x4c>)
 800022e:	4a11      	ldr	r2, [pc, #68]	@ (8000274 <setup+0x54>)
 8000230:	605a      	str	r2, [r3, #4]
  g_lora.nss_pin = LORA_NSS_PIN;
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <setup+0x4c>)
 8000234:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000238:	811a      	strh	r2, [r3, #8]

  write_pin(LORA_NSS_PORT, LORA_NSS_PIN, true);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000240:	480c      	ldr	r0, [pc, #48]	@ (8000274 <setup+0x54>)
 8000242:	f000 f98d 	bl	8000560 <write_pin>
  HAL_Delay(1);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 fe06 	bl	8000e58 <HAL_Delay>

  write_byte(&g_lora, 0x23, 5);
 800024c:	2205      	movs	r2, #5
 800024e:	2123      	movs	r1, #35	@ 0x23
 8000250:	4806      	ldr	r0, [pc, #24]	@ (800026c <setup+0x4c>)
 8000252:	f000 f8af 	bl	80003b4 <write_byte>

  uint8_t data;
  read_bytes(&g_lora, 0x23, &data, 1);
 8000256:	1dfa      	adds	r2, r7, #7
 8000258:	2301      	movs	r3, #1
 800025a:	2123      	movs	r1, #35	@ 0x23
 800025c:	4803      	ldr	r0, [pc, #12]	@ (800026c <setup+0x4c>)
 800025e:	f000 f85c 	bl	800031a <read_bytes>

}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	20000048 	.word	0x20000048
 8000270:	20000078 	.word	0x20000078
 8000274:	48000400 	.word	0x48000400

08000278 <loop>:

void loop(void) {
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  //execute_pending_actions();
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr

08000286 <start_transaction>:
  {0x78, 0xC4, 0x00},
  {0x73, 0x74, 0x00}
};

// start transaction - reset NSS
static void start_transaction(lora_t *lora) {
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
  write_pin(lora->nss_port, lora->nss_pin, false);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	6858      	ldr	r0, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	891b      	ldrh	r3, [r3, #8]
 8000296:	2200      	movs	r2, #0
 8000298:	4619      	mov	r1, r3
 800029a:	f000 f961 	bl	8000560 <write_pin>
  HAL_Delay(1);
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fdda 	bl	8000e58 <HAL_Delay>
}
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <end_transaction>:

// end transaction - set NSS
static void end_transaction(lora_t *lora) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  write_pin(lora->nss_port, lora->nss_pin, true);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6858      	ldr	r0, [r3, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	891b      	ldrh	r3, [r3, #8]
 80002bc:	2201      	movs	r2, #1
 80002be:	4619      	mov	r1, r3
 80002c0:	f000 f94e 	bl	8000560 <write_pin>
  HAL_Delay(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fdc7 	bl	8000e58 <HAL_Delay>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <spi_transmit>:

// SPI - transmit data
static inline void spi_transmit(lora_t *lora, uint8_t *data, uint16_t size) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b084      	sub	sp, #16
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	4613      	mov	r3, r2
 80002de:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Transmit(lora->spi, data, size, LORA_TIMEOUT);
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	88fa      	ldrh	r2, [r7, #6]
 80002e6:	2364      	movs	r3, #100	@ 0x64
 80002e8:	68b9      	ldr	r1, [r7, #8]
 80002ea:	f001 ffe0 	bl	80022ae <HAL_SPI_Transmit>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}

080002f6 <spi_receive>:

// SPI - recieve data
static inline void spi_receive(lora_t *lora, uint8_t *data, uint16_t size) {
 80002f6:	b580      	push	{r7, lr}
 80002f8:	b084      	sub	sp, #16
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	60f8      	str	r0, [r7, #12]
 80002fe:	60b9      	str	r1, [r7, #8]
 8000300:	4613      	mov	r3, r2
 8000302:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Receive(lora->spi, data, size, LORA_TIMEOUT);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	88fa      	ldrh	r2, [r7, #6]
 800030a:	2364      	movs	r3, #100	@ 0x64
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	f002 f944 	bl	800259a <HAL_SPI_Receive>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <read_bytes>:
static inline void spi_receive_it(lora_t *lora, uint8_t *data, uint16_t size) {
  HAL_SPI_Receive_IT(lora->spi, data, size);
}

// read bytes from the given address
 void read_bytes(lora_t *lora, uint8_t address, uint8_t *buffer, uint16_t size) {
 800031a:	b580      	push	{r7, lr}
 800031c:	b086      	sub	sp, #24
 800031e:	af00      	add	r7, sp, #0
 8000320:	60f8      	str	r0, [r7, #12]
 8000322:	607a      	str	r2, [r7, #4]
 8000324:	461a      	mov	r2, r3
 8000326:	460b      	mov	r3, r1
 8000328:	72fb      	strb	r3, [r7, #11]
 800032a:	4613      	mov	r3, r2
 800032c:	813b      	strh	r3, [r7, #8]
  // command - request address to read
  uint8_t cmd = address & 0x7F;
 800032e:	7afb      	ldrb	r3, [r7, #11]
 8000330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000334:	b2db      	uxtb	r3, r3
 8000336:	75fb      	strb	r3, [r7, #23]

  start_transaction(lora);
 8000338:	68f8      	ldr	r0, [r7, #12]
 800033a:	f7ff ffa4 	bl	8000286 <start_transaction>
  spi_transmit(lora, &cmd, 1);
 800033e:	f107 0317 	add.w	r3, r7, #23
 8000342:	2201      	movs	r2, #1
 8000344:	4619      	mov	r1, r3
 8000346:	68f8      	ldr	r0, [r7, #12]
 8000348:	f7ff ffc3 	bl	80002d2 <spi_transmit>
  spi_receive(lora, buffer, size);
 800034c:	893b      	ldrh	r3, [r7, #8]
 800034e:	461a      	mov	r2, r3
 8000350:	6879      	ldr	r1, [r7, #4]
 8000352:	68f8      	ldr	r0, [r7, #12]
 8000354:	f7ff ffcf 	bl	80002f6 <spi_receive>
  end_transaction(lora);
 8000358:	68f8      	ldr	r0, [r7, #12]
 800035a:	f7ff ffa7 	bl	80002ac <end_transaction>
}
 800035e:	bf00      	nop
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <write_bytes>:
  spi_receive_it(lora, buffer, size);
  end_transaction(lora);
}

// write bytes starting at the given address
 void write_bytes(lora_t *lora, uint8_t address, uint8_t *data, uint8_t size) {
 8000366:	b580      	push	{r7, lr}
 8000368:	b086      	sub	sp, #24
 800036a:	af00      	add	r7, sp, #0
 800036c:	60f8      	str	r0, [r7, #12]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	461a      	mov	r2, r3
 8000372:	460b      	mov	r3, r1
 8000374:	72fb      	strb	r3, [r7, #11]
 8000376:	4613      	mov	r3, r2
 8000378:	72bb      	strb	r3, [r7, #10]
  // command - tell device to write to address
  uint8_t cmd = 0x80 | address;
 800037a:	7afb      	ldrb	r3, [r7, #11]
 800037c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000380:	b2db      	uxtb	r3, r3
 8000382:	75fb      	strb	r3, [r7, #23]

  start_transaction(lora);
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	f7ff ff7e 	bl	8000286 <start_transaction>
  spi_transmit(lora, &cmd, 1);
 800038a:	f107 0317 	add.w	r3, r7, #23
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	68f8      	ldr	r0, [r7, #12]
 8000394:	f7ff ff9d 	bl	80002d2 <spi_transmit>
  spi_transmit(lora, data, size);
 8000398:	7abb      	ldrb	r3, [r7, #10]
 800039a:	b29b      	uxth	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	68f8      	ldr	r0, [r7, #12]
 80003a2:	f7ff ff96 	bl	80002d2 <spi_transmit>
  end_transaction(lora);
 80003a6:	68f8      	ldr	r0, [r7, #12]
 80003a8:	f7ff ff80 	bl	80002ac <end_transaction>
}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <write_byte>:

// write byte to the given address
void write_byte(lora_t *lora, uint8_t address, uint8_t value) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	70fb      	strb	r3, [r7, #3]
 80003c0:	4613      	mov	r3, r2
 80003c2:	70bb      	strb	r3, [r7, #2]
  write_bytes(lora, address, &value, 1);
 80003c4:	1cba      	adds	r2, r7, #2
 80003c6:	78f9      	ldrb	r1, [r7, #3]
 80003c8:	2301      	movs	r3, #1
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ffcb 	bl	8000366 <write_bytes>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <stepper_event_done>:
  event->target = 0;
  event->target_fwd = forwards_target;
  event->target_bwd = backwards_target;
}

bool stepper_event_done(stepper_event_t *event) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  return event->steps == event->target;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	bf0c      	ite	eq
 80003ec:	2301      	moveq	r3, #1
 80003ee:	2300      	movne	r3, #0
 80003f0:	b2db      	uxtb	r3, r3
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <stepper_event_step>:
  
  // set new target position
  event->target_pos = new_position;
}

bool stepper_event_step(stepper_motor_t *motor, stepper_event_t *event) {
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
  // are we already done?
  if (stepper_event_done(event)) {
 8000408:	6838      	ldr	r0, [r7, #0]
 800040a:	f7ff ffe5 	bl	80003d8 <stepper_event_done>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <stepper_event_step+0x1a>
    return true;
 8000414:	2301      	movs	r3, #1
 8000416:	e007      	b.n	8000428 <stepper_event_step+0x2a>
  }
  
  // we are not done, so same as forcing step
  stepper_event_force_step(motor, event);
 8000418:	6839      	ldr	r1, [r7, #0]
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f808 	bl	8000430 <stepper_event_force_step>
  
  // return if event is now done
  return stepper_event_done(event);
 8000420:	6838      	ldr	r0, [r7, #0]
 8000422:	f7ff ffd9 	bl	80003d8 <stepper_event_done>
 8000426:	4603      	mov	r3, r0
}
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <stepper_event_force_step>:

void stepper_event_force_step(stepper_motor_t *motor, stepper_event_t *event) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  // step motor in stated direction
  if (event->step_fwd) {
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d003      	beq.n	800044a <stepper_event_force_step+0x1a>
    stepper_motor_step(motor);
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f846 	bl	80004d4 <stepper_motor_step>
 8000448:	e002      	b.n	8000450 <stepper_event_force_step+0x20>
  } else {
    stepper_motor_step_back(motor);
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f000 f864 	bl	8000518 <stepper_motor_step_back>
  }
  
  // increase step count
  event->steps++;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	605a      	str	r2, [r3, #4]
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <step_to>:
  // store motor drive mode
  motor->mode = mode;
}

// set a stepper motor to the given step
static void step_to(stepper_motor_t *motor, uint8_t step) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	70fb      	strb	r3, [r7, #3]
  // extract sequence data from corresponding step
  uint8_t sequence = sequences[motor->mode][step];
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7b5b      	ldrb	r3, [r3, #13]
 8000474:	461a      	mov	r2, r3
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <step_to+0x6c>)
 8000478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800047c:	78fb      	ldrb	r3, [r7, #3]
 800047e:	4413      	add	r3, r2
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	72bb      	strb	r3, [r7, #10]
  
  // mask to check against sequence
  uint32_t mask = 1;
 8000484:	2301      	movs	r3, #1
 8000486:	60fb      	str	r3, [r7, #12]
  
  // set motor pins
  for (uint8_t i = 0; i < STEPPER_MOTOR_PINS; i++) {
 8000488:	2300      	movs	r3, #0
 800048a:	72fb      	strb	r3, [r7, #11]
 800048c:	e017      	b.n	80004be <step_to+0x5a>
    write_pin(motor->port, motor->pins[i], sequence & mask);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	8899      	ldrh	r1, [r3, #4]
 800049c:	7aba      	ldrb	r2, [r7, #10]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	4013      	ands	r3, r2
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	461a      	mov	r2, r3
 80004ae:	f000 f857 	bl	8000560 <write_pin>
    mask <<= 1;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < STEPPER_MOTOR_PINS; i++) {
 80004b8:	7afb      	ldrb	r3, [r7, #11]
 80004ba:	3301      	adds	r3, #1
 80004bc:	72fb      	strb	r3, [r7, #11]
 80004be:	7afb      	ldrb	r3, [r7, #11]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d9e4      	bls.n	800048e <step_to+0x2a>
  }
}
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000014 	.word	0x20000014

080004d4 <stepper_motor_step>:

void stepper_motor_step(stepper_motor_t *motor) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  // increase step count, overflowing if necessary
  motor->step++;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7b1b      	ldrb	r3, [r3, #12]
 80004e0:	3301      	adds	r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	731a      	strb	r2, [r3, #12]
  
  if (motor->step >= sequence_count[motor->mode]) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	7b1a      	ldrb	r2, [r3, #12]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7b5b      	ldrb	r3, [r3, #13]
 80004f0:	4619      	mov	r1, r3
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <stepper_motor_step+0x40>)
 80004f4:	5c5b      	ldrb	r3, [r3, r1]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d302      	bcc.n	8000500 <stepper_motor_step+0x2c>
    motor->step = 0;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	731a      	strb	r2, [r3, #12]
  }
  
  step_to(motor, motor->step);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	7b1b      	ldrb	r3, [r3, #12]
 8000504:	4619      	mov	r1, r3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffac 	bl	8000464 <step_to>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000

08000518 <stepper_motor_step_back>:

void stepper_motor_step_back(stepper_motor_t *motor) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  step_to(motor, motor->step);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7b1b      	ldrb	r3, [r3, #12]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff9c 	bl	8000464 <step_to>

  // decrease step count, underfloweing if necessary
  if (motor->step == 0) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7b1b      	ldrb	r3, [r3, #12]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d109      	bne.n	8000548 <stepper_motor_step_back+0x30>
    motor->step = sequence_count[motor->mode] - 1;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	7b5b      	ldrb	r3, [r3, #13]
 8000538:	461a      	mov	r2, r3
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <stepper_motor_step_back+0x44>)
 800053c:	5c9b      	ldrb	r3, [r3, r2]
 800053e:	3b01      	subs	r3, #1
 8000540:	b2da      	uxtb	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	731a      	strb	r2, [r3, #12]
  } else {
    motor->step--;
  }
}
 8000546:	e005      	b.n	8000554 <stepper_motor_step_back+0x3c>
    motor->step--;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7b1b      	ldrb	r3, [r3, #12]
 800054c:	3b01      	subs	r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	731a      	strb	r2, [r3, #12]
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000000 	.word	0x20000000

08000560 <write_pin>:
#include "util.h"

void write_pin(port_t *port, pin_t pin, bool state) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	807b      	strh	r3, [r7, #2]
 800056c:	4613      	mov	r3, r2
 800056e:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000570:	787b      	ldrb	r3, [r7, #1]
 8000572:	461a      	mov	r2, r3
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	4619      	mov	r1, r3
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 ff8d 	bl	8001498 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fbe9 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f80f 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f98d 	bl	80008b0 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000596:	f000 f91d 	bl	80007d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800059a:	f000 f953 	bl	8000844 <MX_TIM7_Init>
  MX_SPI2_Init();
 800059e:	f000 f859 	bl	8000654 <MX_SPI2_Init>
  MX_TIM2_Init();
 80005a2:	f000 f895 	bl	80006d0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 80005a6:	f7ff fe3b 	bl	8000220 <setup>
  while (1)
  {
	  loop();
 80005aa:	f7ff fe65 	bl	8000278 <loop>
 80005ae:	e7fc      	b.n	80005aa <main+0x24>

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	@ 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	@ 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fec2 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005d6:	f000 ffa9 	bl	800152c <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 fa08 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005fe:	230a      	movs	r3, #10
 8000600:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f000 ffe0 	bl	80015d8 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800061e:	f000 f9e9 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fba8 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000646:	f000 f9d5 	bl	80009f4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3758      	adds	r7, #88	@ 0x58
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_SPI2_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <MX_SPI2_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_SPI2_Init+0x74>)
 8000660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000664:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <MX_SPI2_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800066c:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <MX_SPI2_Init+0x74>)
 800066e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000672:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_SPI2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_SPI2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_SPI2_Init+0x74>)
 8000682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000686:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_SPI2_Init+0x74>)
 800068a:	2228      	movs	r2, #40	@ 0x28
 800068c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_SPI2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_SPI2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_SPI2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_SPI2_Init+0x74>)
 80006a2:	2207      	movs	r2, #7
 80006a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_SPI2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_SPI2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_SPI2_Init+0x74>)
 80006b4:	f001 fd58 	bl	8002168 <HAL_SPI_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 f999 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000078 	.word	0x20000078
 80006cc:	40003800 	.word	0x40003800

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	@ 0x38
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <MX_TIM2_Init+0x100>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 499;
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <MX_TIM2_Init+0x100>)
 800070c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b2f      	ldr	r3, [pc, #188]	@ (80007d0 <MX_TIM2_Init+0x100>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000718:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <MX_TIM2_Init+0x100>)
 800071a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_TIM2_Init+0x100>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <MX_TIM2_Init+0x100>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	4828      	ldr	r0, [pc, #160]	@ (80007d0 <MX_TIM2_Init+0x100>)
 800072e:	f002 fd5b 	bl	80031e8 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000738:	f000 f95c 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000746:	4619      	mov	r1, r3
 8000748:	4821      	ldr	r0, [pc, #132]	@ (80007d0 <MX_TIM2_Init+0x100>)
 800074a:	f003 f84f 	bl	80037ec <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000754:	f000 f94e 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000758:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <MX_TIM2_Init+0x100>)
 800075a:	f002 fdcb 	bl	80032f4 <HAL_TIM_PWM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000764:	f000 f946 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4816      	ldr	r0, [pc, #88]	@ (80007d0 <MX_TIM2_Init+0x100>)
 8000778:	f003 fd40 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 f937 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	2360      	movs	r3, #96	@ 0x60
 8000788:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <MX_TIM2_Init+0x100>)
 800079e:	f002 ff11 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80007a8:	f000 f924 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	2208      	movs	r2, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <MX_TIM2_Init+0x100>)
 80007b4:	f002 ff06 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80007be:	f000 f919 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c2:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <MX_TIM2_Init+0x100>)
 80007c4:	f000 f9e0 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 80007c8:	bf00      	nop
 80007ca:	3738      	adds	r7, #56	@ 0x38
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000dc 	.word	0x200000dc

080007d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_TIM6_Init+0x68>)
 80007e6:	4a16      	ldr	r2, [pc, #88]	@ (8000840 <MX_TIM6_Init+0x6c>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2476;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_TIM6_Init+0x68>)
 80007ec:	f640 12ac 	movw	r2, #2476	@ 0x9ac
 80007f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_TIM6_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64515;
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_TIM6_Init+0x68>)
 80007fa:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 80007fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_TIM6_Init+0x68>)
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000806:	480d      	ldr	r0, [pc, #52]	@ (800083c <MX_TIM6_Init+0x68>)
 8000808:	f002 fcee 	bl	80031e8 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000812:	f000 f8ef 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <MX_TIM6_Init+0x68>)
 8000824:	f003 fcea 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800082e:	f000 f8e1 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000128 	.word	0x20000128
 8000840:	40001000 	.word	0x40001000

08000844 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_TIM7_Init+0x64>)
 8000856:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <MX_TIM7_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_TIM7_Init+0x64>)
 800085c:	2207      	movs	r2, #7
 800085e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_TIM7_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_TIM7_Init+0x64>)
 8000868:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800086c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_TIM7_Init+0x64>)
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_TIM7_Init+0x64>)
 8000876:	f002 fcb7 	bl	80031e8 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000880:	f000 f8b8 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_TIM7_Init+0x64>)
 8000892:	f003 fcb3 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 f8aa 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000174 	.word	0x20000174
 80008ac:	40001400 	.word	0x40001400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a47      	ldr	r2, [pc, #284]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b42      	ldr	r3, [pc, #264]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a41      	ldr	r2, [pc, #260]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b3f      	ldr	r3, [pc, #252]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a3b      	ldr	r2, [pc, #236]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b39      	ldr	r3, [pc, #228]	@ (80009e8 <MX_GPIO_Init+0x138>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEPPER_IN1_Pin|STEPPER_IN2_Pin|STEPPER_IN3_Pin|STEPPER_IN4_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	4836      	ldr	r0, [pc, #216]	@ (80009ec <MX_GPIO_Init+0x13c>)
 8000914:	f000 fdc0 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_MOTOR_IN1_Pin|DC_MOTOR_IN2_Pin|DC_MOTOR_IN3_Pin|DC_MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	210f      	movs	r1, #15
 800091c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000920:	f000 fdba 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFM_RESET_Pin|RFM_SELECT_Pin|ELECTROMAGNET_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f241 0109 	movw	r1, #4105	@ 0x1009
 800092a:	4831      	ldr	r0, [pc, #196]	@ (80009f0 <MX_GPIO_Init+0x140>)
 800092c:	f000 fdb4 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000936:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4829      	ldr	r0, [pc, #164]	@ (80009ec <MX_GPIO_Init+0x13c>)
 8000948:	f000 fbfc 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_IN1_Pin STEPPER_IN2_Pin STEPPER_IN3_Pin STEPPER_IN4_Pin */
  GPIO_InitStruct.Pin = STEPPER_IN1_Pin|STEPPER_IN2_Pin|STEPPER_IN3_Pin|STEPPER_IN4_Pin;
 800094c:	230f      	movs	r3, #15
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4822      	ldr	r0, [pc, #136]	@ (80009ec <MX_GPIO_Init+0x13c>)
 8000964:	f000 fbee 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_MOTOR_IN1_Pin DC_MOTOR_IN2_Pin DC_MOTOR_IN3_Pin DC_MOTOR_IN4_Pin */
  GPIO_InitStruct.Pin = DC_MOTOR_IN1_Pin|DC_MOTOR_IN2_Pin|DC_MOTOR_IN3_Pin|DC_MOTOR_IN4_Pin;
 8000968:	230f      	movs	r3, #15
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000982:	f000 fbdf 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_RESET_Pin RFM_SELECT_Pin ELECTROMAGNET_Pin */
  GPIO_InitStruct.Pin = RFM_RESET_Pin|RFM_SELECT_Pin|ELECTROMAGNET_Pin;
 8000986:	f241 0309 	movw	r3, #4105	@ 0x1009
 800098a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4619      	mov	r1, r3
 800099e:	4814      	ldr	r0, [pc, #80]	@ (80009f0 <MX_GPIO_Init+0x140>)
 80009a0:	f000 fbd0 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_DIO0_Pin */
  GPIO_InitStruct.Pin = RFM_DIO0_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFM_DIO0_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_GPIO_Init+0x140>)
 80009ba:	f000 fbc3 	bl	8001144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2007      	movs	r0, #7
 80009c4:	f000 fb47 	bl	8001056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009c8:	2007      	movs	r0, #7
 80009ca:	f000 fb60 	bl	800108e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2028      	movs	r0, #40	@ 0x28
 80009d4:	f000 fb3f 	bl	8001056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d8:	2028      	movs	r0, #40	@ 0x28
 80009da:	f000 fb58 	bl	800108e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009de:	bf00      	nop
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000400 	.word	0x48000400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad4 <HAL_SPI_MspInit+0x8c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d130      	bne.n	8000acc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a9a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aac:	2305      	movs	r3, #5
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4809      	ldr	r0, [pc, #36]	@ (8000adc <HAL_SPI_MspInit+0x94>)
 8000ab8:	f000 fb44 	bl	8001144 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2024      	movs	r0, #36	@ 0x24
 8000ac2:	f000 fac8 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ac6:	2024      	movs	r0, #36	@ 0x24
 8000ac8:	f000 fae1 	bl	800108e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	@ 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40003800 	.word	0x40003800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000400 	.word	0x48000400

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af0:	d10c      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af2:	4b22      	ldr	r3, [pc, #136]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af6:	4a21      	ldr	r2, [pc, #132]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000b0a:	e032      	b.n	8000b72 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <HAL_TIM_Base_MspInit+0xa0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d114      	bne.n	8000b40 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b16:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b22:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2036      	movs	r0, #54	@ 0x36
 8000b34:	f000 fa8f 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b38:	2036      	movs	r0, #54	@ 0x36
 8000b3a:	f000 faa8 	bl	800108e <HAL_NVIC_EnableIRQ>
}
 8000b3e:	e018      	b.n	8000b72 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <HAL_TIM_Base_MspInit+0xa4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d113      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_TIM_Base_MspInit+0x9c>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	2037      	movs	r0, #55	@ 0x37
 8000b68:	f000 fa75 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b6c:	2037      	movs	r0, #55	@ 0x37
 8000b6e:	f000 fa8e 	bl	800108e <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40001000 	.word	0x40001000
 8000b84:	40001400 	.word	0x40001400

08000b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ba8:	d139      	bne.n	8000c1e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <HAL_TIM_MspPostInit+0xa0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_TIM_MspPostInit+0xa0>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <HAL_TIM_MspPostInit+0xa0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <HAL_TIM_MspPostInit+0xa0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a18      	ldr	r2, [pc, #96]	@ (8000c28 <HAL_TIM_MspPostInit+0xa0>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <HAL_TIM_MspPostInit+0xa0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = DC_MOTOR_EN1_2_Pin;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bea:	2301      	movs	r3, #1
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_MOTOR_EN1_2_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 faa4 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_MOTOR_EN3_4_Pin;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_MOTOR_EN3_4_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <HAL_TIM_MspPostInit+0xa4>)
 8000c1a:	f000 fa93 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f8c7 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_DIO0_Pin);
 8000c92:	2002      	movs	r0, #2
 8000c94:	f000 fc18 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <SPI2_IRQHandler+0x10>)
 8000ca2:	f001 ffd1 	bl	8002c48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000078 	.word	0x20000078

08000cb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cb8:	f000 fc06 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <TIM6_DAC_IRQHandler+0x10>)
 8000cc6:	f002 fb76 	bl	80033b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000128 	.word	0x20000128

08000cd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <TIM7_IRQHandler+0x10>)
 8000cda:	f002 fb6c 	bl	80033b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000174 	.word	0x20000174

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f003 fb0d 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fc22 	bl	8000586 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000d50:	08004400 	.word	0x08004400
  ldr r2, =_sbss
 8000d54:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000d58:	200001c4 	.word	0x200001c4

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_Init+0x3c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d9c <HAL_Init+0x3c>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f000 f962 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f80f 	bl	8000da0 <HAL_InitTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	e001      	b.n	8000d92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8e:	f7ff fe37 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d92:	79fb      	ldrb	r3, [r7, #7]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d023      	beq.n	8000dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_InitTick+0x70>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f96d 	bl	80010aa <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10f      	bne.n	8000df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d809      	bhi.n	8000df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f937 	bl	8001056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_InitTick+0x74>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e007      	b.n	8000e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e004      	b.n	8000e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e001      	b.n	8000e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000028 	.word	0x20000028
 8000e10:	20000020 	.word	0x20000020
 8000e14:	20000024 	.word	0x20000024

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	200001c0 	.word	0x200001c0

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200001c0 	.word	0x200001c0

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d005      	beq.n	80010e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2204      	movs	r2, #4
 80010de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e029      	b.n	800113a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 020e 	bic.w	r2, r2, #14
 80010f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	f003 021c 	and.w	r2, r3, #28
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f202 	lsl.w	r2, r1, r2
 8001118:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	4798      	blx	r3
    }
  }
  return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e17f      	b.n	8001454 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8171 	beq.w	800144e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x40>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d118      	bne.n	8001224 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	6939      	ldr	r1, [r7, #16]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80ac 	beq.w	800144e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001474 <HAL_GPIO_Init+0x330>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001474 <HAL_GPIO_Init+0x330>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	@ 0x60
 8001302:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <HAL_GPIO_Init+0x330>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130e:	4a5a      	ldr	r2, [pc, #360]	@ (8001478 <HAL_GPIO_Init+0x334>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x242>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	@ (800147c <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x23e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	@ (8001480 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x23a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	@ (8001484 <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x236>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	@ (8001488 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x232>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	@ (800148c <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x22e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	@ (8001490 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x22a>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001386:	2300      	movs	r3, #0
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001398:	4937      	ldr	r1, [pc, #220]	@ (8001478 <HAL_GPIO_Init+0x334>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001494 <HAL_GPIO_Init+0x350>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ca:	4a32      	ldr	r2, [pc, #200]	@ (8001494 <HAL_GPIO_Init+0x350>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d0:	4b30      	ldr	r3, [pc, #192]	@ (8001494 <HAL_GPIO_Init+0x350>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f4:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <HAL_GPIO_Init+0x350>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013fa:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_GPIO_Init+0x350>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141e:	4a1d      	ldr	r2, [pc, #116]	@ (8001494 <HAL_GPIO_Init+0x350>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_GPIO_Init+0x350>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <HAL_GPIO_Init+0x350>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae78 	bne.w	8001154 <HAL_GPIO_Init+0x10>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400
 8001490:	48001800 	.word	0x48001800
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f806 	bl	80014f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010400 	.word	0x40010400

080014f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <HAL_PWREx_GetVoltageRange+0x18>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800153a:	d130      	bne.n	800159e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800153c:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001548:	d038      	beq.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001552:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001554:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800155a:	4b1d      	ldr	r3, [pc, #116]	@ (80015d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2232      	movs	r2, #50	@ 0x32
 8001560:	fb02 f303 	mul.w	r3, r2, r3
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9b      	lsrs	r3, r3, #18
 800156c:	3301      	adds	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001570:	e002      	b.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3b01      	subs	r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001584:	d102      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f2      	bne.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001598:	d110      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e00f      	b.n	80015be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015aa:	d007      	beq.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b4:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40007000 	.word	0x40007000
 80015d0:	20000020 	.word	0x20000020
 80015d4:	431bde83 	.word	0x431bde83

080015d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e3ca      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ea:	4b97      	ldr	r3, [pc, #604]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f4:	4b94      	ldr	r3, [pc, #592]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80e4 	beq.w	80017d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_RCC_OscConfig+0x4a>
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	f040 808b 	bne.w	8001730 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b01      	cmp	r3, #1
 800161e:	f040 8087 	bne.w	8001730 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001622:	4b89      	ldr	r3, [pc, #548]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x62>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e3a2      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	4b82      	ldr	r3, [pc, #520]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <HAL_RCC_OscConfig+0x7c>
 800164a:	4b7f      	ldr	r3, [pc, #508]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001652:	e005      	b.n	8001660 <HAL_RCC_OscConfig+0x88>
 8001654:	4b7c      	ldr	r3, [pc, #496]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001660:	4293      	cmp	r3, r2
 8001662:	d223      	bcs.n	80016ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fd1d 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e383      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001678:	4b73      	ldr	r3, [pc, #460]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a72      	ldr	r2, [pc, #456]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b70      	ldr	r3, [pc, #448]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	496d      	ldr	r1, [pc, #436]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001696:	4b6c      	ldr	r3, [pc, #432]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	4968      	ldr	r1, [pc, #416]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
 80016aa:	e025      	b.n	80016f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ac:	4b66      	ldr	r3, [pc, #408]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a65      	ldr	r2, [pc, #404]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4960      	ldr	r1, [pc, #384]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	495b      	ldr	r1, [pc, #364]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fcdd 	bl	80020a8 <RCC_SetFlashLatencyFromMSIRange>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e343      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016f8:	f000 fc4a 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b52      	ldr	r3, [pc, #328]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	4950      	ldr	r1, [pc, #320]	@ (800184c <HAL_RCC_OscConfig+0x274>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	4a4e      	ldr	r2, [pc, #312]	@ (8001850 <HAL_RCC_OscConfig+0x278>)
 8001716:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001718:	4b4e      	ldr	r3, [pc, #312]	@ (8001854 <HAL_RCC_OscConfig+0x27c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fb3f 	bl	8000da0 <HAL_InitTick>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d052      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	e327      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d032      	beq.n	800179e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001738:	4b43      	ldr	r3, [pc, #268]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a42      	ldr	r2, [pc, #264]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb7c 	bl	8000e40 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174c:	f7ff fb78 	bl	8000e40 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e310      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800175e:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176a:	4b37      	ldr	r3, [pc, #220]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a36      	ldr	r2, [pc, #216]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4931      	ldr	r1, [pc, #196]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001788:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	492c      	ldr	r1, [pc, #176]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e01a      	b.n	80017d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb49 	bl	8000e40 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb45 	bl	8000e40 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e2dd      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c4:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0x1da>
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d074      	beq.n	80018ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x21a>
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d10e      	bne.n	800180a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d10b      	bne.n	800180a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d064      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d160      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e2ba      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x24a>
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800181a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e026      	b.n	8001870 <HAL_RCC_OscConfig+0x298>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800182a:	d115      	bne.n	8001858 <HAL_RCC_OscConfig+0x280>
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 8001832:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a02      	ldr	r2, [pc, #8]	@ (8001848 <HAL_RCC_OscConfig+0x270>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x298>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	080043b8 	.word	0x080043b8
 8001850:	20000020 	.word	0x20000020
 8001854:	20000024 	.word	0x20000024
 8001858:	4ba0      	ldr	r3, [pc, #640]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a9f      	ldr	r2, [pc, #636]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b9d      	ldr	r3, [pc, #628]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a9c      	ldr	r2, [pc, #624]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fae2 	bl	8000e40 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fade 	bl	8000e40 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e276      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001892:	4b92      	ldr	r3, [pc, #584]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x2a8>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff face 	bl	8000e40 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff faca 	bl	8000e40 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	@ 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e262      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ba:	4b88      	ldr	r3, [pc, #544]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d0>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d060      	beq.n	8001998 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x310>
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d119      	bne.n	8001916 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d116      	bne.n	8001916 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e8:	4b7c      	ldr	r3, [pc, #496]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_OscConfig+0x328>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e23f      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b76      	ldr	r3, [pc, #472]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	4973      	ldr	r1, [pc, #460]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	e040      	b.n	8001998 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d023      	beq.n	8001966 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191e:	4b6f      	ldr	r3, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6e      	ldr	r2, [pc, #440]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff fa89 	bl	8000e40 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff fa85 	bl	8000e40 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e21d      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001944:	4b65      	ldr	r3, [pc, #404]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b62      	ldr	r3, [pc, #392]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	495f      	ldr	r1, [pc, #380]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e018      	b.n	8001998 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001966:	4b5d      	ldr	r3, [pc, #372]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a5c      	ldr	r2, [pc, #368]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 800196c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff fa65 	bl	8000e40 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff fa61 	bl	8000e40 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e1f9      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800198c:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ac:	4b4b      	ldr	r3, [pc, #300]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b2:	4a4a      	ldr	r2, [pc, #296]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff fa40 	bl	8000e40 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fa3c 	bl	8000e40 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1d4      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d6:	4b41      	ldr	r3, [pc, #260]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ef      	beq.n	80019c4 <HAL_RCC_OscConfig+0x3ec>
 80019e4:	e01b      	b.n	8001a1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ec:	4a3b      	ldr	r2, [pc, #236]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa23 	bl	8000e40 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff fa1f 	bl	8000e40 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e1b7      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80a6 	beq.w	8001b78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10d      	bne.n	8001a58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	4a26      	ldr	r2, [pc, #152]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a54:	2301      	movs	r3, #1
 8001a56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a58:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_RCC_OscConfig+0x508>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d118      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCC_OscConfig+0x508>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae0 <HAL_RCC_OscConfig+0x508>)
 8001a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a70:	f7ff f9e6 	bl	8000e40 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a78:	f7ff f9e2 	bl	8000e40 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e17a      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x508>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d108      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4d8>
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aae:	e029      	b.n	8001b04 <HAL_RCC_OscConfig+0x52c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d115      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x50c>
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001abe:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ace:	4a03      	ldr	r2, [pc, #12]	@ (8001adc <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ad8:	e014      	b.n	8001b04 <HAL_RCC_OscConfig+0x52c>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aea:	4a9b      	ldr	r2, [pc, #620]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001af4:	4b98      	ldr	r3, [pc, #608]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afa:	4a97      	ldr	r2, [pc, #604]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001afc:	f023 0304 	bic.w	r3, r3, #4
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d016      	beq.n	8001b3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f998 	bl	8000e40 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff f994 	bl	8000e40 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e12a      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ed      	beq.n	8001b14 <HAL_RCC_OscConfig+0x53c>
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f981 	bl	8000e40 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff f97d 	bl	8000e40 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e113      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b58:	4b7f      	ldr	r3, [pc, #508]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ed      	bne.n	8001b42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d105      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b6c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	4a79      	ldr	r2, [pc, #484]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80fe 	beq.w	8001d7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	f040 80d0 	bne.w	8001d2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b8c:	4b72      	ldr	r3, [pc, #456]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d130      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	3b01      	subs	r3, #1
 8001bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d127      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bcc:	2a07      	cmp	r2, #7
 8001bce:	bf14      	ite	ne
 8001bd0:	2201      	movne	r2, #1
 8001bd2:	2200      	moveq	r2, #0
 8001bd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d113      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d06e      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d069      	beq.n	8001cdc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c08:	4b53      	ldr	r3, [pc, #332]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c14:	4b50      	ldr	r3, [pc, #320]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0ad      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c24:	4b4c      	ldr	r3, [pc, #304]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c30:	f7ff f906 	bl	8000e40 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f902 	bl	8000e40 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e09a      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4a:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b40      	ldr	r3, [pc, #256]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	4b40      	ldr	r3, [pc, #256]	@ (8001d5c <HAL_RCC_OscConfig+0x784>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c70:	0212      	lsls	r2, r2, #8
 8001c72:	4311      	orrs	r1, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c78:	0852      	lsrs	r2, r2, #1
 8001c7a:	3a01      	subs	r2, #1
 8001c7c:	0552      	lsls	r2, r2, #21
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c84:	0852      	lsrs	r2, r2, #1
 8001c86:	3a01      	subs	r2, #1
 8001c88:	0652      	lsls	r2, r2, #25
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c90:	0912      	lsrs	r2, r2, #4
 8001c92:	0452      	lsls	r2, r2, #17
 8001c94:	430a      	orrs	r2, r1
 8001c96:	4930      	ldr	r1, [pc, #192]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4a2a      	ldr	r2, [pc, #168]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb4:	f7ff f8c4 	bl	8000e40 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f8c0 	bl	8000e40 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e058      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cce:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cda:	e050      	b.n	8001d7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04f      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d148      	bne.n	8001d7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cec:	4b1a      	ldr	r3, [pc, #104]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d04:	f7ff f89c 	bl	8000e40 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f898 	bl	8000e40 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e030      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x734>
 8001d2a:	e028      	b.n	8001d7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d023      	beq.n	8001d7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <HAL_RCC_OscConfig+0x780>)
 8001d38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff f87f 	bl	8000e40 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	e00c      	b.n	8001d60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff f87b 	bl	8000e40 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d905      	bls.n	8001d60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e013      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_OscConfig+0x7b0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ec      	bne.n	8001d46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_RCC_OscConfig+0x7b0>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4905      	ldr	r1, [pc, #20]	@ (8001d88 <HAL_RCC_OscConfig+0x7b0>)
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_OscConfig+0x7b4>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
 8001d78:	e001      	b.n	8001d7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	feeefffc 	.word	0xfeeefffc

08001d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0e7      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b75      	ldr	r3, [pc, #468]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b72      	ldr	r3, [pc, #456]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4970      	ldr	r1, [pc, #448]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cf      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b66      	ldr	r3, [pc, #408]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d908      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b63      	ldr	r3, [pc, #396]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4960      	ldr	r1, [pc, #384]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d04c      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b5a      	ldr	r3, [pc, #360]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d121      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0a6      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4b54      	ldr	r3, [pc, #336]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e09a      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e46:	4b4e      	ldr	r3, [pc, #312]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e08e      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e56:	4b4a      	ldr	r3, [pc, #296]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e086      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b46      	ldr	r3, [pc, #280]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4943      	ldr	r1, [pc, #268]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e78:	f7fe ffe2 	bl	8000e40 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe ffde 	bl	8000e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e06e      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d208      	bcs.n	8001ed6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	492b      	ldr	r1, [pc, #172]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d210      	bcs.n	8001f06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 0207 	bic.w	r2, r3, #7
 8001eec:	4923      	ldr	r1, [pc, #140]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e036      	b.n	8001f74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f12:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	4918      	ldr	r1, [pc, #96]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4910      	ldr	r1, [pc, #64]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f44:	f000 f824 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	490b      	ldr	r1, [pc, #44]	@ (8001f84 <HAL_RCC_ClockConfig+0x1f4>)
 8001f56:	5ccb      	ldrb	r3, [r1, r3]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	4a09      	ldr	r2, [pc, #36]	@ (8001f88 <HAL_RCC_ClockConfig+0x1f8>)
 8001f62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_RCC_ClockConfig+0x1fc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe ff19 	bl	8000da0 <HAL_InitTick>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f72:	7afb      	ldrb	r3, [r7, #11]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080043b8 	.word	0x080043b8
 8001f88:	20000020 	.word	0x20000020
 8001f8c:	20000024 	.word	0x20000024

08001f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d121      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d11e      	bne.n	8002002 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fc4:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd0:	4b31      	ldr	r3, [pc, #196]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e005      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d102      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e004      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d101      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002016:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d134      	bne.n	8002088 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0xa6>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0xac>
 8002034:	e005      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002038:	617b      	str	r3, [r7, #20]
      break;
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800203e:	617b      	str	r3, [r7, #20]
      break;
 8002040:	e002      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	617b      	str	r3, [r7, #20]
      break;
 8002046:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	3301      	adds	r3, #1
 8002054:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	fb03 f202 	mul.w	r2, r3, r2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	0e5b      	lsrs	r3, r3, #25
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	3301      	adds	r3, #1
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002088:	69bb      	ldr	r3, [r7, #24]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	080043c8 	.word	0x080043c8
 80020a0:	00f42400 	.word	0x00f42400
 80020a4:	007a1200 	.word	0x007a1200

080020a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff fa26 	bl	8001510 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
 80020c6:	e014      	b.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020cc:	4a24      	ldr	r2, [pc, #144]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020e0:	f7ff fa16 	bl	8001510 <HAL_PWREx_GetVoltageRange>
 80020e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f8:	d10b      	bne.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b80      	cmp	r3, #128	@ 0x80
 80020fe:	d919      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2ba0      	cmp	r3, #160	@ 0xa0
 8002104:	d902      	bls.n	800210c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002106:	2302      	movs	r3, #2
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	e013      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	e010      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d902      	bls.n	800211e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002118:	2303      	movs	r3, #3
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	e00a      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b80      	cmp	r3, #128	@ 0x80
 8002122:	d102      	bne.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e004      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b70      	cmp	r3, #112	@ 0x70
 800212e:	d101      	bne.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 0207 	bic.w	r2, r3, #7
 800213c:	4909      	ldr	r1, [pc, #36]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e095      	b.n	80022a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800218a:	d009      	beq.n	80021a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
 8002192:	e005      	b.n	80021a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fc44 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021e0:	d902      	bls.n	80021e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e002      	b.n	80021ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80021f6:	d007      	beq.n	8002208 <HAL_SPI_Init+0xa0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002200:	d002      	beq.n	8002208 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	ea42 0103 	orr.w	r1, r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	f003 0204 	and.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b088      	sub	sp, #32
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022be:	f7fe fdbf 	bl	8000e40 <HAL_GetTick>
 80022c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	e15c      	b.n	8002592 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0x36>
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e154      	b.n	8002592 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_SPI_Transmit+0x48>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e14d      	b.n	8002592 <HAL_SPI_Transmit+0x2e4>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002348:	d10f      	bne.n	800236a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002358:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	2b40      	cmp	r3, #64	@ 0x40
 8002376:	d007      	beq.n	8002388 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002390:	d952      	bls.n	8002438 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_SPI_Transmit+0xf2>
 800239a:	8b7b      	ldrh	r3, [r7, #26]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d145      	bne.n	800242c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a4:	881a      	ldrh	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	1c9a      	adds	r2, r3, #2
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023c4:	e032      	b.n	800242c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d112      	bne.n	80023fa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e4:	1c9a      	adds	r2, r3, #2
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023f8:	e018      	b.n	800242c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fa:	f7fe fd21 	bl	8000e40 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d803      	bhi.n	8002412 <HAL_SPI_Transmit+0x164>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d102      	bne.n	8002418 <HAL_SPI_Transmit+0x16a>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0b2      	b.n	8002592 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1c7      	bne.n	80023c6 <HAL_SPI_Transmit+0x118>
 8002436:	e083      	b.n	8002540 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_SPI_Transmit+0x198>
 8002440:	8b7b      	ldrh	r3, [r7, #26]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d177      	bne.n	8002536 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d912      	bls.n	8002476 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002460:	1c9a      	adds	r2, r3, #2
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b02      	subs	r3, #2
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002474:	e05f      	b.n	8002536 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800249c:	e04b      	b.n	8002536 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d12b      	bne.n	8002504 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d912      	bls.n	80024dc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b02      	subs	r3, #2
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024da:	e02c      	b.n	8002536 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002502:	e018      	b.n	8002536 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002504:	f7fe fc9c 	bl	8000e40 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d803      	bhi.n	800251c <HAL_SPI_Transmit+0x26e>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d102      	bne.n	8002522 <HAL_SPI_Transmit+0x274>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e02d      	b.n	8002592 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ae      	bne.n	800249e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	6839      	ldr	r1, [r7, #0]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fe09 	bl	800315c <SPI_EndRxTxTransaction>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002590:	2300      	movs	r3, #0
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b088      	sub	sp, #32
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	e123      	b.n	8002802 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025c2:	d112      	bne.n	80025ea <HAL_SPI_Receive+0x50>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10e      	bne.n	80025ea <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2204      	movs	r2, #4
 80025d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f912 	bl	800280a <HAL_SPI_TransmitReceive>
 80025e6:	4603      	mov	r3, r0
 80025e8:	e10b      	b.n	8002802 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025ea:	f7fe fc29 	bl	8000e40 <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_SPI_Receive+0x62>
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e100      	b.n	8002802 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_SPI_Receive+0x74>
 800260a:	2302      	movs	r3, #2
 800260c:	e0f9      	b.n	8002802 <HAL_SPI_Receive+0x268>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2204      	movs	r2, #4
 800261a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002660:	d908      	bls.n	8002674 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	e007      	b.n	8002684 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002682:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800268c:	d10f      	bne.n	80026ae <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d007      	beq.n	80026cc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80026d4:	d875      	bhi.n	80027c2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026d6:	e037      	b.n	8002748 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d117      	bne.n	8002716 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f103 020c 	add.w	r2, r3, #12
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002714:	e018      	b.n	8002748 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002716:	f7fe fb93 	bl	8000e40 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d803      	bhi.n	800272e <HAL_SPI_Receive+0x194>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d102      	bne.n	8002734 <HAL_SPI_Receive+0x19a>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e05c      	b.n	8002802 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1c1      	bne.n	80026d8 <HAL_SPI_Receive+0x13e>
 8002754:	e03b      	b.n	80027ce <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d115      	bne.n	8002790 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	b292      	uxth	r2, r2
 8002770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800278e:	e018      	b.n	80027c2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002790:	f7fe fb56 	bl	8000e40 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d803      	bhi.n	80027a8 <HAL_SPI_Receive+0x20e>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_Receive+0x214>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e01f      	b.n	8002802 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1c3      	bne.n	8002756 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fc6a 	bl	80030ac <SPI_EndRxTransaction>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002800:	2300      	movs	r3, #0
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b08a      	sub	sp, #40	@ 0x28
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800281c:	f7fe fb10 	bl	8000e40 <HAL_GetTick>
 8002820:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002828:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002838:	7ffb      	ldrb	r3, [r7, #31]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00c      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x4e>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002844:	d106      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x4a>
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	2b04      	cmp	r3, #4
 8002852:	d001      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
 8002856:	e1f3      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_SPI_TransmitReceive+0x60>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_SPI_TransmitReceive+0x60>
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1e8      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_SPI_TransmitReceive+0x72>
 8002878:	2302      	movs	r3, #2
 800287a:	e1e1      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b04      	cmp	r3, #4
 800288e:	d003      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2205      	movs	r2, #5
 8002894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	887a      	ldrh	r2, [r7, #2]
 80028be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028da:	d802      	bhi.n	80028e2 <HAL_SPI_TransmitReceive+0xd8>
 80028dc:	8abb      	ldrh	r3, [r7, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d908      	bls.n	80028f4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e007      	b.n	8002904 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002902:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290e:	2b40      	cmp	r3, #64	@ 0x40
 8002910:	d007      	beq.n	8002922 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800292a:	f240 8083 	bls.w	8002a34 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_TransmitReceive+0x132>
 8002936:	8afb      	ldrh	r3, [r7, #22]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d16f      	bne.n	8002a1c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002960:	e05c      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11b      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x19e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x19e>
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	2b01      	cmp	r3, #1
 800297e:	d113      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d11c      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x1e6>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	b292      	uxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029ec:	2301      	movs	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029f0:	f7fe fa26 	bl	8000e40 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d80d      	bhi.n	8002a1c <HAL_SPI_TransmitReceive+0x212>
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d009      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e111      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d19d      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x158>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d197      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x158>
 8002a32:	e0e5      	b.n	8002c00 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x23a>
 8002a3c:	8afb      	ldrh	r3, [r7, #22]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 80d1 	bne.w	8002be6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d912      	bls.n	8002a74 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	1c9a      	adds	r2, r3, #2
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b02      	subs	r3, #2
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a72:	e0b8      	b.n	8002be6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	7812      	ldrb	r2, [r2, #0]
 8002a80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a9a:	e0a4      	b.n	8002be6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d134      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x30a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d02f      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x30a>
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d12c      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d912      	bls.n	8002aea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	1c9a      	adds	r2, r3, #2
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b02      	subs	r3, #2
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ae8:	e012      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	7812      	ldrb	r2, [r2, #0]
 8002af6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d148      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x3aa>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d042      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d923      	bls.n	8002b82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	b292      	uxth	r2, r2
 8002b46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b02      	subs	r3, #2
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d81f      	bhi.n	8002bb0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	e016      	b.n	8002bb0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f103 020c 	add.w	r2, r3, #12
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bb4:	f7fe f944 	bl	8000e40 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d803      	bhi.n	8002bcc <HAL_SPI_TransmitReceive+0x3c2>
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d102      	bne.n	8002bd2 <HAL_SPI_TransmitReceive+0x3c8>
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e02c      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f af55 	bne.w	8002a9c <HAL_SPI_TransmitReceive+0x292>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f47f af4e 	bne.w	8002a9c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 faa9 	bl	800315c <SPI_EndRxTxTransaction>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00e      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	@ 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
    return;
 8002c86:	e0ce      	b.n	8002e26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_SPI_IRQHandler+0x5e>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
    return;
 8002ca4:	e0bf      	b.n	8002e26 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10a      	bne.n	8002cc6 <HAL_SPI_IRQHandler+0x7e>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80b0 	beq.w	8002e26 <HAL_SPI_IRQHandler+0x1de>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80aa 	beq.w	8002e26 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d023      	beq.n	8002d24 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d011      	beq.n	8002d0c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	e00b      	b.n	8002d24 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
        return;
 8002d22:	e080      	b.n	8002e26 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d014      	beq.n	8002d58 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d66:	f043 0208 	orr.w	r2, r3, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d04f      	beq.n	8002e24 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d92:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <HAL_SPI_IRQHandler+0x168>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d034      	beq.n	8002e1a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0203 	bic.w	r2, r2, #3
 8002dbe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d011      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <HAL_SPI_IRQHandler+0x1e4>)
 8002dce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe f974 	bl	80010c2 <HAL_DMA_Abort_IT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	4a0c      	ldr	r2, [pc, #48]	@ (8002e2c <HAL_SPI_IRQHandler+0x1e4>)
 8002dfa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe f95e 	bl	80010c2 <HAL_DMA_Abort_IT>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002e18:	e003      	b.n	8002e22 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f808 	bl	8002e30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e20:	e000      	b.n	8002e24 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002e22:	bf00      	nop
    return;
 8002e24:	bf00      	nop
  }
}
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	08002e45 	.word	0x08002e45

08002e30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff ffe5 	bl	8002e30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e80:	f7fd ffde 	bl	8000e40 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e90:	f7fd ffd6 	bl	8000e40 <HAL_GetTick>
 8002e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	0d1b      	lsrs	r3, r3, #20
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea6:	e054      	b.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eae:	d050      	beq.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eb0:	f7fd ffc6 	bl	8000e40 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d902      	bls.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d13d      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ede:	d111      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee8:	d004      	beq.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef2:	d107      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0c:	d10f      	bne.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e017      	b.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d19b      	bne.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000020 	.word	0x20000020

08002f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	@ 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f92:	f7fd ff55 	bl	8000e40 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002fa2:	f7fd ff4d 	bl	8000e40 <HAL_GetTick>
 8002fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80030a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00da      	lsls	r2, r3, #3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	0d1b      	lsrs	r3, r3, #20
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fc8:	e060      	b.n	800308c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002fd0:	d107      	bne.n	8002fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d050      	beq.n	800308c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fea:	f7fd ff29 	bl	8000e40 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d902      	bls.n	8003000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d13d      	bne.n	800307c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800300e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003018:	d111      	bne.n	800303e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003022:	d004      	beq.n	800302e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302c:	d107      	bne.n	800303e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003046:	d10f      	bne.n	8003068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e010      	b.n	800309e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3b01      	subs	r3, #1
 800308a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4013      	ands	r3, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d196      	bne.n	8002fca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3728      	adds	r7, #40	@ 0x28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000020 	.word	0x20000020

080030ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030c0:	d111      	bne.n	80030e6 <SPI_EndRxTransaction+0x3a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ca:	d004      	beq.n	80030d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d4:	d107      	bne.n	80030e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2180      	movs	r1, #128	@ 0x80
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff febd 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e023      	b.n	8003154 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003114:	d11d      	bne.n	8003152 <SPI_EndRxTransaction+0xa6>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311e:	d004      	beq.n	800312a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d113      	bne.n	8003152 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7ff ff22 	bl	8002f80 <SPI_WaitFifoStateUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d007      	beq.n	8003152 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e000      	b.n	8003154 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2200      	movs	r2, #0
 8003170:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff ff03 	bl	8002f80 <SPI_WaitFifoStateUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e027      	b.n	80031e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2200      	movs	r2, #0
 8003198:	2180      	movs	r1, #128	@ 0x80
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fe68 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e014      	b.n	80031e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fedc 	bl	8002f80 <SPI_WaitFifoStateUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e000      	b.n	80031e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e049      	b.n	800328e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fc66 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fbd2 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <HAL_TIM_Base_Stop_IT+0x48>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_TIM_Base_Stop_IT+0x48>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e049      	b.n	800339a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f841 	bl	80033a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 fb4c 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01b      	beq.n	800341a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f06f 0202 	mvn.w	r2, #2
 80033ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fac6 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 8003406:	e005      	b.n	8003414 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fab8 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fac9 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01b      	beq.n	8003466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0204 	mvn.w	r2, #4
 8003436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 faa0 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 8003452:	e005      	b.n	8003460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa92 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 faa3 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01b      	beq.n	80034b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0208 	mvn.w	r2, #8
 8003482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2204      	movs	r2, #4
 8003488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fa7a 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 800349e:	e005      	b.n	80034ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa6c 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa7d 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01b      	beq.n	80034fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f06f 0210 	mvn.w	r2, #16
 80034ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2208      	movs	r2, #8
 80034d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa54 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 80034ea:	e005      	b.n	80034f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa46 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa57 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00c      	beq.n	8003522 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0201 	mvn.w	r2, #1
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7fc fe53 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00c      	beq.n	8003550 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fee8 	bl	8004320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fee0 	bl	8004334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa11 	bl	80039ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0220 	mvn.w	r2, #32
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fea8 	bl	800430c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0ff      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b14      	cmp	r3, #20
 80035ee:	f200 80f0 	bhi.w	80037d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035f2:	a201      	add	r2, pc, #4	@ (adr r2, 80035f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	0800364d 	.word	0x0800364d
 80035fc:	080037d3 	.word	0x080037d3
 8003600:	080037d3 	.word	0x080037d3
 8003604:	080037d3 	.word	0x080037d3
 8003608:	0800368d 	.word	0x0800368d
 800360c:	080037d3 	.word	0x080037d3
 8003610:	080037d3 	.word	0x080037d3
 8003614:	080037d3 	.word	0x080037d3
 8003618:	080036cf 	.word	0x080036cf
 800361c:	080037d3 	.word	0x080037d3
 8003620:	080037d3 	.word	0x080037d3
 8003624:	080037d3 	.word	0x080037d3
 8003628:	0800370f 	.word	0x0800370f
 800362c:	080037d3 	.word	0x080037d3
 8003630:	080037d3 	.word	0x080037d3
 8003634:	080037d3 	.word	0x080037d3
 8003638:	08003751 	.word	0x08003751
 800363c:	080037d3 	.word	0x080037d3
 8003640:	080037d3 	.word	0x080037d3
 8003644:	080037d3 	.word	0x080037d3
 8003648:	08003791 	.word	0x08003791
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fa62 	bl	8003b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6999      	ldr	r1, [r3, #24]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	619a      	str	r2, [r3, #24]
      break;
 800368a:	e0a5      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fad2 	bl	8003c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	021a      	lsls	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
      break;
 80036cc:	e084      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fb3b 	bl	8003d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0204 	bic.w	r2, r2, #4
 80036f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69d9      	ldr	r1, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	61da      	str	r2, [r3, #28]
      break;
 800370c:	e064      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fba3 	bl	8003e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
      break;
 800374e:	e043      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fbec 	bl	8003f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0208 	orr.w	r2, r2, #8
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0204 	bic.w	r2, r2, #4
 800377a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800378e:	e023      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fc30 	bl	8003ffc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037d0:	e002      	b.n	80037d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
      break;
 80037d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop

080037ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_TIM_ConfigClockSource+0x1c>
 8003804:	2302      	movs	r3, #2
 8003806:	e0b6      	b.n	8003976 <HAL_TIM_ConfigClockSource+0x18a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003826:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800382a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003844:	d03e      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xd8>
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800384a:	f200 8087 	bhi.w	800395c <HAL_TIM_ConfigClockSource+0x170>
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003852:	f000 8086 	beq.w	8003962 <HAL_TIM_ConfigClockSource+0x176>
 8003856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385a:	d87f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 800385c:	2b70      	cmp	r3, #112	@ 0x70
 800385e:	d01a      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xaa>
 8003860:	2b70      	cmp	r3, #112	@ 0x70
 8003862:	d87b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 8003864:	2b60      	cmp	r3, #96	@ 0x60
 8003866:	d050      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x11e>
 8003868:	2b60      	cmp	r3, #96	@ 0x60
 800386a:	d877      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 800386c:	2b50      	cmp	r3, #80	@ 0x50
 800386e:	d03c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0xfe>
 8003870:	2b50      	cmp	r3, #80	@ 0x50
 8003872:	d873      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d058      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x13e>
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d86f      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 800387c:	2b30      	cmp	r3, #48	@ 0x30
 800387e:	d064      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15e>
 8003880:	2b30      	cmp	r3, #48	@ 0x30
 8003882:	d86b      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d060      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15e>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d867      	bhi.n	800395c <HAL_TIM_ConfigClockSource+0x170>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05c      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15e>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d05a      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x15e>
 8003894:	e062      	b.n	800395c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	f000 fc89 	bl	80041bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	609a      	str	r2, [r3, #8]
      break;
 80038c2:	e04f      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	f000 fc72 	bl	80041bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038e6:	609a      	str	r2, [r3, #8]
      break;
 80038e8:	e03c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	461a      	mov	r2, r3
 80038f8:	f000 fbe6 	bl	80040c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2150      	movs	r1, #80	@ 0x50
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fc3f 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003908:	e02c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	461a      	mov	r2, r3
 8003918:	f000 fc05 	bl	8004126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2160      	movs	r1, #96	@ 0x60
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fc2f 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003928:	e01c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	461a      	mov	r2, r3
 8003938:	f000 fbc6 	bl	80040c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2140      	movs	r1, #64	@ 0x40
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fc1f 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003948:	e00c      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4619      	mov	r1, r3
 8003954:	4610      	mov	r0, r2
 8003956:	f000 fc16 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 800395a:	e003      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
      break;
 8003960:	e000      	b.n	8003964 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a46      	ldr	r2, [pc, #280]	@ (8003afc <TIM_Base_SetConfig+0x12c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ee:	d00f      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a43      	ldr	r2, [pc, #268]	@ (8003b00 <TIM_Base_SetConfig+0x130>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a42      	ldr	r2, [pc, #264]	@ (8003b04 <TIM_Base_SetConfig+0x134>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a41      	ldr	r2, [pc, #260]	@ (8003b08 <TIM_Base_SetConfig+0x138>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a40      	ldr	r2, [pc, #256]	@ (8003b0c <TIM_Base_SetConfig+0x13c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a35      	ldr	r2, [pc, #212]	@ (8003afc <TIM_Base_SetConfig+0x12c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01f      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a30:	d01b      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a32      	ldr	r2, [pc, #200]	@ (8003b00 <TIM_Base_SetConfig+0x130>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d017      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a31      	ldr	r2, [pc, #196]	@ (8003b04 <TIM_Base_SetConfig+0x134>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <TIM_Base_SetConfig+0x138>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00f      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <TIM_Base_SetConfig+0x13c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	@ (8003b10 <TIM_Base_SetConfig+0x140>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b14 <TIM_Base_SetConfig+0x144>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x9a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <TIM_Base_SetConfig+0x148>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <TIM_Base_SetConfig+0x12c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00f      	beq.n	8003ac8 <TIM_Base_SetConfig+0xf8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a18      	ldr	r2, [pc, #96]	@ (8003b0c <TIM_Base_SetConfig+0x13c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <TIM_Base_SetConfig+0xf8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <TIM_Base_SetConfig+0x140>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0xf8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a16      	ldr	r2, [pc, #88]	@ (8003b14 <TIM_Base_SetConfig+0x144>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0xf8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a15      	ldr	r2, [pc, #84]	@ (8003b18 <TIM_Base_SetConfig+0x148>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	611a      	str	r2, [r3, #16]
  }
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40013400 	.word	0x40013400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800

08003b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 0201 	bic.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0302 	bic.w	r3, r3, #2
 8003b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <TIM_OC1_SetConfig+0x10c>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_OC1_SetConfig+0x80>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <TIM_OC1_SetConfig+0x110>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC1_SetConfig+0x80>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a2a      	ldr	r2, [pc, #168]	@ (8003c30 <TIM_OC1_SetConfig+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC1_SetConfig+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a29      	ldr	r2, [pc, #164]	@ (8003c34 <TIM_OC1_SetConfig+0x118>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC1_SetConfig+0x80>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a28      	ldr	r2, [pc, #160]	@ (8003c38 <TIM_OC1_SetConfig+0x11c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10c      	bne.n	8003bb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0308 	bic.w	r3, r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c28 <TIM_OC1_SetConfig+0x10c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00f      	beq.n	8003bde <TIM_OC1_SetConfig+0xc2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <TIM_OC1_SetConfig+0x110>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00b      	beq.n	8003bde <TIM_OC1_SetConfig+0xc2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <TIM_OC1_SetConfig+0x114>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <TIM_OC1_SetConfig+0xc2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	@ (8003c34 <TIM_OC1_SetConfig+0x118>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_OC1_SetConfig+0xc2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	@ (8003c38 <TIM_OC1_SetConfig+0x11c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d111      	bne.n	8003c02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40013400 	.word	0x40013400
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800

08003c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 0210 	bic.w	r2, r3, #16
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0320 	bic.w	r3, r3, #32
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a28      	ldr	r2, [pc, #160]	@ (8003d3c <TIM_OC2_SetConfig+0x100>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC2_SetConfig+0x6c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a27      	ldr	r2, [pc, #156]	@ (8003d40 <TIM_OC2_SetConfig+0x104>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10d      	bne.n	8003cc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <TIM_OC2_SetConfig+0x100>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00f      	beq.n	8003cec <TIM_OC2_SetConfig+0xb0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <TIM_OC2_SetConfig+0x104>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_OC2_SetConfig+0xb0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <TIM_OC2_SetConfig+0x108>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_OC2_SetConfig+0xb0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a1a      	ldr	r2, [pc, #104]	@ (8003d48 <TIM_OC2_SetConfig+0x10c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC2_SetConfig+0xb0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <TIM_OC2_SetConfig+0x110>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d113      	bne.n	8003d14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40013400 	.word	0x40013400
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40014400 	.word	0x40014400
 8003d4c:	40014800 	.word	0x40014800

08003d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a27      	ldr	r2, [pc, #156]	@ (8003e4c <TIM_OC3_SetConfig+0xfc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC3_SetConfig+0x6a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a26      	ldr	r2, [pc, #152]	@ (8003e50 <TIM_OC3_SetConfig+0x100>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10d      	bne.n	8003dd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e4c <TIM_OC3_SetConfig+0xfc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00f      	beq.n	8003dfe <TIM_OC3_SetConfig+0xae>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e50 <TIM_OC3_SetConfig+0x100>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <TIM_OC3_SetConfig+0xae>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <TIM_OC3_SetConfig+0x104>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d007      	beq.n	8003dfe <TIM_OC3_SetConfig+0xae>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a19      	ldr	r2, [pc, #100]	@ (8003e58 <TIM_OC3_SetConfig+0x108>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_OC3_SetConfig+0xae>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a18      	ldr	r2, [pc, #96]	@ (8003e5c <TIM_OC3_SetConfig+0x10c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d113      	bne.n	8003e26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	621a      	str	r2, [r3, #32]
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40013400 	.word	0x40013400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400
 8003e5c:	40014800 	.word	0x40014800

08003e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a18      	ldr	r2, [pc, #96]	@ (8003f20 <TIM_OC4_SetConfig+0xc0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_OC4_SetConfig+0x84>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a17      	ldr	r2, [pc, #92]	@ (8003f24 <TIM_OC4_SetConfig+0xc4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_OC4_SetConfig+0x84>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <TIM_OC4_SetConfig+0xc8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_OC4_SetConfig+0x84>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <TIM_OC4_SetConfig+0xcc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC4_SetConfig+0x84>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a14      	ldr	r2, [pc, #80]	@ (8003f30 <TIM_OC4_SetConfig+0xd0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d109      	bne.n	8003ef8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	019b      	lsls	r3, r3, #6
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	041b      	lsls	r3, r3, #16
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <TIM_OC5_SetConfig+0xb4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_OC5_SetConfig+0x7a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <TIM_OC5_SetConfig+0xb8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_OC5_SetConfig+0x7a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a15      	ldr	r2, [pc, #84]	@ (8003ff0 <TIM_OC5_SetConfig+0xbc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_OC5_SetConfig+0x7a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a14      	ldr	r2, [pc, #80]	@ (8003ff4 <TIM_OC5_SetConfig+0xc0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC5_SetConfig+0x7a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a13      	ldr	r2, [pc, #76]	@ (8003ff8 <TIM_OC5_SetConfig+0xc4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d109      	bne.n	8003fc2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40013400 	.word	0x40013400
 8003ff0:	40014000 	.word	0x40014000
 8003ff4:	40014400 	.word	0x40014400
 8003ff8:	40014800 	.word	0x40014800

08003ffc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	051b      	lsls	r3, r3, #20
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <TIM_OC6_SetConfig+0xb8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00f      	beq.n	8004078 <TIM_OC6_SetConfig+0x7c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <TIM_OC6_SetConfig+0xbc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_OC6_SetConfig+0x7c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <TIM_OC6_SetConfig+0xc0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_OC6_SetConfig+0x7c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <TIM_OC6_SetConfig+0xc4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_OC6_SetConfig+0x7c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <TIM_OC6_SetConfig+0xc8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d109      	bne.n	800408c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800407e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 030a 	bic.w	r3, r3, #10
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 0210 	bic.w	r2, r3, #16
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004162:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800419c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f043 0307 	orr.w	r3, r3, #7
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	431a      	orrs	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e068      	b.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2d      	ldr	r2, [pc, #180]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800424e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1e      	ldr	r2, [pc, #120]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d018      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a13      	ldr	r2, [pc, #76]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000

0800430c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	@ (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	@ (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	@ (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	@ (800439c <__libc_init_array+0x44>)
 800436c:	f000 f818 	bl	80043a0 <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	080043f8 	.word	0x080043f8
 8004394:	080043f8 	.word	0x080043f8
 8004398:	080043f8 	.word	0x080043f8
 800439c:	080043fc 	.word	0x080043fc

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr
