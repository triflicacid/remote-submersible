
mcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800237c  0800237c  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023cc  080023cc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080023cc  080023cc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023cc  080023cc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023cc  080023cc  000033cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023d0  080023d0  000033d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080023d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080023e0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080023e0  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a1e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001926  00000000  00000000  0000ba5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000d380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065c  00000000  00000000  0000dc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ae4  00000000  00000000  0000e264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000953d  00000000  00000000  00032d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0acd  00000000  00000000  0003c285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cd52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000212c  00000000  00000000  0011cd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002364 	.word	0x08002364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002364 	.word	0x08002364

080001c8 <set_pin>:
inline void write_pin(const pin_t *pin, bool state) {
  HAL_GPIO_WritePin(pin->port, pin->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// set a pin high
inline void set_pin(const pin_t *pin) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	889b      	ldrh	r3, [r3, #4]
 80001d8:	2201      	movs	r2, #1
 80001da:	4619      	mov	r1, r3
 80001dc:	f000 fdc0 	bl	8000d60 <HAL_GPIO_WritePin>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <reset_pin>:

// set a pin low
inline void reset_pin(const pin_t *pin) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	889b      	ldrh	r3, [r3, #4]
 80001f8:	2200      	movs	r2, #0
 80001fa:	4619      	mov	r1, r3
 80001fc:	f000 fdb0 	bl	8000d60 <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
static void _write(uint8_t reg, uint8_t data) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	460a      	mov	r2, r1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	4613      	mov	r3, r2
 8000216:	71bb      	strb	r3, [r7, #6]
	reset_pin(&cs);
 8000218:	480e      	ldr	r0, [pc, #56]	@ (8000254 <_write+0x4c>)
 800021a:	f7ff ffe5 	bl	80001e8 <reset_pin>

	uint8_t payload[] = { 0x40, reg, data };
 800021e:	2340      	movs	r3, #64	@ 0x40
 8000220:	733b      	strb	r3, [r7, #12]
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	737b      	strb	r3, [r7, #13]
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, payload, sizeof(payload), 100);
 800022a:	f107 010c 	add.w	r1, r7, #12
 800022e:	2364      	movs	r3, #100	@ 0x64
 8000230:	2203      	movs	r2, #3
 8000232:	4809      	ldr	r0, [pc, #36]	@ (8000258 <_write+0x50>)
 8000234:	f001 fc7b 	bl	8001b2e <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 fa71 	bl	8000720 <HAL_Delay>

	set_pin(&cs);
 800023e:	4805      	ldr	r0, [pc, #20]	@ (8000254 <_write+0x4c>)
 8000240:	f7ff ffc2 	bl	80001c8 <set_pin>
	HAL_Delay(1);
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fa6b 	bl	8000720 <HAL_Delay>
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	0800237c 	.word	0x0800237c
 8000258:	20000028 	.word	0x20000028

0800025c <setup>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setup(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	// toggle CS and RST pins
	set_pin(&cs);
 8000260:	4812      	ldr	r0, [pc, #72]	@ (80002ac <setup+0x50>)
 8000262:	f7ff ffb1 	bl	80001c8 <set_pin>
	set_pin(&rst);
 8000266:	4812      	ldr	r0, [pc, #72]	@ (80002b0 <setup+0x54>)
 8000268:	f7ff ffae 	bl	80001c8 <set_pin>
	HAL_Delay(1);
 800026c:	2001      	movs	r0, #1
 800026e:	f000 fa57 	bl	8000720 <HAL_Delay>
	reset_pin(&cs);
 8000272:	480e      	ldr	r0, [pc, #56]	@ (80002ac <setup+0x50>)
 8000274:	f7ff ffb8 	bl	80001e8 <reset_pin>
	reset_pin(&rst);
 8000278:	480d      	ldr	r0, [pc, #52]	@ (80002b0 <setup+0x54>)
 800027a:	f7ff ffb5 	bl	80001e8 <reset_pin>
	HAL_Delay(5);
 800027e:	2005      	movs	r0, #5
 8000280:	f000 fa4e 	bl	8000720 <HAL_Delay>
	set_pin(&cs);
 8000284:	4809      	ldr	r0, [pc, #36]	@ (80002ac <setup+0x50>)
 8000286:	f7ff ff9f 	bl	80001c8 <set_pin>
	set_pin(&rst);
 800028a:	4809      	ldr	r0, [pc, #36]	@ (80002b0 <setup+0x54>)
 800028c:	f7ff ff9c 	bl	80001c8 <set_pin>
	HAL_Delay(5);
 8000290:	2005      	movs	r0, #5
 8000292:	f000 fa45 	bl	8000720 <HAL_Delay>

	_write(0x00, 0x00); // IODIRA = 0x00 (all output)
 8000296:	2100      	movs	r1, #0
 8000298:	2000      	movs	r0, #0
 800029a:	f7ff ffb5 	bl	8000208 <_write>
	_write(0x12, 0xFF); // GPIOA = 0xFF (all high)
 800029e:	21ff      	movs	r1, #255	@ 0xff
 80002a0:	2012      	movs	r0, #18
 80002a2:	f7ff ffb1 	bl	8000208 <_write>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	0800237c 	.word	0x0800237c
 80002b0:	08002384 	.word	0x08002384

080002b4 <loop>:

void loop(void) {
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 f9b6 	bl	8000636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f809 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f897 	bl	8000400 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d2:	f000 f857 	bl	8000384 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80002d6:	f7ff ffc1 	bl	800025c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 80002da:	f7ff ffeb 	bl	80002b4 <loop>
 80002de:	e7fc      	b.n	80002da <main+0x18>

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b096      	sub	sp, #88	@ 0x58
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2244      	movs	r2, #68	@ 0x44
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f80c 	bl	800230c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000302:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000306:	f000 fd51 	bl	8000dac <HAL_PWREx_ControlVoltageScaling>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000310:	f000 f8a8 	bl	8000464 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	2302      	movs	r3, #2
 8000316:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800031c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000326:	2302      	movs	r3, #2
 8000328:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800032a:	2301      	movs	r3, #1
 800032c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800032e:	230a      	movs	r3, #10
 8000330:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000332:	2307      	movs	r3, #7
 8000334:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800033a:	2302      	movs	r3, #2
 800033c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fd88 	bl	8000e58 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800034e:	f000 f889 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2303      	movs	r3, #3
 8000358:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000366:	463b      	mov	r3, r7
 8000368:	2104      	movs	r1, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f001 f950 	bl	8001610 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000376:	f000 f875 	bl	8000464 <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3758      	adds	r7, #88	@ 0x58
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_SPI1_Init+0x74>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	@ (80003fc <MX_SPI1_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800038e:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <MX_SPI1_Init+0x74>)
 8000390:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000396:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800039c:	4b16      	ldr	r3, [pc, #88]	@ (80003f8 <MX_SPI1_Init+0x74>)
 800039e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80003a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a4:	4b14      	ldr	r3, [pc, #80]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003aa:	4b13      	ldr	r3, [pc, #76]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b0:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003ba:	2238      	movs	r2, #56	@ 0x38
 80003bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003d0:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003d2:	2207      	movs	r2, #7
 80003d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <MX_SPI1_Init+0x74>)
 80003e4:	f001 fb00 	bl	80019e8 <HAL_SPI_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 f839 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000028 	.word	0x20000028
 80003fc:	40013000 	.word	0x40013000

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_GPIO_Init+0x60>)
 8000416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000418:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <MX_GPIO_Init+0x60>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_GPIO_Init+0x60>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_1_2_Pin|CS_3_4_Pin|RESET_IO_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f240 2103 	movw	r1, #515	@ 0x203
 8000432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000436:	f000 fc93 	bl	8000d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_1_2_Pin CS_3_4_Pin RESET_IO_Pin */
  GPIO_InitStruct.Pin = CS_1_2_Pin|CS_3_4_Pin|RESET_IO_Pin;
 800043a:	f240 2303 	movw	r3, #515	@ 0x203
 800043e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000454:	f000 fada 	bl	8000a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000476:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <HAL_MspInit+0x44>)
 8000478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800047a:	4a0e      	ldr	r2, [pc, #56]	@ (80004b4 <HAL_MspInit+0x44>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6613      	str	r3, [r2, #96]	@ 0x60
 8000482:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <HAL_MspInit+0x44>)
 8000484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <HAL_MspInit+0x44>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000492:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <HAL_MspInit+0x44>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000498:	6593      	str	r3, [r2, #88]	@ 0x58
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_MspInit+0x44>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000544 <HAL_SPI_MspInit+0x8c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d130      	bne.n	800053c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004da:	4b1b      	ldr	r3, [pc, #108]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004de:	4a1a      	ldr	r2, [pc, #104]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004e6:	4b18      	ldr	r3, [pc, #96]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f6:	4a14      	ldr	r2, [pc, #80]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004fe:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <HAL_SPI_MspInit+0x90>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800050a:	23e0      	movs	r3, #224	@ 0xe0
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000516:	2303      	movs	r3, #3
 8000518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800051a:	2305      	movs	r3, #5
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000528:	f000 fa70 	bl	8000a0c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2023      	movs	r0, #35	@ 0x23
 8000532:	f000 f9f4 	bl	800091e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000536:	2023      	movs	r0, #35	@ 0x23
 8000538:	f000 fa0d 	bl	8000956 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	@ 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013000 	.word	0x40013000
 8000548:	40021000 	.word	0x40021000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <NMI_Handler+0x4>

08000554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <MemManage_Handler+0x4>

08000564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <UsageFault_Handler+0x4>

08000574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a2:	f000 f89d 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <SPI1_IRQHandler+0x10>)
 80005b2:	f001 fc33 	bl	8001e1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028

080005c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <SystemInit+0x20>)
 80005c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005ca:	4a05      	ldr	r2, [pc, #20]	@ (80005e0 <SystemInit+0x20>)
 80005cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800061c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff ffea 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f001 fe83 	bl	800231c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000616:	f7ff fe54 	bl	80002c2 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800061c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000628:	080023d4 	.word	0x080023d4
  ldr r2, =_sbss
 800062c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000630:	20000090 	.word	0x20000090

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>

08000636 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000640:	2003      	movs	r0, #3
 8000642:	f000 f961 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f80e 	bl	8000668 <HAL_InitTick>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d002      	beq.n	8000658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	e001      	b.n	800065c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000658:	f7ff ff0a 	bl	8000470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065c:	79fb      	ldrb	r3, [r7, #7]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <HAL_InitTick+0x6c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d023      	beq.n	80006c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <HAL_InitTick+0x70>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <HAL_InitTick+0x6c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f96d 	bl	8000972 <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10f      	bne.n	80006be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d809      	bhi.n	80006b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ac:	f000 f937 	bl	800091e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006b0:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <HAL_InitTick+0x74>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	e007      	b.n	80006c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
 80006bc:	e004      	b.n	80006c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	e001      	b.n	80006c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <HAL_IncTick+0x20>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_IncTick+0x24>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <HAL_IncTick+0x24>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000008 	.word	0x20000008
 8000704:	2000008c 	.word	0x2000008c

08000708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b03      	ldr	r3, [pc, #12]	@ (800071c <HAL_GetTick+0x14>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff ffee 	bl	8000708 <HAL_GetTick>
 800072c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000738:	d005      	beq.n	8000746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_Delay+0x44>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000746:	bf00      	nop
 8000748:	f7ff ffde 	bl	8000708 <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d8f7      	bhi.n	8000748 <HAL_Delay+0x28>
  {
  }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000008 	.word	0x20000008

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4907      	ldr	r1, [pc, #28]	@ (8000804 <__NVIC_EnableIRQ+0x38>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	@ (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	@ (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	@ 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	@ 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff8e 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff29 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff3e 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff8e 	bl	800085c <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5d 	bl	8000808 <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff31 	bl	80007cc <__NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffa2 	bl	80008c4 <SysTick_Config>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b084      	sub	sp, #16
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d005      	beq.n	80009ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2204      	movs	r2, #4
 80009a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e029      	b.n	8000a02 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 020e 	bic.w	r2, r2, #14
 80009bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f022 0201 	bic.w	r2, r2, #1
 80009cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f003 021c 	and.w	r2, r3, #28
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2201      	movs	r2, #1
 80009e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	4798      	blx	r3
    }
  }
  return status;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e17f      	b.n	8000d1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8171 	beq.w	8000d16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d005      	beq.n	8000a4c <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	f003 0201 	and.w	r2, r3, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d118      	bne.n	8000aec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	f003 0201 	and.w	r2, r3, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d017      	beq.n	8000b28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d123      	bne.n	8000b7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	08da      	lsrs	r2, r3, #3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3208      	adds	r2, #8
 8000b76:	6939      	ldr	r1, [r7, #16]
 8000b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0203 	and.w	r2, r3, #3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 80ac 	beq.w	8000d16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8000d3c <HAL_GPIO_Init+0x330>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8000d3c <HAL_GPIO_Init+0x330>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bca:	4b5c      	ldr	r3, [pc, #368]	@ (8000d3c <HAL_GPIO_Init+0x330>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8000d40 <HAL_GPIO_Init+0x334>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c00:	d025      	beq.n	8000c4e <HAL_GPIO_Init+0x242>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a4f      	ldr	r2, [pc, #316]	@ (8000d44 <HAL_GPIO_Init+0x338>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d01f      	beq.n	8000c4a <HAL_GPIO_Init+0x23e>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d48 <HAL_GPIO_Init+0x33c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d019      	beq.n	8000c46 <HAL_GPIO_Init+0x23a>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a4d      	ldr	r2, [pc, #308]	@ (8000d4c <HAL_GPIO_Init+0x340>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0x236>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d50 <HAL_GPIO_Init+0x344>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d00d      	beq.n	8000c3e <HAL_GPIO_Init+0x232>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a4b      	ldr	r2, [pc, #300]	@ (8000d54 <HAL_GPIO_Init+0x348>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d007      	beq.n	8000c3a <HAL_GPIO_Init+0x22e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d58 <HAL_GPIO_Init+0x34c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_GPIO_Init+0x22a>
 8000c32:	2306      	movs	r3, #6
 8000c34:	e00c      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c36:	2307      	movs	r3, #7
 8000c38:	e00a      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e008      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e004      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x244>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	f002 0203 	and.w	r2, r2, #3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c60:	4937      	ldr	r1, [pc, #220]	@ (8000d40 <HAL_GPIO_Init+0x334>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c92:	4a32      	ldr	r2, [pc, #200]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c98:	4b30      	ldr	r3, [pc, #192]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cbc:	4a27      	ldr	r2, [pc, #156]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d10:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <HAL_GPIO_Init+0x350>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa22 f303 	lsr.w	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f47f ae78 	bne.w	8000a1c <HAL_GPIO_Init+0x10>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	371c      	adds	r7, #28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010000 	.word	0x40010000
 8000d44:	48000400 	.word	0x48000400
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48001000 	.word	0x48001000
 8000d54:	48001400 	.word	0x48001400
 8000d58:	48001800 	.word	0x48001800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d70:	787b      	ldrb	r3, [r7, #1]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d7c:	e002      	b.n	8000d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dba:	d130      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dc8:	d038      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2232      	movs	r2, #50	@ 0x32
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3301      	adds	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	e002      	b.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e04:	d102      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f2      	bne.n	8000df2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e18:	d110      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e00f      	b.n	8000e3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e2a:	d007      	beq.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e34:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40007000 	.word	0x40007000
 8000e50:	20000000 	.word	0x20000000
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e3ca      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e6a:	4b97      	ldr	r3, [pc, #604]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e74:	4b94      	ldr	r3, [pc, #592]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80e4 	beq.w	8001054 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d007      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x4a>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	f040 808b 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	f040 8087 	bne.w	8000fb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea2:	4b89      	ldr	r3, [pc, #548]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x62>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e3a2      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	4b82      	ldr	r3, [pc, #520]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x7c>
 8000eca:	4b7f      	ldr	r3, [pc, #508]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ed2:	e005      	b.n	8000ee0 <HAL_RCC_OscConfig+0x88>
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d223      	bcs.n	8000f2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fd1d 	bl	8001928 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e383      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef8:	4b73      	ldr	r3, [pc, #460]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a72      	ldr	r2, [pc, #456]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000efe:	f043 0308 	orr.w	r3, r3, #8
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b70      	ldr	r3, [pc, #448]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	496d      	ldr	r1, [pc, #436]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f16:	4b6c      	ldr	r3, [pc, #432]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4968      	ldr	r1, [pc, #416]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	604b      	str	r3, [r1, #4]
 8000f2a:	e025      	b.n	8000f78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2c:	4b66      	ldr	r3, [pc, #408]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a65      	ldr	r2, [pc, #404]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b63      	ldr	r3, [pc, #396]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4960      	ldr	r1, [pc, #384]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	495b      	ldr	r1, [pc, #364]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d109      	bne.n	8000f78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fcdd 	bl	8001928 <RCC_SetFlashLatencyFromMSIRange>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e343      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f78:	f000 fc4a 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b52      	ldr	r3, [pc, #328]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	4950      	ldr	r1, [pc, #320]	@ (80010cc <HAL_RCC_OscConfig+0x274>)
 8000f8a:	5ccb      	ldrb	r3, [r1, r3]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	4a4e      	ldr	r2, [pc, #312]	@ (80010d0 <HAL_RCC_OscConfig+0x278>)
 8000f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f98:	4b4e      	ldr	r3, [pc, #312]	@ (80010d4 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fb63 	bl	8000668 <HAL_InitTick>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d052      	beq.n	8001052 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	e327      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d032      	beq.n	800101e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb8:	4b43      	ldr	r3, [pc, #268]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a42      	ldr	r2, [pc, #264]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fba0 	bl	8000708 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fb9c 	bl	8000708 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e310      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fde:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a36      	ldr	r2, [pc, #216]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4931      	ldr	r1, [pc, #196]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	492c      	ldr	r1, [pc, #176]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	e01a      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800101e:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a29      	ldr	r2, [pc, #164]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102a:	f7ff fb6d 	bl	8000708 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001032:	f7ff fb69 	bl	8000708 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e2dd      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f0      	bne.n	8001032 <HAL_RCC_OscConfig+0x1da>
 8001050:	e000      	b.n	8001054 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001052:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	2b00      	cmp	r3, #0
 800105e:	d074      	beq.n	800114a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b08      	cmp	r3, #8
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x21a>
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d10e      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d10b      	bne.n	800108a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d064      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f0>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d160      	bne.n	8001148 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e2ba      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x24a>
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e026      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010aa:	d115      	bne.n	80010d8 <HAL_RCC_OscConfig+0x280>
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a02      	ldr	r2, [pc, #8]	@ (80010c8 <HAL_RCC_OscConfig+0x270>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e014      	b.n	80010f0 <HAL_RCC_OscConfig+0x298>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	0800238c 	.word	0x0800238c
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	4ba0      	ldr	r3, [pc, #640]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a9f      	ldr	r2, [pc, #636]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b9d      	ldr	r3, [pc, #628]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a9c      	ldr	r2, [pc, #624]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb06 	bl	8000708 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fb02 	bl	8000708 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	@ 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e276      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001112:	4b92      	ldr	r3, [pc, #584]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x2a8>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff faf2 	bl	8000708 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff faee 	bl	8000708 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	@ 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e262      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113a:	4b88      	ldr	r3, [pc, #544]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x2d0>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d060      	beq.n	8001218 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x310>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d119      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d116      	bne.n	8001196 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	4b7c      	ldr	r3, [pc, #496]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x328>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e23f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b76      	ldr	r3, [pc, #472]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	4973      	ldr	r1, [pc, #460]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	e040      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d023      	beq.n	80011e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	4b6f      	ldr	r3, [pc, #444]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6e      	ldr	r2, [pc, #440]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff faad 	bl	8000708 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff faa9 	bl	8000708 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e21d      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b65      	ldr	r3, [pc, #404]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b62      	ldr	r3, [pc, #392]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	495f      	ldr	r1, [pc, #380]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b5d      	ldr	r3, [pc, #372]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5c      	ldr	r2, [pc, #368]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa89 	bl	8000708 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fa85 	bl	8000708 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e1f9      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800120c:	4b53      	ldr	r3, [pc, #332]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d03c      	beq.n	800129e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01c      	beq.n	8001266 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122c:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001232:	4a4a      	ldr	r2, [pc, #296]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fa64 	bl	8000708 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fa60 	bl	8000708 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1d4      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0ef      	beq.n	8001244 <HAL_RCC_OscConfig+0x3ec>
 8001264:	e01b      	b.n	800129e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800126c:	4a3b      	ldr	r2, [pc, #236]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001276:	f7ff fa47 	bl	8000708 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fa43 	bl	8000708 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1b7      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001290:	4b32      	ldr	r3, [pc, #200]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ef      	bne.n	800127e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80a6 	beq.w	80013f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012b0:	4b2a      	ldr	r3, [pc, #168]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c0:	4a26      	ldr	r2, [pc, #152]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c8:	4b24      	ldr	r3, [pc, #144]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d8:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <HAL_RCC_OscConfig+0x508>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d118      	bne.n	8001316 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <HAL_RCC_OscConfig+0x508>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <HAL_RCC_OscConfig+0x508>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fa0a 	bl	8000708 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f8:	f7ff fa06 	bl	8000708 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e17a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_RCC_OscConfig+0x508>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x4d8>
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800132e:	e029      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b05      	cmp	r3, #5
 8001336:	d115      	bne.n	8001364 <HAL_RCC_OscConfig+0x50c>
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800133a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134e:	4a03      	ldr	r2, [pc, #12]	@ (800135c <HAL_RCC_OscConfig+0x504>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x52c>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40007000 	.word	0x40007000
 8001364:	4b9c      	ldr	r3, [pc, #624]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800136a:	4a9b      	ldr	r2, [pc, #620]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001374:	4b98      	ldr	r3, [pc, #608]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137a:	4a97      	ldr	r2, [pc, #604]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d016      	beq.n	80013ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff f9bc 	bl	8000708 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff f9b8 	bl	8000708 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e12a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013aa:	4b8b      	ldr	r3, [pc, #556]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ed      	beq.n	8001394 <HAL_RCC_OscConfig+0x53c>
 80013b8:	e015      	b.n	80013e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ba:	f7ff f9a5 	bl	8000708 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff f9a1 	bl	8000708 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e113      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d8:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1ed      	bne.n	80013c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d105      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ec:	4b7a      	ldr	r3, [pc, #488]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f0:	4a79      	ldr	r2, [pc, #484]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80013f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80fe 	beq.w	80015fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	2b02      	cmp	r3, #2
 8001408:	f040 80d0 	bne.w	80015ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800140c:	4b72      	ldr	r3, [pc, #456]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141c:	429a      	cmp	r2, r3
 800141e:	d130      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	3b01      	subs	r3, #1
 800142c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	429a      	cmp	r2, r3
 8001430:	d127      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800143e:	429a      	cmp	r2, r3
 8001440:	d11f      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800144c:	2a07      	cmp	r2, #7
 800144e:	bf14      	ite	ne
 8001450:	2201      	movne	r2, #1
 8001452:	2200      	moveq	r2, #0
 8001454:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d109      	bne.n	8001482 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d06e      	beq.n	8001560 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d069      	beq.n	800155c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001488:	4b53      	ldr	r3, [pc, #332]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001494:	4b50      	ldr	r3, [pc, #320]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0ad      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a4:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014b0:	f7ff f92a 	bl	8000708 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f926 	bl	8000708 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e09a      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d6:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <HAL_RCC_OscConfig+0x784>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80014f8:	0852      	lsrs	r2, r2, #1
 80014fa:	3a01      	subs	r2, #1
 80014fc:	0552      	lsls	r2, r2, #21
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001510:	0912      	lsrs	r2, r2, #4
 8001512:	0452      	lsls	r2, r2, #17
 8001514:	430a      	orrs	r2, r1
 8001516:	4930      	ldr	r1, [pc, #192]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800151c:	4b2e      	ldr	r3, [pc, #184]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a2d      	ldr	r2, [pc, #180]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001526:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a2a      	ldr	r2, [pc, #168]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001532:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001534:	f7ff f8e8 	bl	8000708 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff f8e4 	bl	8000708 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e058      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154e:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155a:	e050      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e04f      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d148      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800156c:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001584:	f7ff f8c0 	bl	8000708 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f8bc 	bl	8000708 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e030      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x734>
 80015aa:	e028      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d023      	beq.n	80015fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a08      	ldr	r2, [pc, #32]	@ (80015d8 <HAL_RCC_OscConfig+0x780>)
 80015b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff f8a3 	bl	8000708 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	e00c      	b.n	80015e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f89f 	bl	8000708 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d905      	bls.n	80015e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e013      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ec      	bne.n	80015c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4905      	ldr	r1, [pc, #20]	@ (8001608 <HAL_RCC_OscConfig+0x7b0>)
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_RCC_OscConfig+0x7b4>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e001      	b.n	80015fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	feeefffc 	.word	0xfeeefffc

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0e7      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b75      	ldr	r3, [pc, #468]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b72      	ldr	r3, [pc, #456]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4970      	ldr	r1, [pc, #448]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b6e      	ldr	r3, [pc, #440]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cf      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d010      	beq.n	8001682 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b66      	ldr	r3, [pc, #408]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800166c:	429a      	cmp	r2, r3
 800166e:	d908      	bls.n	8001682 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b63      	ldr	r3, [pc, #396]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4960      	ldr	r1, [pc, #384]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d04c      	beq.n	8001728 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b5a      	ldr	r3, [pc, #360]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d121      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0a6      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ae:	4b54      	ldr	r3, [pc, #336]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d115      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e09a      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e08e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e086      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b46      	ldr	r3, [pc, #280]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4943      	ldr	r1, [pc, #268]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff f806 	bl	8000708 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff f802 	bl	8000708 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e06e      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d010      	beq.n	8001756 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001740:	429a      	cmp	r2, r3
 8001742:	d208      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	492b      	ldr	r1, [pc, #172]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001756:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d210      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001764:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 0207 	bic.w	r2, r3, #7
 800176c:	4923      	ldr	r1, [pc, #140]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <HAL_RCC_ClockConfig+0x1ec>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e036      	b.n	80017f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4918      	ldr	r1, [pc, #96]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4910      	ldr	r1, [pc, #64]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c4:	f000 f824 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	490b      	ldr	r1, [pc, #44]	@ (8001804 <HAL_RCC_ClockConfig+0x1f4>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1f8>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_ClockConfig+0x1fc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe ff3d 	bl	8000668 <HAL_InitTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40022000 	.word	0x40022000
 8001800:	40021000 	.word	0x40021000
 8001804:	0800238c 	.word	0x0800238c
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181e:	4b3e      	ldr	r3, [pc, #248]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001828:	4b3b      	ldr	r3, [pc, #236]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x34>
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d121      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d11e      	bne.n	8001882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001844:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e005      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800186c:	4a2b      	ldr	r2, [pc, #172]	@ (800191c <HAL_RCC_GetSysClockFreq+0x10c>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d102      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001888:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	e004      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	2b08      	cmp	r3, #8
 8001892:	d101      	bne.n	8001898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001894:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 8001896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d134      	bne.n	8001908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xac>
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	e005      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x114>)
 80018be:	617b      	str	r3, [r7, #20]
      break;
 80018c0:	e002      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	617b      	str	r3, [r7, #20]
      break;
 80018c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	3301      	adds	r3, #1
 80018d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	0e5b      	lsrs	r3, r3, #25
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	3301      	adds	r3, #1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001908:	69bb      	ldr	r3, [r7, #24]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	0800239c 	.word	0x0800239c
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001934:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001940:	f7ff fa26 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 8001944:	6178      	str	r0, [r7, #20]
 8001946:	e014      	b.n	8001972 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	4a24      	ldr	r2, [pc, #144]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	@ 0x58
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001960:	f7ff fa16 	bl	8000d90 <HAL_PWREx_GetVoltageRange>
 8001964:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001978:	d10b      	bne.n	8001992 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b80      	cmp	r3, #128	@ 0x80
 800197e:	d919      	bls.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2ba0      	cmp	r3, #160	@ 0xa0
 8001984:	d902      	bls.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	e013      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800198c:	2301      	movs	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e010      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b80      	cmp	r3, #128	@ 0x80
 8001996:	d902      	bls.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001998:	2303      	movs	r3, #3
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	e00a      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b80      	cmp	r3, #128	@ 0x80
 80019a2:	d102      	bne.n	80019aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a4:	2302      	movs	r3, #2
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e004      	b.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b70      	cmp	r3, #112	@ 0x70
 80019ae:	d101      	bne.n	80019b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 0207 	bic.w	r2, r3, #7
 80019bc:	4909      	ldr	r1, [pc, #36]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d001      	beq.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e095      	b.n	8001b26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a0a:	d009      	beq.n	8001a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
 8001a12:	e005      	b.n	8001a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fd3c 	bl	80004b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a60:	d902      	bls.n	8001a68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e002      	b.n	8001a6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001a76:	d007      	beq.n	8001a88 <HAL_SPI_Init+0xa0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001a80:	d002      	beq.n	8001a88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aca:	ea42 0103 	orr.w	r1, r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	f003 0204 	and.w	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b04:	ea42 0103 	orr.w	r1, r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b088      	sub	sp, #32
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b3e:	f7fe fde3 	bl	8000708 <HAL_GetTick>
 8001b42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e15c      	b.n	8001e12 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_SPI_Transmit+0x36>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e154      	b.n	8001e12 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_SPI_Transmit+0x48>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e14d      	b.n	8001e12 <HAL_SPI_Transmit+0x2e4>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2203      	movs	r2, #3
 8001b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc8:	d10f      	bne.n	8001bea <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf4:	2b40      	cmp	r3, #64	@ 0x40
 8001bf6:	d007      	beq.n	8001c08 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c10:	d952      	bls.n	8001cb8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <HAL_SPI_Transmit+0xf2>
 8001c1a:	8b7b      	ldrh	r3, [r7, #26]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d145      	bne.n	8001cac <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c30:	1c9a      	adds	r2, r3, #2
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c44:	e032      	b.n	8001cac <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d112      	bne.n	8001c7a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c64:	1c9a      	adds	r2, r3, #2
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001c78:	e018      	b.n	8001cac <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c7a:	f7fe fd45 	bl	8000708 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d803      	bhi.n	8001c92 <HAL_SPI_Transmit+0x164>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d102      	bne.n	8001c98 <HAL_SPI_Transmit+0x16a>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0b2      	b.n	8001e12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1c7      	bne.n	8001c46 <HAL_SPI_Transmit+0x118>
 8001cb6:	e083      	b.n	8001dc0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <HAL_SPI_Transmit+0x198>
 8001cc0:	8b7b      	ldrh	r3, [r7, #26]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d177      	bne.n	8001db6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d912      	bls.n	8001cf6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd4:	881a      	ldrh	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce0:	1c9a      	adds	r2, r3, #2
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b02      	subs	r3, #2
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001cf4:	e05f      	b.n	8001db6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	330c      	adds	r3, #12
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d1c:	e04b      	b.n	8001db6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d12b      	bne.n	8001d84 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d912      	bls.n	8001d5c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	1c9a      	adds	r2, r3, #2
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b02      	subs	r3, #2
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d5a:	e02c      	b.n	8001db6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	330c      	adds	r3, #12
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d82:	e018      	b.n	8001db6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d84:	f7fe fcc0 	bl	8000708 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d803      	bhi.n	8001d9c <HAL_SPI_Transmit+0x26e>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d102      	bne.n	8001da2 <HAL_SPI_Transmit+0x274>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e02d      	b.n	8001e12 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ae      	bne.n	8001d1e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fa5b 	bl	8002280 <SPI_EndRxTxTransaction>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
  }
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10e      	bne.n	8001e5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
    return;
 8001e5a:	e0ce      	b.n	8001ffa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_SPI_IRQHandler+0x5e>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
    return;
 8001e78:	e0bf      	b.n	8001ffa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_SPI_IRQHandler+0x7e>
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80b0 	beq.w	8001ffa <HAL_SPI_IRQHandler+0x1de>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80aa 	beq.w	8001ffa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d011      	beq.n	8001ee0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	e00b      	b.n	8001ef8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
        return;
 8001ef6:	e080      	b.n	8001ffa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d014      	beq.n	8001f2c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00c      	beq.n	8001f50 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f043 0208 	orr.w	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d04f      	beq.n	8001ff8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f66:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d104      	bne.n	8001f84 <HAL_SPI_IRQHandler+0x168>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d034      	beq.n	8001fee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0203 	bic.w	r2, r2, #3
 8001f92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d011      	beq.n	8001fc0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_SPI_IRQHandler+0x1e4>)
 8001fa2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fcee 	bl	800098a <HAL_DMA_Abort_IT>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d016      	beq.n	8001ff6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <HAL_SPI_IRQHandler+0x1e4>)
 8001fce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fcd8 	bl	800098a <HAL_DMA_Abort_IT>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001fec:	e003      	b.n	8001ff6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f808 	bl	8002004 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001ff4:	e000      	b.n	8001ff8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8001ff6:	bf00      	nop
    return;
 8001ff8:	bf00      	nop
  }
}
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	08002019 	.word	0x08002019

08002004 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002024:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f7ff ffe5 	bl	8002004 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002054:	f7fe fb58 	bl	8000708 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	4413      	add	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002064:	f7fe fb50 	bl	8000708 <HAL_GetTick>
 8002068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800206a:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800207a:	e054      	b.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002082:	d050      	beq.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002084:	f7fe fb40 	bl	8000708 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	429a      	cmp	r2, r3
 8002092:	d902      	bls.n	800209a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d13d      	bne.n	8002116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020b2:	d111      	bne.n	80020d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020bc:	d004      	beq.n	80020c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c6:	d107      	bne.n	80020d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e0:	d10f      	bne.n	8002102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e017      	b.n	8002146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3b01      	subs	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4013      	ands	r3, r2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	429a      	cmp	r2, r3
 8002142:	d19b      	bne.n	800207c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002166:	f7fe facf 	bl	8000708 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4413      	add	r3, r2
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002176:	f7fe fac7 	bl	8000708 <HAL_GetTick>
 800217a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002184:	4b3d      	ldr	r3, [pc, #244]	@ (800227c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00da      	lsls	r2, r3, #3
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	0d1b      	lsrs	r3, r3, #20
 8002194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800219c:	e060      	b.n	8002260 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80021a4:	d107      	bne.n	80021b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d104      	bne.n	80021b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d050      	beq.n	8002260 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021be:	f7fe faa3 	bl	8000708 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d902      	bls.n	80021d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d13d      	bne.n	8002250 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021ec:	d111      	bne.n	8002212 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021f6:	d004      	beq.n	8002202 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002200:	d107      	bne.n	8002212 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002210:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800221a:	d10f      	bne.n	800223c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800223a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e010      	b.n	8002272 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	3b01      	subs	r3, #1
 800225e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4013      	ands	r3, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d196      	bne.n	800219e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3728      	adds	r7, #40	@ 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000

08002280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff ff5b 	bl	8002154 <SPI_WaitFifoStateUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a8:	f043 0220 	orr.w	r2, r3, #32
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e027      	b.n	8002304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fec0 	bl	8002044 <SPI_WaitFlagStateUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e014      	b.n	8002304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ff34 	bl	8002154 <SPI_WaitFifoStateUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e000      	b.n	8002304 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <memset>:
 800230c:	4402      	add	r2, r0
 800230e:	4603      	mov	r3, r0
 8002310:	4293      	cmp	r3, r2
 8002312:	d100      	bne.n	8002316 <memset+0xa>
 8002314:	4770      	bx	lr
 8002316:	f803 1b01 	strb.w	r1, [r3], #1
 800231a:	e7f9      	b.n	8002310 <memset+0x4>

0800231c <__libc_init_array>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4d0d      	ldr	r5, [pc, #52]	@ (8002354 <__libc_init_array+0x38>)
 8002320:	4c0d      	ldr	r4, [pc, #52]	@ (8002358 <__libc_init_array+0x3c>)
 8002322:	1b64      	subs	r4, r4, r5
 8002324:	10a4      	asrs	r4, r4, #2
 8002326:	2600      	movs	r6, #0
 8002328:	42a6      	cmp	r6, r4
 800232a:	d109      	bne.n	8002340 <__libc_init_array+0x24>
 800232c:	4d0b      	ldr	r5, [pc, #44]	@ (800235c <__libc_init_array+0x40>)
 800232e:	4c0c      	ldr	r4, [pc, #48]	@ (8002360 <__libc_init_array+0x44>)
 8002330:	f000 f818 	bl	8002364 <_init>
 8002334:	1b64      	subs	r4, r4, r5
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	2600      	movs	r6, #0
 800233a:	42a6      	cmp	r6, r4
 800233c:	d105      	bne.n	800234a <__libc_init_array+0x2e>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f855 3b04 	ldr.w	r3, [r5], #4
 8002344:	4798      	blx	r3
 8002346:	3601      	adds	r6, #1
 8002348:	e7ee      	b.n	8002328 <__libc_init_array+0xc>
 800234a:	f855 3b04 	ldr.w	r3, [r5], #4
 800234e:	4798      	blx	r3
 8002350:	3601      	adds	r6, #1
 8002352:	e7f2      	b.n	800233a <__libc_init_array+0x1e>
 8002354:	080023cc 	.word	0x080023cc
 8002358:	080023cc 	.word	0x080023cc
 800235c:	080023cc 	.word	0x080023cc
 8002360:	080023d0 	.word	0x080023d0

08002364 <_init>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	bf00      	nop
 8002368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236a:	bc08      	pop	{r3}
 800236c:	469e      	mov	lr, r3
 800236e:	4770      	bx	lr

08002370 <_fini>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	bf00      	nop
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr
