
test-lora-on-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800310c  0800310c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800314c  0800314c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800314c  0800314c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800314c  0800314c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003150  08003150  00004150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003154  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003160  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003160  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e69  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf5  00000000  00000000  0000dea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0000faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075d  00000000  00000000  00010478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e3a  00000000  00000000  00010bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a347  00000000  00000000  00035a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e13e1  00000000  00000000  0003fd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  0012117c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00123850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030f4 	.word	0x080030f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030f4 	.word	0x080030f4

080001c8 <_read>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

static uint8_t _read(lora_t *lora, uint8_t address) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
  // command - request address to read
  uint8_t cmd = address & 0x7F, data;
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	73fb      	strb	r3, [r7, #15]

  write_pin(lora->ss_port, lora->ss_pin, false);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6858      	ldr	r0, [r3, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	891b      	ldrh	r3, [r3, #8]
 80001e6:	2200      	movs	r2, #0
 80001e8:	4619      	mov	r1, r3
 80001ea:	f000 fa3b 	bl	8000664 <write_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6818      	ldr	r0, [r3, #0]
 80001f2:	f107 010f 	add.w	r1, r7, #15
 80001f6:	2364      	movs	r3, #100	@ 0x64
 80001f8:	2201      	movs	r2, #1
 80001fa:	f001 ffb2 	bl	8002162 <HAL_SPI_Transmit>
  HAL_SPI_Receive(lora->spi, &data, 1, 100);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	6818      	ldr	r0, [r3, #0]
 8000202:	f107 010e 	add.w	r1, r7, #14
 8000206:	2364      	movs	r3, #100	@ 0x64
 8000208:	2201      	movs	r2, #1
 800020a:	f002 f920 	bl	800244e <HAL_SPI_Receive>
  write_pin(lora->ss_port, lora->ss_pin, true);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	6858      	ldr	r0, [r3, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	891b      	ldrh	r3, [r3, #8]
 8000216:	2201      	movs	r2, #1
 8000218:	4619      	mov	r1, r3
 800021a:	f000 fa23 	bl	8000664 <write_pin>

  return data;
 800021e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <_write_bytes>:

static void _write_bytes(lora_t *lora, uint8_t address, const uint8_t *data, uint8_t size) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	607a      	str	r2, [r7, #4]
 8000232:	461a      	mov	r2, r3
 8000234:	460b      	mov	r3, r1
 8000236:	72fb      	strb	r3, [r7, #11]
 8000238:	4613      	mov	r3, r2
 800023a:	72bb      	strb	r3, [r7, #10]
  // command - tell device to write to address
  uint8_t cmd = 0x80 | address;
 800023c:	7afb      	ldrb	r3, [r7, #11]
 800023e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000242:	b2db      	uxtb	r3, r3
 8000244:	75fb      	strb	r3, [r7, #23]

  write_pin(lora->ss_port, lora->ss_pin, false);
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6858      	ldr	r0, [r3, #4]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	891b      	ldrh	r3, [r3, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	4619      	mov	r1, r3
 8000252:	f000 fa07 	bl	8000664 <write_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	f107 0117 	add.w	r1, r7, #23
 800025e:	2364      	movs	r3, #100	@ 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	f001 ff7e 	bl	8002162 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(lora->spi, data, size, 100);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	7abb      	ldrb	r3, [r7, #10]
 800026c:	b29a      	uxth	r2, r3
 800026e:	2364      	movs	r3, #100	@ 0x64
 8000270:	6879      	ldr	r1, [r7, #4]
 8000272:	f001 ff76 	bl	8002162 <HAL_SPI_Transmit>
  write_pin(lora->ss_port, lora->ss_pin, true);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	6858      	ldr	r0, [r3, #4]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	f000 f9ef 	bl	8000664 <write_pin>
}
 8000286:	bf00      	nop
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <_write>:

static void _write(lora_t *lora, uint8_t address, uint8_t data) {
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	460b      	mov	r3, r1
 8000298:	70fb      	strb	r3, [r7, #3]
 800029a:	4613      	mov	r3, r2
 800029c:	70bb      	strb	r3, [r7, #2]
  _write_bytes(lora, address, &data, 1);
 800029e:	1cba      	adds	r2, r7, #2
 80002a0:	78f9      	ldrb	r1, [r7, #3]
 80002a2:	2301      	movs	r3, #1
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f7ff ffbf 	bl	8000228 <_write_bytes>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <explicit_header_mode>:

static void explicit_header_mode(lora_t *lora) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = false;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2200      	movs	r2, #0
 80002be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) & 0xfe);
 80002c2:	211d      	movs	r1, #29
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff7f 	bl	80001c8 <_read>
 80002ca:	4603      	mov	r3, r0
 80002cc:	f023 0301 	bic.w	r3, r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	461a      	mov	r2, r3
 80002d4:	211d      	movs	r1, #29
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ffd9 	bl	800028e <_write>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <implicit_header_mode>:

static void implicit_header_mode(lora_t *lora) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = true;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2201      	movs	r2, #1
 80002f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) | 0x01);
 80002f4:	211d      	movs	r1, #29
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ff66 	bl	80001c8 <_read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	461a      	mov	r2, r3
 8000306:	211d      	movs	r1, #29
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffc0 	bl	800028e <_write>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <lora_init>:


void lora_init(lora_t *lora, SPI_HandleTypeDef *spi, port_t *ss_port, pin_t ss_pin, port_t *rst_port, pin_t rst_pin) {
 8000316:	b580      	push	{r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
 8000322:	807b      	strh	r3, [r7, #2]
  lora->spi = spi;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	601a      	str	r2, [r3, #0]
  lora->ss_port = ss_port;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	605a      	str	r2, [r3, #4]
  lora->ss_pin = ss_pin;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	887a      	ldrh	r2, [r7, #2]
 8000334:	811a      	strh	r2, [r3, #8]
  lora->rst_port = rst_port;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	69ba      	ldr	r2, [r7, #24]
 800033a:	60da      	str	r2, [r3, #12]
  lora->rst_pin = rst_pin;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	8bba      	ldrh	r2, [r7, #28]
 8000340:	821a      	strh	r2, [r3, #16]
  lora->on_receive = NULL;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  lora->on_cad_done = NULL;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  lora->on_tx_done = NULL;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]

  // set SS high
  write_pin(lora->ss_port, lora->ss_pin, true);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	6858      	ldr	r0, [r3, #4]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	891b      	ldrh	r3, [r3, #8]
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	f000 f980 	bl	8000664 <write_pin>

  // toggle reset
  write_pin(lora->rst_port, lora->rst_pin, false);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	68d8      	ldr	r0, [r3, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	8a1b      	ldrh	r3, [r3, #16]
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f000 f978 	bl	8000664 <write_pin>
  HAL_Delay(5);
 8000374:	2005      	movs	r0, #5
 8000376:	f000 fcbb 	bl	8000cf0 <HAL_Delay>
  write_pin(lora->rst_port, lora->rst_pin, true);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	68d8      	ldr	r0, [r3, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	8a1b      	ldrh	r3, [r3, #16]
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	f000 f96d 	bl	8000664 <write_pin>
  HAL_Delay(5);
 800038a:	2005      	movs	r0, #5
 800038c:	f000 fcb0 	bl	8000cf0 <HAL_Delay>

  // put in sleep mode
  lora_sleep(lora);
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f000 f883 	bl	800049c <lora_sleep>

  // set base addresses
  _write(lora, REG_FIFO_TX_BASE_ADDR, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	210e      	movs	r1, #14
 800039a:	68f8      	ldr	r0, [r7, #12]
 800039c:	f7ff ff77 	bl	800028e <_write>
  _write(lora, REG_FIFO_RX_BASE_ADDR, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	210f      	movs	r1, #15
 80003a4:	68f8      	ldr	r0, [r7, #12]
 80003a6:	f7ff ff72 	bl	800028e <_write>

  // set LNA boost
  _write(lora, REG_LNA, _read(lora, REG_LNA) | 0x03);
 80003aa:	210c      	movs	r1, #12
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	f7ff ff0b 	bl	80001c8 <_read>
 80003b2:	4603      	mov	r3, r0
 80003b4:	f043 0303 	orr.w	r3, r3, #3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	210c      	movs	r1, #12
 80003be:	68f8      	ldr	r0, [r7, #12]
 80003c0:	f7ff ff65 	bl	800028e <_write>

  // set auto AGC
  _write(lora, REG_MODEM_CONFIG_3, 0x04);
 80003c4:	2204      	movs	r2, #4
 80003c6:	2126      	movs	r1, #38	@ 0x26
 80003c8:	68f8      	ldr	r0, [r7, #12]
 80003ca:	f7ff ff60 	bl	800028e <_write>

  // set to +17dBm
  lora_set_tx_power(lora, 17);
 80003ce:	2111      	movs	r1, #17
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f000 f870 	bl	80004b6 <lora_set_tx_power>

  // put in standby mode
  lora_idle(lora);
 80003d6:	68f8      	ldr	r0, [r7, #12]
 80003d8:	f000 f853 	bl	8000482 <lora_idle>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <lora_available>:

  return packet_length;
}

// get number of available bytes in FIFO
int lora_available(lora_t *lora) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return _read(lora, REG_RX_NB_BYTES) - lora->_pos;
 80003ec:	2113      	movs	r1, #19
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff feea 	bl	80001c8 <_read>
 80003f4:	4603      	mov	r3, r0
 80003f6:	461a      	mov	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	1ad3      	subs	r3, r2, r3
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <lora_read>:

// read one byte from FIFO
uint8_t lora_read(lora_t *lora) {
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
  if (!lora_available(lora)) {
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff ffe8 	bl	80003e4 <lora_available>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d101      	bne.n	800041e <lora_read+0x18>
    return 0;
 800041a:	2300      	movs	r3, #0
 800041c:	e009      	b.n	8000432 <lora_read+0x2c>
  }

  lora->_pos++;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6a1b      	ldr	r3, [r3, #32]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	621a      	str	r2, [r3, #32]

  return _read(lora, REG_FIFO);
 8000428:	2100      	movs	r1, #0
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f7ff fecc 	bl	80001c8 <_read>
 8000430:	4603      	mov	r3, r0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <lora_receive>:
  _write(lora, REG_FIFO_ADDR_PTR, address);

  return b;
}

void lora_receive(lora_t *lora, int size) {
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
  _write(lora, REG_DIO_MAPPING_1, 0x00); // DIO0 -> RXDONE
 8000444:	2200      	movs	r2, #0
 8000446:	2140      	movs	r1, #64	@ 0x40
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff ff20 	bl	800028e <_write>

  if (size > 0) {
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	dd0a      	ble.n	800046a <lora_receive+0x30>
    implicit_header_mode(lora);
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff45 	bl	80002e4 <implicit_header_mode>

    _write(lora, REG_PAYLOAD_LENGTH, size & 0xff);
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	461a      	mov	r2, r3
 8000460:	2122      	movs	r1, #34	@ 0x22
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ff13 	bl	800028e <_write>
 8000468:	e002      	b.n	8000470 <lora_receive+0x36>
  } else {
    explicit_header_mode(lora);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ff21 	bl	80002b2 <explicit_header_mode>
  }

  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000470:	2285      	movs	r2, #133	@ 0x85
 8000472:	2101      	movs	r1, #1
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f7ff ff0a 	bl	800028e <_write>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <lora_idle>:
void lora_cad(lora_t *lora) {
  _write(lora, REG_DIO_MAPPING_1, 0x80);// DIO0 -> CADDONE
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_CAD);
}

void lora_idle(lora_t *lora) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800048a:	2281      	movs	r2, #129	@ 0x81
 800048c:	2101      	movs	r1, #1
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff fefd 	bl	800028e <_write>
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <lora_sleep>:

void lora_sleep(lora_t *lora) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	2101      	movs	r1, #1
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff fef0 	bl	800028e <_write>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <lora_set_tx_power>:

void lora_set_tx_power(lora_t *lora, int level) {
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
  if (level > 17) {
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	2b11      	cmp	r3, #17
 80004c4:	dd11      	ble.n	80004ea <lora_set_tx_power+0x34>
    if (level > 20) {
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2b14      	cmp	r3, #20
 80004ca:	dd01      	ble.n	80004d0 <lora_set_tx_power+0x1a>
      level = 20;
 80004cc:	2314      	movs	r3, #20
 80004ce:	603b      	str	r3, [r7, #0]
    }

    level -= 3;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	3b03      	subs	r3, #3
 80004d4:	603b      	str	r3, [r7, #0]

    // high power operation
    _write(lora, REG_PA_DAC, 0x87);
 80004d6:	2287      	movs	r2, #135	@ 0x87
 80004d8:	214d      	movs	r1, #77	@ 0x4d
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff fed7 	bl	800028e <_write>
    lora_set_ocp(lora, 140);
 80004e0:	218c      	movs	r1, #140	@ 0x8c
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 f822 	bl	800052c <lora_set_ocp>
 80004e8:	e00d      	b.n	8000506 <lora_set_tx_power+0x50>
  } else {
    if (level < 2) {
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	dc01      	bgt.n	80004f4 <lora_set_tx_power+0x3e>
      level = 2;
 80004f0:	2302      	movs	r3, #2
 80004f2:	603b      	str	r3, [r7, #0]
    }

    _write(lora, REG_PA_DAC, 0x84);
 80004f4:	2284      	movs	r2, #132	@ 0x84
 80004f6:	214d      	movs	r1, #77	@ 0x4d
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff fec8 	bl	800028e <_write>
    lora_set_ocp(lora, 100);
 80004fe:	2164      	movs	r1, #100	@ 0x64
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f813 	bl	800052c <lora_set_ocp>
  }

  _write(lora, REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	3b02      	subs	r3, #2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	b25b      	sxtb	r3, r3
 8000510:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000514:	b25b      	sxtb	r3, r3
 8000516:	b2db      	uxtb	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	2109      	movs	r1, #9
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff feb6 	bl	800028e <_write>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <lora_set_ocp>:
void lora_disable_invert_iq(lora_t *lora) {
  _write(lora, REG_INVERTIQ,  0x27);
  _write(lora, REG_INVERTIQ2, 0x1d);
}

void lora_set_ocp(lora_t *lora, uint8_t mA) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8000538:	231b      	movs	r3, #27
 800053a:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	2b78      	cmp	r3, #120	@ 0x78
 8000540:	d809      	bhi.n	8000556 <lora_set_ocp+0x2a>
    ocpTrim = (mA - 45) / 5;
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	3b2d      	subs	r3, #45	@ 0x2d
 8000546:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <lora_set_ocp+0x64>)
 8000548:	fb82 1203 	smull	r1, r2, r2, r3
 800054c:	1052      	asrs	r2, r2, #1
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e00b      	b.n	800056e <lora_set_ocp+0x42>
  } else if (mA <=240) {
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	2bf0      	cmp	r3, #240	@ 0xf0
 800055a:	d808      	bhi.n	800056e <lora_set_ocp+0x42>
    ocpTrim = (mA + 30) / 10;
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	331e      	adds	r3, #30
 8000560:	4a0b      	ldr	r2, [pc, #44]	@ (8000590 <lora_set_ocp+0x64>)
 8000562:	fb82 1203 	smull	r1, r2, r2, r3
 8000566:	1092      	asrs	r2, r2, #2
 8000568:	17db      	asrs	r3, r3, #31
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	73fb      	strb	r3, [r7, #15]
  }

  _write(lora, REG_OCP, 0x20 | (0x1F & ocpTrim));
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	f003 031f 	and.w	r3, r3, #31
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f043 0320 	orr.w	r3, r3, #32
 800057a:	b2db      	uxtb	r3, r3
 800057c:	461a      	mov	r2, r3
 800057e:	210b      	movs	r1, #11
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe84 	bl	800028e <_write>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	66666667 	.word	0x66666667

08000594 <lora_dio_interrupt>:
    // set gain
    _write(lora, REG_LNA, _read(lora, REG_LNA) | (gain << 5));
  }
}

void lora_dio_interrupt(lora_t *lora) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  int irq_flags = _read(lora, REG_IRQ_FLAGS);
 800059c:	2112      	movs	r1, #18
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f7ff fe12 	bl	80001c8 <_read>
 80005a4:	4603      	mov	r3, r0
 80005a6:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  _write(lora, REG_IRQ_FLAGS, irq_flags);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	2112      	movs	r1, #18
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fe6c 	bl	800028e <_write>

  if (irq_flags & IRQ_CAD_DONE_MASK) {
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d010      	beq.n	80005e2 <lora_dio_interrupt+0x4e>
    if (lora->on_cad_done) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d049      	beq.n	800065c <lora_dio_interrupt+0xc8>
      lora->on_cad_done(irq_flags & IRQ_CAD_DETECTED_MASK);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	f002 0201 	and.w	r2, r2, #1
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2201      	movne	r2, #1
 80005d8:	2200      	moveq	r2, #0
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	4610      	mov	r0, r2
 80005de:	4798      	blx	r3
      if (lora->on_tx_done) {
        lora->on_tx_done();
      }
    }
  }
}
 80005e0:	e03c      	b.n	800065c <lora_dio_interrupt+0xc8>
  } else if (!(irq_flags & IRQ_PAYLOAD_CRC_ERROR_MASK)) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f003 0320 	and.w	r3, r3, #32
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d137      	bne.n	800065c <lora_dio_interrupt+0xc8>
    if (irq_flags & IRQ_RX_DONE_MASK) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d026      	beq.n	8000644 <lora_dio_interrupt+0xb0>
      lora->_pos = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
      int length = lora->_implicit_header ? _read(lora, REG_PAYLOAD_LENGTH) : _read(lora, REG_RX_NB_BYTES);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <lora_dio_interrupt+0x7e>
 8000606:	2122      	movs	r1, #34	@ 0x22
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff fddd 	bl	80001c8 <_read>
 800060e:	4603      	mov	r3, r0
 8000610:	e004      	b.n	800061c <lora_dio_interrupt+0x88>
 8000612:	2113      	movs	r1, #19
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff fdd7 	bl	80001c8 <_read>
 800061a:	4603      	mov	r3, r0
 800061c:	60bb      	str	r3, [r7, #8]
      _write(lora, REG_FIFO_ADDR_PTR, _read(lora, REG_FIFO_RX_CURRENT_ADDR));
 800061e:	2110      	movs	r1, #16
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff fdd1 	bl	80001c8 <_read>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	210d      	movs	r1, #13
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fe2e 	bl	800028e <_write>
      if (lora->on_receive) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d010      	beq.n	800065c <lora_dio_interrupt+0xc8>
        lora->on_receive(length);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	68b8      	ldr	r0, [r7, #8]
 8000640:	4798      	blx	r3
}
 8000642:	e00b      	b.n	800065c <lora_dio_interrupt+0xc8>
    } else if (irq_flags & IRQ_TX_DONE_MASK) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <lora_dio_interrupt+0xc8>
      if (lora->on_tx_done) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <lora_dio_interrupt+0xc8>
        lora->on_tx_done();
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4798      	blx	r3
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <write_pin>:
#include "util.h"

void write_pin(port_t *port, pin_t pin, bool state) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	807b      	strh	r3, [r7, #2]
 8000670:	4613      	mov	r3, r2
 8000672:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000674:	787b      	ldrb	r3, [r7, #1]
 8000676:	461a      	mov	r2, r3
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	4619      	mov	r1, r3
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fe57 	bl	8001330 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <toggle_pin>:

bool read_pin(port_t *port, pin_t pin) {
  return HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_SET;
}

void toggle_pin(port_t *port, pin_t pin) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	460b      	mov	r3, r1
 8000694:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_TogglePin(port, pin);
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	4619      	mov	r1, r3
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 fe60 	bl	8001360 <HAL_GPIO_TogglePin>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <on_receive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// interrupt handler (not actually an interrupt due to call location)
void on_receive(int size) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	// read into buffer
	for (int i = 0; i < size && i < sizeof(buffer); i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e00c      	b.n	80006d0 <on_receive+0x28>
		buffer[i] = lora_read(&lora);
 80006b6:	4824      	ldr	r0, [pc, #144]	@ (8000748 <on_receive+0xa0>)
 80006b8:	f7ff fea5 	bl	8000406 <lora_read>
 80006bc:	4603      	mov	r3, r0
 80006be:	4619      	mov	r1, r3
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <on_receive+0xa4>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	460a      	mov	r2, r1
 80006c8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size && i < sizeof(buffer); i++) {
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da02      	bge.n	80006de <on_receive+0x36>
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0eb      	beq.n	80006b6 <on_receive+0xe>
	}

	// sleep -- resets FIFO buffer
	lora_sleep(&lora);
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <on_receive+0xa0>)
 80006e0:	f7ff fedc 	bl	800049c <lora_sleep>

	// flash LEDs
	write_pin(Led1_GPIO_Port, Led1_Pin, buffer[0] & 0x1);
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <on_receive+0xa4>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf14      	ite	ne
 80006f0:	2301      	movne	r3, #1
 80006f2:	2300      	moveq	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	2102      	movs	r1, #2
 80006fa:	4815      	ldr	r0, [pc, #84]	@ (8000750 <on_receive+0xa8>)
 80006fc:	f7ff ffb2 	bl	8000664 <write_pin>
	write_pin(Led2_GPIO_Port, Led2_Pin, buffer[0] & 0x2);
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <on_receive+0xa4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	2104      	movs	r1, #4
 8000716:	480e      	ldr	r0, [pc, #56]	@ (8000750 <on_receive+0xa8>)
 8000718:	f7ff ffa4 	bl	8000664 <write_pin>
	write_pin(Led3_GPIO_Port, Led3_Pin, buffer[0] & 0x4);
 800071c:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <on_receive+0xa4>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	2108      	movs	r1, #8
 8000732:	4807      	ldr	r0, [pc, #28]	@ (8000750 <on_receive+0xa8>)
 8000734:	f7ff ff96 	bl	8000664 <write_pin>

	// put back into receive
	lora_receive(&lora, 0);
 8000738:	2100      	movs	r1, #0
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <on_receive+0xa0>)
 800073c:	f7ff fe7d 	bl	800043a <lora_receive>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000008c 	.word	0x2000008c
 800074c:	200000b4 	.word	0x200000b4
 8000750:	48000800 	.word	0x48000800

08000754 <setup>:

void setup(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af02      	add	r7, sp, #8
	lora_init(&lora, &hspi2, RadioSelect_GPIO_Port, RadioSelect_Pin, RadioReset_GPIO_Port, RadioReset_Pin);
 800075a:	2301      	movs	r3, #1
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <setup+0x38>)
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	4a09      	ldr	r2, [pc, #36]	@ (800078c <setup+0x38>)
 8000768:	4909      	ldr	r1, [pc, #36]	@ (8000790 <setup+0x3c>)
 800076a:	480a      	ldr	r0, [pc, #40]	@ (8000794 <setup+0x40>)
 800076c:	f7ff fdd3 	bl	8000316 <lora_init>
	lora_set_tx_power(&lora, 20);
 8000770:	2114      	movs	r1, #20
 8000772:	4808      	ldr	r0, [pc, #32]	@ (8000794 <setup+0x40>)
 8000774:	f7ff fe9f 	bl	80004b6 <lora_set_tx_power>
	lora.on_receive = on_receive;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <setup+0x40>)
 800077a:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <setup+0x44>)
 800077c:	615a      	str	r2, [r3, #20]
	lora_receive(&lora, 0); // 0 = explicit header mode
 800077e:	2100      	movs	r1, #0
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <setup+0x40>)
 8000782:	f7ff fe5a 	bl	800043a <lora_receive>
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	48000400 	.word	0x48000400
 8000790:	20000028 	.word	0x20000028
 8000794:	2000008c 	.word	0x2000008c
 8000798:	080006a9 	.word	0x080006a9

0800079c <loop>:

void loop(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	if (was_interrupt) {
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <loop+0x2c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <loop+0x1a>
		lora_dio_interrupt(&lora);
 80007aa:	4808      	ldr	r0, [pc, #32]	@ (80007cc <loop+0x30>)
 80007ac:	f7ff fef2 	bl	8000594 <lora_dio_interrupt>
		was_interrupt = false;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <loop+0x2c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
	}

	toggle_pin(Led0_GPIO_Port, Led0_Pin);
 80007b6:	2101      	movs	r1, #1
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <loop+0x34>)
 80007ba:	f7ff ff66 	bl	800068a <toggle_pin>
	HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	@ 0x64
 80007c0:	f000 fa96 	bl	8000cf0 <HAL_Delay>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000b5 	.word	0x200000b5
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	48000800 	.word	0x48000800

080007d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
	if (pin == RadioDIO_Pin) {
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d102      	bne.n	80007ea <HAL_GPIO_EXTI_Callback+0x16>
		was_interrupt = true;
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
	}
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000b5 	.word	0x200000b5

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fa01 	bl	8000c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f809 	bl	800081a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f896 	bl	8000938 <MX_GPIO_Init>
  MX_SPI2_Init();
 800080c:	f000 f856 	bl	80008bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000810:	f7ff ffa0 	bl	8000754 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8000814:	f7ff ffc2 	bl	800079c <loop>
 8000818:	e7fc      	b.n	8000814 <main+0x18>

0800081a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b096      	sub	sp, #88	@ 0x58
 800081e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2244      	movs	r2, #68	@ 0x44
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fc37 	bl	800309c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800083c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000840:	f000 fdce 	bl	80013e0 <HAL_PWREx_ControlVoltageScaling>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800084a:	f000 f8eb 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084e:	2302      	movs	r3, #2
 8000850:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000852:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000856:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000868:	230a      	movs	r3, #10
 800086a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800086c:	2307      	movs	r3, #7
 800086e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fe05 	bl	800148c <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000888:	f000 f8cc 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000890:	2303      	movs	r3, #3
 8000892:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008a0:	463b      	mov	r3, r7
 80008a2:	2104      	movs	r1, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 f9cd 	bl	8001c44 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008b0:	f000 f8b8 	bl	8000a24 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3758      	adds	r7, #88	@ 0x58
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_SPI2_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80008da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008f2:	2238      	movs	r2, #56	@ 0x38
 80008f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_SPI2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_SPI2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_SPI2_Init+0x74>)
 800090a:	2207      	movs	r2, #7
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_SPI2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_SPI2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_SPI2_Init+0x74>)
 800091c:	f001 fb7e 	bl	800201c <HAL_SPI_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f87d 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028
 8000934:	40003800 	.word	0x40003800

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b32      	ldr	r3, [pc, #200]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a31      	ldr	r2, [pc, #196]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <MX_GPIO_Init+0xe0>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	4820      	ldr	r0, [pc, #128]	@ (8000a1c <MX_GPIO_Init+0xe4>)
 800099c:	f000 fcc8 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RadioReset_Pin|RadioSelect_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80009a6:	481e      	ldr	r0, [pc, #120]	@ (8000a20 <MX_GPIO_Init+0xe8>)
 80009a8:	f000 fcc2 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led0_Pin Led1_Pin Led2_Pin Led3_Pin */
  GPIO_InitStruct.Pin = Led0_Pin|Led1_Pin|Led2_Pin|Led3_Pin;
 80009ac:	230f      	movs	r3, #15
 80009ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <MX_GPIO_Init+0xe4>)
 80009c4:	f000 fb0a 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RadioReset_Pin RadioSelect_Pin */
  GPIO_InitStruct.Pin = RadioReset_Pin|RadioSelect_Pin;
 80009c8:	f241 0301 	movw	r3, #4097	@ 0x1001
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0xe8>)
 80009e2:	f000 fafb 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : RadioDIO_Pin */
  GPIO_InitStruct.Pin = RadioDIO_Pin;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RadioDIO_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <MX_GPIO_Init+0xe8>)
 80009fc:	f000 faee 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2007      	movs	r0, #7
 8000a06:	f000 fa72 	bl	8000eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f000 fa8b 	bl	8000f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800
 8000a20:	48000400 	.word	0x48000400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1b      	ldr	r2, [pc, #108]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d130      	bne.n	8000afc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000aca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000adc:	2305      	movs	r3, #5
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <HAL_SPI_MspInit+0x94>)
 8000ae8:	f000 fa78 	bl	8000fdc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2024      	movs	r0, #36	@ 0x24
 8000af2:	f000 f9fc 	bl	8000eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000af6:	2024      	movs	r0, #36	@ 0x24
 8000af8:	f000 fa15 	bl	8000f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	@ 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40003800 	.word	0x40003800
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000400 	.word	0x48000400

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f8a3 	bl	8000cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RadioDIO_Pin);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f000 fc0e 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <SPI2_IRQHandler+0x10>)
 8000b82:	f001 ffbb 	bl	8002afc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000028 	.word	0x20000028

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb8:	f7ff ffea 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f002 fa63 	bl	80030ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fe09 	bl	80007fc <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	08003154 	.word	0x08003154
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	200000bc 	.word	0x200000bc

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>

08000c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f961 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f80e 	bl	8000c38 <HAL_InitTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c28:	f7ff ff02 	bl	8000a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <HAL_InitTick+0x6c>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d023      	beq.n	8000c94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <HAL_InitTick+0x70>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f96d 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10f      	bne.n	8000c8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d809      	bhi.n	8000c88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f937 	bl	8000eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_InitTick+0x74>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e004      	b.n	8000c98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e001      	b.n	8000c98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000004 	.word	0x20000004

08000cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_IncTick+0x20>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_IncTick+0x24>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	200000b8 	.word	0x200000b8

08000cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return uwTick;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <HAL_GetTick+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200000b8 	.word	0x200000b8

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff ffee 	bl	8000cd8 <HAL_GetTick>
 8000cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d16:	bf00      	nop
 8000d18:	f7ff ffde 	bl	8000cd8 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea4:	d301      	bcc.n	8000eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00f      	b.n	8000eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <SysTick_Config+0x40>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f7ff ff8e 	bl	8000dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <SysTick_Config+0x40>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff29 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
 8000efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff3e 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff8e 	bl	8000e2c <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5d 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff31 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa2 	bl	8000e94 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d005      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2204      	movs	r2, #4
 8000f76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e029      	b.n	8000fd2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020e 	bic.w	r2, r2, #14
 8000f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0201 	bic.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	f003 021c 	and.w	r2, r3, #28
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	4798      	blx	r3
    }
  }
  return status;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e17f      	b.n	80012ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8171 	beq.w	80012e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d118      	bne.n	80010bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	6939      	ldr	r1, [r7, #16]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80ac 	beq.w	80012e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b5f      	ldr	r3, [pc, #380]	@ (800130c <HAL_GPIO_Init+0x330>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001192:	4a5e      	ldr	r2, [pc, #376]	@ (800130c <HAL_GPIO_Init+0x330>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6613      	str	r3, [r2, #96]	@ 0x60
 800119a:	4b5c      	ldr	r3, [pc, #368]	@ (800130c <HAL_GPIO_Init+0x330>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001310 <HAL_GPIO_Init+0x334>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x242>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001314 <HAL_GPIO_Init+0x338>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x23e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001318 <HAL_GPIO_Init+0x33c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x23a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4d      	ldr	r2, [pc, #308]	@ (800131c <HAL_GPIO_Init+0x340>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x236>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001320 <HAL_GPIO_Init+0x344>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x232>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001324 <HAL_GPIO_Init+0x348>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x22e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001328 <HAL_GPIO_Init+0x34c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x22a>
 8001202:	2306      	movs	r3, #6
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x244>
 8001206:	2307      	movs	r3, #7
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x244>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x244>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x244>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001230:	4937      	ldr	r1, [pc, #220]	@ (8001310 <HAL_GPIO_Init+0x334>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_GPIO_Init+0x350>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001262:	4a32      	ldr	r2, [pc, #200]	@ (800132c <HAL_GPIO_Init+0x350>)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001268:	4b30      	ldr	r3, [pc, #192]	@ (800132c <HAL_GPIO_Init+0x350>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800128c:	4a27      	ldr	r2, [pc, #156]	@ (800132c <HAL_GPIO_Init+0x350>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001292:	4b26      	ldr	r3, [pc, #152]	@ (800132c <HAL_GPIO_Init+0x350>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b6:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <HAL_GPIO_Init+0x350>)
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_GPIO_Init+0x350>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012e0:	4a12      	ldr	r2, [pc, #72]	@ (800132c <HAL_GPIO_Init+0x350>)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f47f ae78 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800
 800131c:	48000c00 	.word	0x48000c00
 8001320:	48001000 	.word	0x48001000
 8001324:	48001400 	.word	0x48001400
 8001328:	48001800 	.word	0x48001800
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800134c:	e002      	b.n	8001354 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43d9      	mvns	r1, r3
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	400b      	ands	r3, r1
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fa0e 	bl	80007d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40010400 	.word	0x40010400

080013c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <HAL_PWREx_GetVoltageRange+0x18>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40007000 	.word	0x40007000

080013e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013ee:	d130      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013fc:	d038      	beq.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001406:	4a1e      	ldr	r2, [pc, #120]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2232      	movs	r2, #50	@ 0x32
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	4a1b      	ldr	r2, [pc, #108]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001424:	e002      	b.n	800142c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3b01      	subs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001438:	d102      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x60>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f2      	bne.n	8001426 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800144c:	d110      	bne.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e00f      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800145a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800145e:	d007      	beq.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001468:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83

0800148c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e3ca      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a8:	4b94      	ldr	r3, [pc, #592]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80e4 	beq.w	8001688 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	f040 808b 	bne.w	80015e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 8087 	bne.w	80015e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d6:	4b89      	ldr	r3, [pc, #548]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x62>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e3a2      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	4b82      	ldr	r3, [pc, #520]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <HAL_RCC_OscConfig+0x7c>
 80014fe:	4b7f      	ldr	r3, [pc, #508]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001506:	e005      	b.n	8001514 <HAL_RCC_OscConfig+0x88>
 8001508:	4b7c      	ldr	r3, [pc, #496]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800150a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001514:	4293      	cmp	r3, r2
 8001516:	d223      	bcs.n	8001560 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fd1d 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e383      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800152c:	4b73      	ldr	r3, [pc, #460]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a72      	ldr	r2, [pc, #456]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b70      	ldr	r3, [pc, #448]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	496d      	ldr	r1, [pc, #436]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800154a:	4b6c      	ldr	r3, [pc, #432]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	4968      	ldr	r1, [pc, #416]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e025      	b.n	80015ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4b66      	ldr	r3, [pc, #408]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a65      	ldr	r2, [pc, #404]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	4960      	ldr	r1, [pc, #384]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157e:	4b5f      	ldr	r3, [pc, #380]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	495b      	ldr	r1, [pc, #364]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fcdd 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e343      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ac:	f000 fc4a 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 80015b0:	4602      	mov	r2, r0
 80015b2:	4b52      	ldr	r3, [pc, #328]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	4950      	ldr	r1, [pc, #320]	@ (8001700 <HAL_RCC_OscConfig+0x274>)
 80015be:	5ccb      	ldrb	r3, [r1, r3]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001704 <HAL_RCC_OscConfig+0x278>)
 80015ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb31 	bl	8000c38 <HAL_InitTick>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d052      	beq.n	8001686 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	e327      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d032      	beq.n	8001652 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015ec:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a42      	ldr	r2, [pc, #264]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb6e 	bl	8000cd8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001600:	f7ff fb6a 	bl	8000cd8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e310      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001612:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161e:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a36      	ldr	r2, [pc, #216]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4931      	ldr	r1, [pc, #196]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163c:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	492c      	ldr	r1, [pc, #176]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e01a      	b.n	8001688 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001652:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb3b 	bl	8000cd8 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001666:	f7ff fb37 	bl	8000cd8 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e2dd      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x1da>
 8001684:	e000      	b.n	8001688 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001686:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d074      	beq.n	800177e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b08      	cmp	r3, #8
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x21a>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d10e      	bne.n	80016be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d10b      	bne.n	80016be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d064      	beq.n	800177c <HAL_RCC_OscConfig+0x2f0>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d160      	bne.n	800177c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e2ba      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x24a>
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e026      	b.n	8001724 <HAL_RCC_OscConfig+0x298>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016de:	d115      	bne.n	800170c <HAL_RCC_OscConfig+0x280>
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b03      	ldr	r3, [pc, #12]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a02      	ldr	r2, [pc, #8]	@ (80016fc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x298>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	0800310c 	.word	0x0800310c
 8001704:	20000000 	.word	0x20000000
 8001708:	20000004 	.word	0x20000004
 800170c:	4ba0      	ldr	r3, [pc, #640]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a9f      	ldr	r2, [pc, #636]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b9d      	ldr	r3, [pc, #628]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a9c      	ldr	r2, [pc, #624]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fad4 	bl	8000cd8 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fad0 	bl	8000cd8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	@ 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e276      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001746:	4b92      	ldr	r3, [pc, #584]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x2a8>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fac0 	bl	8000cd8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fabc 	bl	8000cd8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	@ 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e262      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176e:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x2d0>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d060      	beq.n	800184c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x310>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d119      	bne.n	80017ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d116      	bne.n	80017ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800179c:	4b7c      	ldr	r3, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x328>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e23f      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b76      	ldr	r3, [pc, #472]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	4973      	ldr	r1, [pc, #460]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c8:	e040      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d023      	beq.n	800181a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fa7b 	bl	8000cd8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fa77 	bl	8000cd8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e21d      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f8:	4b65      	ldr	r3, [pc, #404]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b62      	ldr	r3, [pc, #392]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	061b      	lsls	r3, r3, #24
 8001812:	495f      	ldr	r1, [pc, #380]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e018      	b.n	800184c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b5d      	ldr	r3, [pc, #372]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a5c      	ldr	r2, [pc, #368]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fa57 	bl	8000cd8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fa53 	bl	8000cd8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1f9      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d03c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01c      	beq.n	800189a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001860:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001866:	4a4a      	ldr	r2, [pc, #296]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fa32 	bl	8000cd8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff fa2e 	bl	8000cd8 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1d4      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800188c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0ef      	beq.n	8001878 <HAL_RCC_OscConfig+0x3ec>
 8001898:	e01b      	b.n	80018d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa15 	bl	8000cd8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fa11 	bl	8000cd8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1b7      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c4:	4b32      	ldr	r3, [pc, #200]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80a6 	beq.w	8001a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f0:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	4a26      	ldr	r2, [pc, #152]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fc:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001908:	2301      	movs	r3, #1
 800190a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_RCC_OscConfig+0x508>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d118      	bne.n	800194a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001918:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <HAL_RCC_OscConfig+0x508>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	@ (8001994 <HAL_RCC_OscConfig+0x508>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001924:	f7ff f9d8 	bl	8000cd8 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff f9d4 	bl	8000cd8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e17a      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_RCC_OscConfig+0x508>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <HAL_RCC_OscConfig+0x4d8>
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001962:	e029      	b.n	80019b8 <HAL_RCC_OscConfig+0x52c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d115      	bne.n	8001998 <HAL_RCC_OscConfig+0x50c>
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001972:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001982:	4a03      	ldr	r2, [pc, #12]	@ (8001990 <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800198c:	e014      	b.n	80019b8 <HAL_RCC_OscConfig+0x52c>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	4b9c      	ldr	r3, [pc, #624]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199e:	4a9b      	ldr	r2, [pc, #620]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a8:	4b98      	ldr	r3, [pc, #608]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ae:	4a97      	ldr	r2, [pc, #604]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d016      	beq.n	80019ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff f98a 	bl	8000cd8 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff f986 	bl	8000cd8 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e12a      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019de:	4b8b      	ldr	r3, [pc, #556]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 80019e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ed      	beq.n	80019c8 <HAL_RCC_OscConfig+0x53c>
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff f973 	bl	8000cd8 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff f96f 	bl	8000cd8 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e113      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ed      	bne.n	80019f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b7a      	ldr	r3, [pc, #488]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	4a79      	ldr	r2, [pc, #484]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80fe 	beq.w	8001c32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	f040 80d0 	bne.w	8001be0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a40:	4b72      	ldr	r3, [pc, #456]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d130      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d127      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d11f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a80:	2a07      	cmp	r2, #7
 8001a82:	bf14      	ite	ne
 8001a84:	2201      	movne	r2, #1
 8001a86:	2200      	moveq	r2, #0
 8001a88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d113      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d06e      	beq.n	8001b94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d069      	beq.n	8001b90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001abc:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ac8:	4b50      	ldr	r3, [pc, #320]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0ad      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae4:	f7ff f8f8 	bl	8000cd8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f8f4 	bl	8000cd8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e09a      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afe:	4b43      	ldr	r3, [pc, #268]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0a:	4b40      	ldr	r3, [pc, #256]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b40      	ldr	r3, [pc, #256]	@ (8001c10 <HAL_RCC_OscConfig+0x784>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b1a:	3a01      	subs	r2, #1
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b24:	0212      	lsls	r2, r2, #8
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b2c:	0852      	lsrs	r2, r2, #1
 8001b2e:	3a01      	subs	r2, #1
 8001b30:	0552      	lsls	r2, r2, #21
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b38:	0852      	lsrs	r2, r2, #1
 8001b3a:	3a01      	subs	r2, #1
 8001b3c:	0652      	lsls	r2, r2, #25
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b44:	0912      	lsrs	r2, r2, #4
 8001b46:	0452      	lsls	r2, r2, #17
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4930      	ldr	r1, [pc, #192]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b50:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2d      	ldr	r2, [pc, #180]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a2a      	ldr	r2, [pc, #168]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b68:	f7ff f8b6 	bl	8000cd8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f8b2 	bl	8000cd8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e058      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8e:	e050      	b.n	8001c32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e04f      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d148      	bne.n	8001c32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bb8:	f7ff f88e 	bl	8000cd8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff f88a 	bl	8000cd8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e030      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x734>
 8001bde:	e028      	b.n	8001c32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d023      	beq.n	8001c2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_RCC_OscConfig+0x780>)
 8001bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f871 	bl	8000cd8 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	e00c      	b.n	8001c14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff f86d 	bl	8000cd8 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d905      	bls.n	8001c14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e013      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ec      	bne.n	8001bfa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4905      	ldr	r1, [pc, #20]	@ (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_OscConfig+0x7b4>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
 8001c2c:	e001      	b.n	8001c32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	feeefffc 	.word	0xfeeefffc

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0e7      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b75      	ldr	r3, [pc, #468]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d910      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b72      	ldr	r3, [pc, #456]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 0207 	bic.w	r2, r3, #7
 8001c6e:	4970      	ldr	r1, [pc, #448]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0cf      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d908      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b63      	ldr	r3, [pc, #396]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4960      	ldr	r1, [pc, #384]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d04c      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	4b5a      	ldr	r3, [pc, #360]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0a6      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	4b54      	ldr	r3, [pc, #336]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e09a      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e08e      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e086      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4943      	ldr	r1, [pc, #268]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2c:	f7fe ffd4 	bl	8000cd8 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe ffd0 	bl	8000cd8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e06e      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d208      	bcs.n	8001d8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	492b      	ldr	r1, [pc, #172]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d210      	bcs.n	8001dba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 0207 	bic.w	r2, r3, #7
 8001da0:	4923      	ldr	r1, [pc, #140]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da8:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e036      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4918      	ldr	r1, [pc, #96]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4910      	ldr	r1, [pc, #64]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df8:	f000 f824 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	490b      	ldr	r1, [pc, #44]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f4>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_RCC_ClockConfig+0x1fc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ff0b 	bl	8000c38 <HAL_InitTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e26:	7afb      	ldrb	r3, [r7, #11]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	0800310c 	.word	0x0800310c
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e52:	4b3e      	ldr	r3, [pc, #248]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x34>
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d121      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d11e      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e84:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e005      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	e004      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d134      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0xa6>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d003      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ee8:	e005      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eec:	617b      	str	r3, [r7, #20]
      break;
 8001eee:	e005      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ef2:	617b      	str	r3, [r7, #20]
      break;
 8001ef4:	e002      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	617b      	str	r3, [r7, #20]
      break;
 8001efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	3301      	adds	r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	fb03 f202 	mul.w	r2, r3, r2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0e5b      	lsrs	r3, r3, #25
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	0800311c 	.word	0x0800311c
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200

08001f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f74:	f7ff fa26 	bl	80013c4 <HAL_PWREx_GetVoltageRange>
 8001f78:	6178      	str	r0, [r7, #20]
 8001f7a:	e014      	b.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	4a24      	ldr	r2, [pc, #144]	@ (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f94:	f7ff fa16 	bl	80013c4 <HAL_PWREx_GetVoltageRange>
 8001f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fac:	d10b      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d919      	bls.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fb8:	d902      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e013      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e010      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	@ 0x80
 8001fca:	d902      	bls.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fcc:	2303      	movs	r3, #3
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e00a      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	@ 0x80
 8001fd6:	d102      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e004      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b70      	cmp	r3, #112	@ 0x70
 8001fe2:	d101      	bne.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	4909      	ldr	r1, [pc, #36]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e095      	b.n	800215a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800203e:	d009      	beq.n	8002054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
 8002046:	e005      	b.n	8002054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fd02 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800208a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002094:	d902      	bls.n	800209c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e002      	b.n	80020a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800209c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80020aa:	d007      	beq.n	80020bc <HAL_SPI_Init+0xa0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80020b4:	d002      	beq.n	80020bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fe:	ea42 0103 	orr.w	r1, r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	0c1b      	lsrs	r3, r3, #16
 8002118:	f003 0204 	and.w	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002138:	ea42 0103 	orr.w	r1, r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b088      	sub	sp, #32
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002172:	f7fe fdb1 	bl	8000cd8 <HAL_GetTick>
 8002176:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d001      	beq.n	800218c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	e15c      	b.n	8002446 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_SPI_Transmit+0x36>
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e154      	b.n	8002446 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_SPI_Transmit+0x48>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e14d      	b.n	8002446 <HAL_SPI_Transmit+0x2e4>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2203      	movs	r2, #3
 80021b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021fc:	d10f      	bne.n	800221e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800220c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800221c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002228:	2b40      	cmp	r3, #64	@ 0x40
 800222a:	d007      	beq.n	800223c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800223a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002244:	d952      	bls.n	80022ec <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0xf2>
 800224e:	8b7b      	ldrh	r3, [r7, #26]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d145      	bne.n	80022e0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	1c9a      	adds	r2, r3, #2
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002278:	e032      	b.n	80022e0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d112      	bne.n	80022ae <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002298:	1c9a      	adds	r2, r3, #2
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022ac:	e018      	b.n	80022e0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022ae:	f7fe fd13 	bl	8000cd8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d803      	bhi.n	80022c6 <HAL_SPI_Transmit+0x164>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d102      	bne.n	80022cc <HAL_SPI_Transmit+0x16a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0b2      	b.n	8002446 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1c7      	bne.n	800227a <HAL_SPI_Transmit+0x118>
 80022ea:	e083      	b.n	80023f4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_SPI_Transmit+0x198>
 80022f4:	8b7b      	ldrh	r3, [r7, #26]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d177      	bne.n	80023ea <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d912      	bls.n	800232a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002314:	1c9a      	adds	r2, r3, #2
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b02      	subs	r3, #2
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002328:	e05f      	b.n	80023ea <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002350:	e04b      	b.n	80023ea <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d12b      	bne.n	80023b8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d912      	bls.n	8002390 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	1c9a      	adds	r2, r3, #2
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b02      	subs	r3, #2
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800238e:	e02c      	b.n	80023ea <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023b6:	e018      	b.n	80023ea <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b8:	f7fe fc8e 	bl	8000cd8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d803      	bhi.n	80023d0 <HAL_SPI_Transmit+0x26e>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d102      	bne.n	80023d6 <HAL_SPI_Transmit+0x274>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e02d      	b.n	8002446 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ae      	bne.n	8002352 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fe09 	bl	8003010 <SPI_EndRxTxTransaction>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002444:	2300      	movs	r3, #0
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af02      	add	r7, sp, #8
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d001      	beq.n	800246e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	e123      	b.n	80026b6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002476:	d112      	bne.n	800249e <HAL_SPI_Receive+0x50>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10e      	bne.n	800249e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2204      	movs	r2, #4
 8002484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f912 	bl	80026be <HAL_SPI_TransmitReceive>
 800249a:	4603      	mov	r3, r0
 800249c:	e10b      	b.n	80026b6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800249e:	f7fe fc1b 	bl	8000cd8 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_SPI_Receive+0x62>
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e100      	b.n	80026b6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_SPI_Receive+0x74>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0f9      	b.n	80026b6 <HAL_SPI_Receive+0x268>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2204      	movs	r2, #4
 80024ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002514:	d908      	bls.n	8002528 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	e007      	b.n	8002538 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002540:	d10f      	bne.n	8002562 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256c:	2b40      	cmp	r3, #64	@ 0x40
 800256e:	d007      	beq.n	8002580 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002588:	d875      	bhi.n	8002676 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800258a:	e037      	b.n	80025fc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d117      	bne.n	80025ca <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f103 020c 	add.w	r2, r3, #12
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80025c8:	e018      	b.n	80025fc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ca:	f7fe fb85 	bl	8000cd8 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d803      	bhi.n	80025e2 <HAL_SPI_Receive+0x194>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d102      	bne.n	80025e8 <HAL_SPI_Receive+0x19a>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e05c      	b.n	80026b6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1c1      	bne.n	800258c <HAL_SPI_Receive+0x13e>
 8002608:	e03b      	b.n	8002682 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d115      	bne.n	8002644 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	b292      	uxth	r2, r2
 8002624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002642:	e018      	b.n	8002676 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002644:	f7fe fb48 	bl	8000cd8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d803      	bhi.n	800265c <HAL_SPI_Receive+0x20e>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d102      	bne.n	8002662 <HAL_SPI_Receive+0x214>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e01f      	b.n	80026b6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1c3      	bne.n	800260a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fc6a 	bl	8002f60 <SPI_EndRxTransaction>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
  }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b08a      	sub	sp, #40	@ 0x28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026cc:	2301      	movs	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d0:	f7fe fb02 	bl	8000cd8 <HAL_GetTick>
 80026d4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026dc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026ec:	7ffb      	ldrb	r3, [r7, #31]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00c      	beq.n	800270c <HAL_SPI_TransmitReceive+0x4e>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026f8:	d106      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x4a>
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d001      	beq.n	800270c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
 800270a:	e1f3      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_SPI_TransmitReceive+0x60>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_SPI_TransmitReceive+0x60>
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e1e8      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_SPI_TransmitReceive+0x72>
 800272c:	2302      	movs	r3, #2
 800272e:	e1e1      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b04      	cmp	r3, #4
 8002742:	d003      	beq.n	800274c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2205      	movs	r2, #5
 8002748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	887a      	ldrh	r2, [r7, #2]
 8002772:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800278e:	d802      	bhi.n	8002796 <HAL_SPI_TransmitReceive+0xd8>
 8002790:	8abb      	ldrh	r3, [r7, #20]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d908      	bls.n	80027a8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	e007      	b.n	80027b8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c2:	2b40      	cmp	r3, #64	@ 0x40
 80027c4:	d007      	beq.n	80027d6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80027de:	f240 8083 	bls.w	80028e8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_TransmitReceive+0x132>
 80027ea:	8afb      	ldrh	r3, [r7, #22]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d16f      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002814:	e05c      	b.n	80028d0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d11b      	bne.n	800285c <HAL_SPI_TransmitReceive+0x19e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_SPI_TransmitReceive+0x19e>
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	d113      	bne.n	800285c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002844:	1c9a      	adds	r2, r3, #2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d11c      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x1e6>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	b292      	uxth	r2, r2
 8002882:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	1c9a      	adds	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028a4:	f7fe fa18 	bl	8000cd8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d80d      	bhi.n	80028d0 <HAL_SPI_TransmitReceive+0x212>
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d009      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e111      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d19d      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x158>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d197      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x158>
 80028e6:	e0e5      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x23a>
 80028f0:	8afb      	ldrh	r3, [r7, #22]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	f040 80d1 	bne.w	8002a9a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d912      	bls.n	8002928 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	881a      	ldrh	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	1c9a      	adds	r2, r3, #2
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b02      	subs	r3, #2
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002926:	e0b8      	b.n	8002a9a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294e:	e0a4      	b.n	8002a9a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d134      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x30a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02f      	beq.n	80029c8 <HAL_SPI_TransmitReceive+0x30a>
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	2b01      	cmp	r3, #1
 800296c:	d12c      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	d912      	bls.n	800299e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	881a      	ldrh	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002988:	1c9a      	adds	r2, r3, #2
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b02      	subs	r3, #2
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800299c:	e012      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d148      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x3aa>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d042      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d923      	bls.n	8002a36 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	b292      	uxth	r2, r2
 80029fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	1c9a      	adds	r2, r3, #2
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b02      	subs	r3, #2
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d81f      	bhi.n	8002a64 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	e016      	b.n	8002a64 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f103 020c 	add.w	r2, r3, #12
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a64:	2301      	movs	r3, #1
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a68:	f7fe f936 	bl	8000cd8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d803      	bhi.n	8002a80 <HAL_SPI_TransmitReceive+0x3c2>
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d102      	bne.n	8002a86 <HAL_SPI_TransmitReceive+0x3c8>
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e02c      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f af55 	bne.w	8002950 <HAL_SPI_TransmitReceive+0x292>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f47f af4e 	bne.w	8002950 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 faa9 	bl	8003010 <SPI_EndRxTxTransaction>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e00e      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002af2:	2300      	movs	r3, #0
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	@ 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10e      	bne.n	8002b3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
    return;
 8002b3a:	e0ce      	b.n	8002cda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_SPI_IRQHandler+0x5e>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
    return;
 8002b58:	e0bf      	b.n	8002cda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_SPI_IRQHandler+0x7e>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80b0 	beq.w	8002cda <HAL_SPI_IRQHandler+0x1de>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80aa 	beq.w	8002cda <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d011      	beq.n	8002bc0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
        return;
 8002bd6:	e080      	b.n	8002cda <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d014      	beq.n	8002c0c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00c      	beq.n	8002c30 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c1a:	f043 0208 	orr.w	r2, r3, #8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d04f      	beq.n	8002cd8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <HAL_SPI_IRQHandler+0x168>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d034      	beq.n	8002cce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0203 	bic.w	r2, r2, #3
 8002c72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d011      	beq.n	8002ca0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	4a17      	ldr	r2, [pc, #92]	@ (8002ce0 <HAL_SPI_IRQHandler+0x1e4>)
 8002c82:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f966 	bl	8000f5a <HAL_DMA_Abort_IT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce0 <HAL_SPI_IRQHandler+0x1e4>)
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f950 	bl	8000f5a <HAL_DMA_Abort_IT>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002ccc:	e003      	b.n	8002cd6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f808 	bl	8002ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cd4:	e000      	b.n	8002cd8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002cd6:	bf00      	nop
    return;
 8002cd8:	bf00      	nop
  }
}
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	08002cf9 	.word	0x08002cf9

08002ce4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff ffe5 	bl	8002ce4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d34:	f7fd ffd0 	bl	8000cd8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4413      	add	r3, r2
 8002d42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d44:	f7fd ffc8 	bl	8000cd8 <HAL_GetTick>
 8002d48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	015b      	lsls	r3, r3, #5
 8002d50:	0d1b      	lsrs	r3, r3, #20
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d5a:	e054      	b.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d050      	beq.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d64:	f7fd ffb8 	bl	8000cd8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d902      	bls.n	8002d7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d13d      	bne.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d92:	d111      	bne.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d9c:	d004      	beq.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da6:	d107      	bne.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dc0:	d10f      	bne.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e017      	b.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d19b      	bne.n	8002d5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000000 	.word	0x20000000

08002e34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	@ 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e46:	f7fd ff47 	bl	8000cd8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002e56:	f7fd ff3f 	bl	8000cd8 <HAL_GetTick>
 8002e5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e64:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00da      	lsls	r2, r3, #3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	0d1b      	lsrs	r3, r3, #20
 8002e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e7c:	e060      	b.n	8002f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e84:	d107      	bne.n	8002e96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d050      	beq.n	8002f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e9e:	f7fd ff1b 	bl	8000cd8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d902      	bls.n	8002eb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d13d      	bne.n	8002f30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ec2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ecc:	d111      	bne.n	8002ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed6:	d004      	beq.n	8002ee2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee0:	d107      	bne.n	8002ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002efa:	d10f      	bne.n	8002f1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e010      	b.n	8002f52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d196      	bne.n	8002e7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3728      	adds	r7, #40	@ 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f74:	d111      	bne.n	8002f9a <SPI_EndRxTransaction+0x3a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f7e:	d004      	beq.n	8002f8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f88:	d107      	bne.n	8002f9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2180      	movs	r1, #128	@ 0x80
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff febd 	bl	8002d24 <SPI_WaitFlagStateUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e023      	b.n	8003008 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fc8:	d11d      	bne.n	8003006 <SPI_EndRxTransaction+0xa6>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd2:	d004      	beq.n	8002fde <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fdc:	d113      	bne.n	8003006 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff ff22 	bl	8002e34 <SPI_WaitFifoStateUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e000      	b.n	8003008 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2200      	movs	r2, #0
 8003024:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff ff03 	bl	8002e34 <SPI_WaitFifoStateUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e027      	b.n	8003094 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	2180      	movs	r1, #128	@ 0x80
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff fe68 	bl	8002d24 <SPI_WaitFlagStateUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e014      	b.n	8003094 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2200      	movs	r2, #0
 8003072:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fedc 	bl	8002e34 <SPI_WaitFifoStateUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e000      	b.n	8003094 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <memset>:
 800309c:	4402      	add	r2, r0
 800309e:	4603      	mov	r3, r0
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d100      	bne.n	80030a6 <memset+0xa>
 80030a4:	4770      	bx	lr
 80030a6:	f803 1b01 	strb.w	r1, [r3], #1
 80030aa:	e7f9      	b.n	80030a0 <memset+0x4>

080030ac <__libc_init_array>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4d0d      	ldr	r5, [pc, #52]	@ (80030e4 <__libc_init_array+0x38>)
 80030b0:	4c0d      	ldr	r4, [pc, #52]	@ (80030e8 <__libc_init_array+0x3c>)
 80030b2:	1b64      	subs	r4, r4, r5
 80030b4:	10a4      	asrs	r4, r4, #2
 80030b6:	2600      	movs	r6, #0
 80030b8:	42a6      	cmp	r6, r4
 80030ba:	d109      	bne.n	80030d0 <__libc_init_array+0x24>
 80030bc:	4d0b      	ldr	r5, [pc, #44]	@ (80030ec <__libc_init_array+0x40>)
 80030be:	4c0c      	ldr	r4, [pc, #48]	@ (80030f0 <__libc_init_array+0x44>)
 80030c0:	f000 f818 	bl	80030f4 <_init>
 80030c4:	1b64      	subs	r4, r4, r5
 80030c6:	10a4      	asrs	r4, r4, #2
 80030c8:	2600      	movs	r6, #0
 80030ca:	42a6      	cmp	r6, r4
 80030cc:	d105      	bne.n	80030da <__libc_init_array+0x2e>
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d4:	4798      	blx	r3
 80030d6:	3601      	adds	r6, #1
 80030d8:	e7ee      	b.n	80030b8 <__libc_init_array+0xc>
 80030da:	f855 3b04 	ldr.w	r3, [r5], #4
 80030de:	4798      	blx	r3
 80030e0:	3601      	adds	r6, #1
 80030e2:	e7f2      	b.n	80030ca <__libc_init_array+0x1e>
 80030e4:	0800314c 	.word	0x0800314c
 80030e8:	0800314c 	.word	0x0800314c
 80030ec:	0800314c 	.word	0x0800314c
 80030f0:	08003150 	.word	0x08003150

080030f4 <_init>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr

08003100 <_fini>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr
