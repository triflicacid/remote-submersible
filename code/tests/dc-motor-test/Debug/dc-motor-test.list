
dc-motor-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005678  08005678  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005678  08005678  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00006678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800567c  0800567c  0000667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005680  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000010  0800568c  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800568c  0000726c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011310  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb0  00000000  00000000  0001834c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ced  00000000  00000000  0001bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274c3  00000000  00000000  0001ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130aa  00000000  00000000  000441a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efcfb  00000000  00000000  0005724a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  00146f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0014b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005620 	.word	0x08005620

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005620 	.word	0x08005620

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <recv_propeller>:
#include "actions.h"
#include "constants.h"
#include "globals.h"
#include "../Lib/stored-code.h"

void recv_propeller(propeller_data *data) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  // update the velocity of both propeller motors
  dc_motor_set_velocity(&g_primary_motor, data->y);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	ed93 7b02 	vldr	d7, [r3, #8]
 8000ac2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ac6:	eef0 0a67 	vmov.f32	s1, s15
 8000aca:	4808      	ldr	r0, [pc, #32]	@ (8000aec <recv_propeller+0x38>)
 8000acc:	f000 fab2 	bl	8001034 <dc_motor_set_velocity>
  dc_motor_set_velocity(&g_secondary_motor, data->x);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	ed93 7b00 	vldr	d7, [r3]
 8000ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8000ada:	eef0 0a67 	vmov.f32	s1, s15
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <recv_propeller+0x3c>)
 8000ae0:	f000 faa8 	bl	8001034 <dc_motor_set_velocity>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000038 	.word	0x20000038
 8000af0:	20000050 	.word	0x20000050

08000af4 <recv_ballast>:

void recv_ballast(ballast_data *data) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  // update stepper motor event
  stepper_event_update(&g_ballast, data->mode);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f993 3000 	ldrsb.w	r3, [r3]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <recv_ballast+0x38>)
 8000b06:	f000 fbef 	bl	80012e8 <stepper_event_update>

  // if action is to be taken, start clock
  if (!stepper_event_done(&g_ballast)) {
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <recv_ballast+0x38>)
 8000b0c:	f000 fbd9 	bl	80012c2 <stepper_event_done>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f083 0301 	eor.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <recv_ballast+0x2e>
    HAL_TIM_Base_Start_IT(&TIMER_STEPPER_HANDLE);
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <recv_ballast+0x3c>)
 8000b1e:	f003 fb4f 	bl	80041c0 <HAL_TIM_Base_Start_IT>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000068 	.word	0x20000068
 8000b30:	2000021c 	.word	0x2000021c

08000b34 <recv_send_code>:

void recv_send_code(code_data *data) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  // cache code, we need to send it later
  save_code(data->code);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fc2b 	bl	800139c <save_code>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <recv_request_code>:

void recv_request_code(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  // respond with our cached code
  code_data data = { fetch_code() };
 8000b56:	f000 fc15 	bl	8001384 <fetch_code>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	607b      	str	r3, [r7, #4]
  transmit(&g_lora, OP_SEND_CODE, &data, sizeof(data));
 8000b5e:	1d3a      	adds	r2, r7, #4
 8000b60:	2304      	movs	r3, #4
 8000b62:	2110      	movs	r1, #16
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <recv_request_code+0x24>)
 8000b66:	f000 f8fd 	bl	8000d64 <transmit>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000002c 	.word	0x2000002c

08000b78 <recv_release_pod>:

void recv_release_pod(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  // de-activate electromagnet
  write_pin(ELECTROMAGNET_PORT, ELECTROMAGNET_PIN, true);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <recv_release_pod+0x18>)
 8000b82:	f000 fc1b 	bl	80013bc <write_pin>

  // start electromagnet timer
  HAL_TIM_Base_Start_IT(&TIMER_ELECTROMAGNET_HANDLE);
 8000b86:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <recv_release_pod+0x1c>)
 8000b88:	f003 fb1a 	bl	80041c0 <HAL_TIM_Base_Start_IT>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	48000400 	.word	0x48000400
 8000b94:	200001d0 	.word	0x200001d0

08000b98 <HAL_TIM_PeriodElapsedCallback>:
dc_motor_t g_secondary_motor;
stepper_motor_t ballast_motor;
volatile stepper_event_t g_ballast;

// INTERRUPT: override timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *h) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if (h == &TIMER_ELECTROMAGNET_HANDLE) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d108      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x22>
    // times up! reactivate magnet and cancel timer
    write_pin(ELECTROMAGNET_PORT, ELECTROMAGNET_PIN, false);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2108      	movs	r1, #8
 8000bac:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bae:	f000 fc05 	bl	80013bc <write_pin>
    HAL_TIM_Base_Stop_IT(&TIMER_ELECTROMAGNET_HANDLE);
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bb4:	f003 fb74 	bl	80042a0 <HAL_TIM_Base_Stop_IT>
    return;
 8000bb8:	e007      	b.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x32>
  }

  if (h == &TIMER_STEPPER_HANDLE) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d103      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x32>
    // step ballast motor, stopping the timer if done
    //if (stepper_event_step(&ballast_motor, &g_ballast)) {
      HAL_TIM_Base_Stop_IT(h);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f003 fb6c 	bl	80042a0 <HAL_TIM_Base_Stop_IT>
    //}

    return;
 8000bc8:	bf00      	nop
  }
}
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001d0 	.word	0x200001d0
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	2000021c 	.word	0x2000021c
 8000bdc:	00000000 	.word	0x00000000

08000be0 <setup>:
  if (h == &SPI_HANDLE) { // LoRa device received data
    create_action(action_rx_opcode);
  }
}

void setup(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af02      	add	r7, sp, #8
  // initialise LoRa device with max TX power
  //lora_setup(&g_lora, &SPI_HANDLE, LORA_NSS_PORT, LORA_NSS_PIN, LORA_RESET_PORT, LORA_RESET_PIN);
  //lora_maximise_tx_power(&g_lora);

  // register payload receive handlers
  register_propeller_callback(recv_propeller);
 8000be6:	481e      	ldr	r0, [pc, #120]	@ (8000c60 <setup+0x80>)
 8000be8:	f000 f86c 	bl	8000cc4 <register_propeller_callback>
  register_ballast_callback(recv_ballast);
 8000bec:	481d      	ldr	r0, [pc, #116]	@ (8000c64 <setup+0x84>)
 8000bee:	f000 f879 	bl	8000ce4 <register_ballast_callback>
  register_send_code_callback(recv_send_code);
 8000bf2:	481d      	ldr	r0, [pc, #116]	@ (8000c68 <setup+0x88>)
 8000bf4:	f000 f886 	bl	8000d04 <register_send_code_callback>
  register_request_code_callback(recv_request_code);
 8000bf8:	481c      	ldr	r0, [pc, #112]	@ (8000c6c <setup+0x8c>)
 8000bfa:	f000 f893 	bl	8000d24 <register_request_code_callback>
  register_release_pod_callback(recv_release_pod);
 8000bfe:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <setup+0x90>)
 8000c00:	f000 f8a0 	bl	8000d44 <register_release_pod_callback>

  // initialise DC motors and respective PWM channels
  dc_motor_init(&g_primary_motor, &TIMER_PWM_HANDLE, DC_MOTOR_EN1_2_PWM_CHANNEL, DC_MOTOR_PORT, DC_MOTOR_IN1, DC_MOTOR_IN2);
 8000c04:	2302      	movs	r3, #2
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c10:	2200      	movs	r2, #0
 8000c12:	4918      	ldr	r1, [pc, #96]	@ (8000c74 <setup+0x94>)
 8000c14:	4818      	ldr	r0, [pc, #96]	@ (8000c78 <setup+0x98>)
 8000c16:	f000 f8f1 	bl	8000dfc <dc_motor_init>
  HAL_TIM_PWM_Start(&TIMER_PWM_HANDLE, DC_MOTOR_EN1_2_PWM_CHANNEL);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4815      	ldr	r0, [pc, #84]	@ (8000c74 <setup+0x94>)
 8000c1e:	f003 fbcf 	bl	80043c0 <HAL_TIM_PWM_Start>
  dc_motor_init(&g_secondary_motor, &TIMER_PWM_HANDLE, DC_MOTOR_EN3_4_PWM_CHANNEL, DC_MOTOR_PORT, DC_MOTOR_IN3, DC_MOTOR_IN4);
 8000c22:	2308      	movs	r3, #8
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	2304      	movs	r3, #4
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c2e:	2208      	movs	r2, #8
 8000c30:	4910      	ldr	r1, [pc, #64]	@ (8000c74 <setup+0x94>)
 8000c32:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <setup+0x9c>)
 8000c34:	f000 f8e2 	bl	8000dfc <dc_motor_init>
  HAL_TIM_PWM_Start(&TIMER_PWM_HANDLE, DC_MOTOR_EN3_4_PWM_CHANNEL);
 8000c38:	2108      	movs	r1, #8
 8000c3a:	480e      	ldr	r0, [pc, #56]	@ (8000c74 <setup+0x94>)
 8000c3c:	f003 fbc0 	bl	80043c0 <HAL_TIM_PWM_Start>

  // finally, set LoRa to receive mode
  //lora_mode_rx(&g_lora, false);
  //lora_receive_async(&g_lora, g_lora_buffer, sizeof(opcode_t));

  dc_motor_backwards(&g_primary_motor);
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <setup+0x98>)
 8000c42:	f000 f924 	bl	8000e8e <dc_motor_backwards>
  dc_motor_set_speed(&g_primary_motor, 0.0);
 8000c46:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 8000c58 <setup+0x78>
 8000c4a:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <setup+0x98>)
 8000c4c:	f000 f946 	bl	8000edc <dc_motor_set_speed>
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
	...
 8000c60:	08000ab5 	.word	0x08000ab5
 8000c64:	08000af5 	.word	0x08000af5
 8000c68:	08000b35 	.word	0x08000b35
 8000c6c:	08000b51 	.word	0x08000b51
 8000c70:	08000b79 	.word	0x08000b79
 8000c74:	20000138 	.word	0x20000138
 8000c78:	20000038 	.word	0x20000038
 8000c7c:	20000050 	.word	0x20000050

08000c80 <loop>:

void loop(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  //execute_pending_actions();
	dc_motor_set_speed(&g_primary_motor, 0.0);
 8000c84:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8000cb0 <loop+0x30>
 8000c88:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <loop+0x40>)
 8000c8a:	f000 f927 	bl	8000edc <dc_motor_set_speed>
		HAL_Delay(10000);
 8000c8e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c92:	f001 f875 	bl	8001d80 <HAL_Delay>
	dc_motor_set_speed(&g_primary_motor, 0.4);
 8000c96:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8000cb8 <loop+0x38>
 8000c9a:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <loop+0x40>)
 8000c9c:	f000 f91e 	bl	8000edc <dc_motor_set_speed>
	HAL_Delay(4000);
 8000ca0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000ca4:	f001 f86c 	bl	8001d80 <HAL_Delay>

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	f3af 8000 	nop.w
	...
 8000cb8:	9999999a 	.word	0x9999999a
 8000cbc:	3fd99999 	.word	0x3fd99999
 8000cc0:	20000038 	.word	0x20000038

08000cc4 <register_propeller_callback>:
static ballast_callback_t ballast_cb = NULL;
static send_code_callback_t send_code_cb = NULL;
static request_code_callback_t request_code_cb = NULL;
static release_pod_callback_t release_pod_cb = NULL;

void register_propeller_callback(propeller_callback_t cb) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  propeller_cb = cb;
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <register_propeller_callback+0x1c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000007c 	.word	0x2000007c

08000ce4 <register_ballast_callback>:

void register_ballast_callback(ballast_callback_t cb) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  ballast_cb = cb;
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <register_ballast_callback+0x1c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000080 	.word	0x20000080

08000d04 <register_send_code_callback>:

void register_send_code_callback(send_code_callback_t cb) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  send_code_cb = cb;
 8000d0c:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <register_send_code_callback+0x1c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000084 	.word	0x20000084

08000d24 <register_request_code_callback>:

void register_request_code_callback(request_code_callback_t cb) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  request_code_cb = cb;
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <register_request_code_callback+0x1c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000088 	.word	0x20000088

08000d44 <register_release_pod_callback>:

void register_release_pod_callback(release_pod_callback_t cb) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  release_pod_cb = cb;
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <register_release_pod_callback+0x1c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000008c 	.word	0x2000008c

08000d64 <transmit>:

void transmit_opcode(lora_t *lora, opcode_t opcode) {
  lora_send(lora, &opcode, sizeof(opcode));
}

void transmit(lora_t *lora, opcode_t opcode, void *data, uint8_t data_size) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	72fb      	strb	r3, [r7, #11]
 8000d74:	4613      	mov	r3, r2
 8000d76:	72bb      	strb	r3, [r7, #10]
  // check if too large
  if (sizeof(opcode) + data_size > LORA_MAX_PAYLOAD_SIZE) {
 8000d78:	7abb      	ldrb	r3, [r7, #10]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2b40      	cmp	r3, #64	@ 0x40
 8000d7e:	d811      	bhi.n	8000da4 <transmit+0x40>
    return;
  }

  // load opcode into buffer
  g_lora_buffer[0] = opcode;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <transmit+0x48>)
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	7013      	strb	r3, [r2, #0]

  // copy data into buffer
  memcpy(g_lora_buffer + sizeof(opcode), data, data_size);
 8000d86:	480a      	ldr	r0, [pc, #40]	@ (8000db0 <transmit+0x4c>)
 8000d88:	7abb      	ldrb	r3, [r7, #10]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	f004 fc39 	bl	8005604 <memcpy>

  // transmit data
  lora_send(lora, g_lora_buffer, sizeof(opcode) + data_size);
 8000d92:	7abb      	ldrb	r3, [r7, #10]
 8000d94:	3301      	adds	r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4904      	ldr	r1, [pc, #16]	@ (8000dac <transmit+0x48>)
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f000 fa21 	bl	80011e4 <lora_send>
 8000da2:	e000      	b.n	8000da6 <transmit+0x42>
    return;
 8000da4:	bf00      	nop
}
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000090 	.word	0x20000090
 8000db0:	20000091 	.word	0x20000091

08000db4 <write_in1>:
#include "dc-motor.h"

#include <stdbool.h>

 void write_in1(dc_motor_t *motor, bool state) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
  write_pin(motor->port, motor->in1, state);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6898      	ldr	r0, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	899b      	ldrh	r3, [r3, #12]
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f000 faf6 	bl	80013bc <write_pin>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <write_in2>:

 void write_in2(dc_motor_t *motor, bool state) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
  write_pin(motor->port, motor->in2, state);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6898      	ldr	r0, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	89db      	ldrh	r3, [r3, #14]
 8000dec:	78fa      	ldrb	r2, [r7, #3]
 8000dee:	4619      	mov	r1, r3
 8000df0:	f000 fae4 	bl	80013bc <write_pin>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <dc_motor_init>:

 bool read_in2(dc_motor_t *motor) {
  return read_pin(motor->port, motor->in2);
}

void dc_motor_init(dc_motor_t *motor, TIM_HandleTypeDef* htim, uint32_t channel, port_t *port, pin_t in1, pin_t in2) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  motor->htim = htim;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	601a      	str	r2, [r3, #0]
  motor->channel = channel;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	605a      	str	r2, [r3, #4]
  motor->port = port;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	609a      	str	r2, [r3, #8]
  motor->in1 = in1;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	8b3a      	ldrh	r2, [r7, #24]
 8000e20:	819a      	strh	r2, [r3, #12]
  motor->in2 = in2;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	8bba      	ldrh	r2, [r7, #28]
 8000e26:	81da      	strh	r2, [r3, #14]
  motor->vel = 0;
 8000e28:	68f9      	ldr	r1, [r7, #12]
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <dc_motor_forwards>:
    write_in2(motor, read_in1(motor));
    motor->vel = 0;
  }
}

void dc_motor_forwards(dc_motor_t *motor) {
 8000e42:	b5b0      	push	{r4, r5, r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  if (motor->vel <= 0) {
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	f7ff fdee 	bl	8000a38 <__aeabi_dcmple>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d100      	bne.n	8000e64 <dc_motor_forwards+0x22>
    // 1 0
    write_in1(motor, true);
    write_in2(motor, false);
    motor->vel = -motor->vel;
  }
}
 8000e62:	e010      	b.n	8000e86 <dc_motor_forwards+0x44>
    write_in1(motor, true);
 8000e64:	2101      	movs	r1, #1
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa4 	bl	8000db4 <write_in1>
    write_in2(motor, false);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb2 	bl	8000dd8 <write_in2>
    motor->vel = -motor->vel;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e7a:	4614      	mov	r4, r2
 8000e7c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	e9c3 4504 	strd	r4, r5, [r3, #16]
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bdb0      	pop	{r4, r5, r7, pc}

08000e8e <dc_motor_backwards>:

void dc_motor_backwards(dc_motor_t *motor) {
 8000e8e:	b5b0      	push	{r4, r5, r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  if (motor->vel >= 0) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	f7ff fdd2 	bl	8000a4c <__aeabi_dcmpge>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d100      	bne.n	8000eb0 <dc_motor_backwards+0x22>
    // 0 1
    write_in1(motor, false);
    write_in2(motor, true);
    motor->vel = -motor->vel;
  }
}
 8000eae:	e010      	b.n	8000ed2 <dc_motor_backwards+0x44>
    write_in1(motor, false);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff7e 	bl	8000db4 <write_in1>
    write_in2(motor, true);
 8000eb8:	2101      	movs	r1, #1
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff8c 	bl	8000dd8 <write_in2>
    motor->vel = -motor->vel;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ec6:	4614      	mov	r4, r2
 8000ec8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	e9c3 4504 	strd	r4, r5, [r3, #16]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000edc <dc_motor_set_speed>:
  write_in1(motor, !read_in1(motor));
  write_in2(motor, !read_in2(motor));
  motor->vel = -motor->vel;
}

void dc_motor_set_speed(dc_motor_t *motor, double frac) {
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6178      	str	r0, [r7, #20]
 8000ee4:	ed87 0b02 	vstr	d0, [r7, #8]
  // clamp fraction
  if (frac < 0) {
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	f04f 0300 	mov.w	r3, #0
 8000ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ef4:	f7ff fd96 	bl	8000a24 <__aeabi_dcmplt>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <dc_motor_set_speed+0x30>
    frac = 0;
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000f0a:	e00e      	b.n	8000f2a <dc_motor_set_speed+0x4e>
  } else if (frac > 1) {
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b47      	ldr	r3, [pc, #284]	@ (8001030 <dc_motor_set_speed+0x154>)
 8000f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f16:	f7ff fda3 	bl	8000a60 <__aeabi_dcmpgt>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <dc_motor_set_speed+0x4e>
    frac = 1;
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <dc_motor_set_speed+0x154>)
 8000f26:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // already at speed?
  if (motor->vel == frac || motor->vel == -frac) {
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f34:	f7ff fd6c 	bl	8000a10 <__aeabi_dcmpeq>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d173      	bne.n	8001026 <dc_motor_set_speed+0x14a>
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f54:	f7ff fd5c 	bl	8000a10 <__aeabi_dcmpeq>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d163      	bne.n	8001026 <dc_motor_set_speed+0x14a>
    return;
  }

  // calculate and set CCR
  uint32_t arr = __HAL_TIM_GET_AUTORELOAD(motor->htim);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t ccr = frac * (arr + 1);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fa6d 	bl	800044c <__aeabi_ui2d>
 8000f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f76:	f7ff fae3 	bl	8000540 <__aeabi_dmul>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fd77 	bl	8000a74 <__aeabi_d2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	61bb      	str	r3, [r7, #24]
  __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, ccr);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d105      	bne.n	8000f9e <dc_motor_set_speed+0xc2>
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f9c:	e02c      	b.n	8000ff8 <dc_motor_set_speed+0x11c>
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d105      	bne.n	8000fb2 <dc_motor_set_speed+0xd6>
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6393      	str	r3, [r2, #56]	@ 0x38
 8000fb0:	e022      	b.n	8000ff8 <dc_motor_set_speed+0x11c>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d105      	bne.n	8000fc6 <dc_motor_set_speed+0xea>
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000fc4:	e018      	b.n	8000ff8 <dc_motor_set_speed+0x11c>
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d105      	bne.n	8000fda <dc_motor_set_speed+0xfe>
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	e00e      	b.n	8000ff8 <dc_motor_set_speed+0x11c>
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	d105      	bne.n	8000fee <dc_motor_set_speed+0x112>
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fec:	e004      	b.n	8000ff8 <dc_motor_set_speed+0x11c>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	65d3      	str	r3, [r2, #92]	@ 0x5c

  // update cached velocity (ensure correct sign)
  motor->vel = motor->vel < 0 ? -frac : frac;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	f7ff fd0d 	bl	8000a24 <__aeabi_dcmplt>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <dc_motor_set_speed+0x13e>
 8001010:	68bc      	ldr	r4, [r7, #8]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001018:	e001      	b.n	800101e <dc_motor_set_speed+0x142>
 800101a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	e9c3 4504 	strd	r4, r5, [r3, #16]
 8001024:	e000      	b.n	8001028 <dc_motor_set_speed+0x14c>
    return;
 8001026:	bf00      	nop
}
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bdb0      	pop	{r4, r5, r7, pc}
 800102e:	bf00      	nop
 8001030:	3ff00000 	.word	0x3ff00000

08001034 <dc_motor_set_velocity>:

double dc_motor_get_speed(dc_motor_t *motor) {
  return motor->vel < 0 ? -motor->vel : motor->vel;
}

void dc_motor_set_velocity(dc_motor_t *motor, double frac) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	ed87 0b00 	vstr	d0, [r7]
  if (motor->vel == frac) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800104a:	f7ff fce1 	bl	8000a10 <__aeabi_dcmpeq>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d120      	bne.n	8001096 <dc_motor_set_velocity+0x62>
    return;
  }

  if (frac < 0) {
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001060:	f7ff fce0 	bl	8000a24 <__aeabi_dcmplt>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00c      	beq.n	8001084 <dc_motor_set_velocity+0x50>
    dc_motor_backwards(motor);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff ff0f 	bl	8000e8e <dc_motor_backwards>
    dc_motor_set_speed(motor, -frac);
 8001070:	683c      	ldr	r4, [r7, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001078:	ec45 4b10 	vmov	d0, r4, r5
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff ff2d 	bl	8000edc <dc_motor_set_speed>
 8001082:	e009      	b.n	8001098 <dc_motor_set_velocity+0x64>
  } else {
    dc_motor_forwards(motor);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff fedc 	bl	8000e42 <dc_motor_forwards>
    dc_motor_set_speed(motor, frac);
 800108a:	ed97 0b00 	vldr	d0, [r7]
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff ff24 	bl	8000edc <dc_motor_set_speed>
 8001094:	e000      	b.n	8001098 <dc_motor_set_velocity+0x64>
    return;
 8001096:	bf00      	nop
  }
}
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}

0800109e <start_transaction>:
  {0x78, 0xC4, 0x00},
  {0x73, 0x74, 0x00}
};

// start transaction - reset NSS
static inline void start_transaction(lora_t *lora) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  write_pin(lora->nss_port, lora->nss_pin, false);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6858      	ldr	r0, [r3, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	891b      	ldrh	r3, [r3, #8]
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	f000 f983 	bl	80013bc <write_pin>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <end_transaction>:

// end transaction - set NSS
static inline void end_transaction(lora_t *lora) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  write_pin(lora->nss_port, lora->nss_pin, true);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6858      	ldr	r0, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	891b      	ldrh	r3, [r3, #8]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	f000 f973 	bl	80013bc <write_pin>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <spi_transmit>:

// SPI - transmit data
static inline void spi_transmit(lora_t *lora, uint8_t *data, uint16_t size) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	4613      	mov	r3, r2
 80010ea:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Transmit(lora->spi, data, size, LORA_TIMEOUT);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	88fa      	ldrh	r2, [r7, #6]
 80010f2:	2364      	movs	r3, #100	@ 0x64
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	f002 f86e 	bl	80031d6 <HAL_SPI_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <spi_receive>:

// SPI - recieve data
static inline void spi_receive(lora_t *lora, uint8_t *data, uint16_t size) {
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	4613      	mov	r3, r2
 800110e:	80fb      	strh	r3, [r7, #6]
  HAL_SPI_Receive(lora->spi, data, size, LORA_TIMEOUT);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	2364      	movs	r3, #100	@ 0x64
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	f002 f9d2 	bl	80034c2 <HAL_SPI_Receive>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <read_bytes>:
static inline void spi_receive_it(lora_t *lora, uint8_t *data, uint16_t size) {
  HAL_SPI_Receive_IT(lora->spi, data, size);
}

// read bytes from the given address
static void read_bytes(lora_t *lora, uint8_t address, uint8_t *buffer, uint16_t size) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	461a      	mov	r2, r3
 8001132:	460b      	mov	r3, r1
 8001134:	72fb      	strb	r3, [r7, #11]
 8001136:	4613      	mov	r3, r2
 8001138:	813b      	strh	r3, [r7, #8]
  // command - request address to read
  uint8_t cmd = address & 0x7F;
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001140:	b2db      	uxtb	r3, r3
 8001142:	75fb      	strb	r3, [r7, #23]

  start_transaction(lora);
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f7ff ffaa 	bl	800109e <start_transaction>
  spi_transmit(lora, &cmd, 1);
 800114a:	f107 0317 	add.w	r3, r7, #23
 800114e:	2201      	movs	r2, #1
 8001150:	4619      	mov	r1, r3
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f7ff ffc3 	bl	80010de <spi_transmit>
  spi_receive(lora, buffer, size);
 8001158:	893b      	ldrh	r3, [r7, #8]
 800115a:	461a      	mov	r2, r3
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff ffcf 	bl	8001102 <spi_receive>
  end_transaction(lora);
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff ffaa 	bl	80010be <end_transaction>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <write_bytes>:
  spi_receive_it(lora, buffer, size);
  end_transaction(lora);
}

// write bytes starting at the given address
static void write_bytes(lora_t *lora, uint8_t address, uint8_t *data, uint8_t size) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	461a      	mov	r2, r3
 800117e:	460b      	mov	r3, r1
 8001180:	72fb      	strb	r3, [r7, #11]
 8001182:	4613      	mov	r3, r2
 8001184:	72bb      	strb	r3, [r7, #10]
  // command - tell device to write to address
  uint8_t cmd = 0x80 | address;
 8001186:	7afb      	ldrb	r3, [r7, #11]
 8001188:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	75fb      	strb	r3, [r7, #23]

  start_transaction(lora);
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff ff84 	bl	800109e <start_transaction>
  spi_transmit(lora, &cmd, 1);
 8001196:	f107 0317 	add.w	r3, r7, #23
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff9d 	bl	80010de <spi_transmit>
  spi_transmit(lora, data, size);
 80011a4:	7abb      	ldrb	r3, [r7, #10]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ff96 	bl	80010de <spi_transmit>
  end_transaction(lora);
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff83 	bl	80010be <end_transaction>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <write_byte>:

// write byte to the given address
static void write_byte(lora_t *lora, uint8_t address, uint8_t value) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
 80011cc:	4613      	mov	r3, r2
 80011ce:	70bb      	strb	r3, [r7, #2]
  write_bytes(lora, address, &value, 1);
 80011d0:	1cba      	adds	r2, r7, #2
 80011d2:	78f9      	ldrb	r1, [r7, #3]
 80011d4:	2301      	movs	r3, #1
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffcb 	bl	8001172 <write_bytes>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <lora_send>:

void lora_receive_async(lora_t *lora, uint8_t *buffer, uint16_t size) {
  read_bytes_it(lora, REG_FIFO_ACCESS, buffer, size);
}

void lora_send(lora_t *lora, uint8_t *buffer, uint8_t size) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	71fb      	strb	r3, [r7, #7]
  // move to standby mode & clear IRQ flags
  lora_mode_standby(lora);
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 f83b 	bl	800126e <lora_mode_standby>
  lora_irq_clear(lora);
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f855 	bl	80012a8 <lora_irq_clear>

  // set pointer to TX base
  write_byte(lora, REG_FIFO_ADDR_PTR, TX_BASE_ADDR);
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	210d      	movs	r1, #13
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff ffdc 	bl	80011c0 <write_byte>
  
  // write payload buffer
  write_bytes(lora, REG_FIFO_ACCESS, buffer, size);
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	2100      	movs	r1, #0
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff ffaf 	bl	8001172 <write_bytes>

  // set payload length
  write_byte(lora, REG_PAYLOAD_LEN, size);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	461a      	mov	r2, r3
 8001218:	2122      	movs	r1, #34	@ 0x22
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ffd0 	bl	80011c0 <write_byte>
  
  // set to TX (transmit) mode
  // LoRa will switch to STANDBY when done
  lora_mode_tx(lora);
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f830 	bl	8001286 <lora_mode_tx>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <lora_set_mode>:
  read_bytes(lora, REG_OP_MODE, &reg, 1);
  return reg & 0x7;
}

// set mode register (uses OR to preserve 0xF8 & current)
static void lora_set_mode(lora_t *lora, uint8_t mode) {
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
  uint8_t flag;
  read_bytes(lora, REG_OP_MODE, &flag, 1);
 800123a:	f107 020f 	add.w	r2, r7, #15
 800123e:	2301      	movs	r3, #1
 8001240:	2101      	movs	r1, #1
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff6f 	bl	8001126 <read_bytes>

  // write: preserve all but lower `mode` bits
  write_byte(lora, REG_OP_MODE, (flag & 0xF8) | mode);
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	f023 0307 	bic.w	r3, r3, #7
 8001250:	b25a      	sxtb	r2, r3
 8001252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	2101      	movs	r1, #1
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffad 	bl	80011c0 <write_byte>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <lora_mode_standby>:

void lora_mode_standby(lora_t *lora) {
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  lora_set_mode(lora, MODE_LONG_RANGE | MODE_STANDBY);
 8001276:	2181      	movs	r1, #129	@ 0x81
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffd8 	bl	800122e <lora_set_mode>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <lora_mode_tx>:
void lora_mode_rx(lora_t *lora, bool continuous) {
  lora_set_mode(lora, continuous ? MODE_RXCONTINUOUS : MODE_RXSINGLE);
  write_byte(lora, REG_DIO_MAP1, 0x00); // interrupt DIO0 on RxDone
}

void lora_mode_tx(lora_t *lora) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  lora_set_mode(lora, MODE_TX);
 800128e:	2103      	movs	r1, #3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffcc 	bl	800122e <lora_set_mode>
  write_byte(lora, REG_DIO_MAP1, 0x01); // interrupt DIO0 on TxDone
 8001296:	2201      	movs	r2, #1
 8001298:	2140      	movs	r1, #64	@ 0x40
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ff90 	bl	80011c0 <write_byte>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <lora_irq_clear>:
  read_bytes(lora, REG_IRQ_FLAGS, &flags, 1);
  write_byte(lora, REG_IRQ_FLAGS, flags & ~mask);
  return flags & mask;
}

void lora_irq_clear(lora_t *lora) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  // flags clear on write
  write_byte(lora, REG_IRQ_FLAGS, 0xFF);
 80012b0:	22ff      	movs	r2, #255	@ 0xff
 80012b2:	2112      	movs	r1, #18
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff83 	bl	80011c0 <write_byte>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <stepper_event_done>:
  event->target = 0;
  event->target_fwd = forwards_target;
  event->target_bwd = backwards_target;
}

bool stepper_event_done(stepper_event_t *event) {
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  return event->progress == event->target;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	2300      	movne	r3, #0
 80012da:	b2db      	uxtb	r3, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <stepper_event_update>:

void stepper_event_update(stepper_event_t *event, int8_t new_position) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
  // same as old direction? all's good
  if (new_position == event->target_pos) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f993 3000 	ldrsb.w	r3, [r3]
 80012fa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d03a      	beq.n	8001378 <stepper_event_update+0x90>
    return;
  }
  
  // arrive at centre by undoing steps
  event->target = event->progress;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	609a      	str	r2, [r3, #8]
  
  // from new position, update target steps and step direction
  switch (new_position) {
 800130a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d022      	beq.n	8001358 <stepper_event_update+0x70>
 8001312:	2b01      	cmp	r3, #1
 8001314:	dc29      	bgt.n	800136a <stepper_event_update+0x82>
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d002      	beq.n	8001322 <stepper_event_update+0x3a>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00b      	beq.n	8001338 <stepper_event_update+0x50>
 8001320:	e023      	b.n	800136a <stepper_event_update+0x82>
    case POSITION_BACKWARD:
      event->target += event->target_bwd;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6912      	ldr	r2, [r2, #16]
 800132a:	441a      	add	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
      event->step_fwd = false;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
      break;
 8001336:	e018      	b.n	800136a <stepper_event_update+0x82>
    case POSITION_MIDDLE:
      event->step_fwd = !event->step_fwd;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	785b      	ldrb	r3, [r3, #1]
 800133c:	2b00      	cmp	r3, #0
 800133e:	bf14      	ite	ne
 8001340:	2301      	movne	r3, #1
 8001342:	2300      	moveq	r3, #0
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	705a      	strb	r2, [r3, #1]
      break;
 8001356:	e008      	b.n	800136a <stepper_event_update+0x82>
    case POSITION_FORWARD:
      event->target = event->target_fwd;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	609a      	str	r2, [r3, #8]
      event->step_fwd = true;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
      break;
 8001368:	bf00      	nop
  }
  
  // reset progress
  event->progress = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  
  // set new target position
  event->target_pos = new_position;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	e000      	b.n	800137a <stepper_event_update+0x92>
    return;
 8001378:	bf00      	nop
}
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <fetch_code>:
#include "stored-code.h"

static volatile code_t _code;

code_t fetch_code(void) {
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return _code;
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <fetch_code+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200000d0 	.word	0x200000d0

0800139c <save_code>:

void save_code(code_t code) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  _code = code;
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <save_code+0x1c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200000d0 	.word	0x200000d0

080013bc <write_pin>:
#include "util.h"

void write_pin(port_t *port, pin_t pin, bool state) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	461a      	mov	r2, r3
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fff3 	bl	80023c0 <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 fc4f 	bl	8001c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f811 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f000 f9df 	bl	80017b0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80013f2:	f000 f921 	bl	8001638 <MX_TIM3_Init>
  MX_TIM6_Init();
 80013f6:	f000 f96d 	bl	80016d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013fa:	f000 f9a3 	bl	8001744 <MX_TIM7_Init>
  MX_SPI2_Init();
 80013fe:	f000 f859 	bl	80014b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001402:	f000 f895 	bl	8001530 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 8001406:	f7ff fbeb 	bl	8000be0 <setup>
  while (1)
  {
	  loop();
 800140a:	f7ff fc39 	bl	8000c80 <loop>
 800140e:	e7fc      	b.n	800140a <main+0x28>

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b096      	sub	sp, #88	@ 0x58
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2244      	movs	r2, #68	@ 0x44
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f004 f8c4 	bl	80055ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001432:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001436:	f001 f80d 	bl	8002454 <HAL_PWREx_ControlVoltageScaling>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001440:	f000 fa58 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001456:	2302      	movs	r3, #2
 8001458:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800145e:	230a      	movs	r3, #10
 8001460:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001462:	2307      	movs	r3, #7
 8001464:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4618      	mov	r0, r3
 8001474:	f001 f844 	bl	8002500 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800147e:	f000 fa39 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2303      	movs	r3, #3
 8001488:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	2104      	movs	r1, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fc0c 	bl	8002cb8 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014a6:	f000 fa25 	bl	80018f4 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3758      	adds	r7, #88	@ 0x58
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	@ (800152c <MX_SPI2_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c6:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014cc:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014ea:	2228      	movs	r2, #40	@ 0x28
 80014ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <MX_SPI2_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <MX_SPI2_Init+0x74>)
 8001502:	2207      	movs	r2, #7
 8001504:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <MX_SPI2_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <MX_SPI2_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	@ (8001528 <MX_SPI2_Init+0x74>)
 8001514:	f001 fdbc 	bl	8003090 <HAL_SPI_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800151e:	f000 f9e9 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000d4 	.word	0x200000d4
 800152c:	40003800 	.word	0x40003800

08001530 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	@ 0x38
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001562:	4b34      	ldr	r3, [pc, #208]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001564:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001568:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800156a:	4b32      	ldr	r3, [pc, #200]	@ (8001634 <MX_TIM2_Init+0x104>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001576:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001578:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800157c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800158a:	482a      	ldr	r0, [pc, #168]	@ (8001634 <MX_TIM2_Init+0x104>)
 800158c:	f002 fdc0 	bl	8004110 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001596:	f000 f9ad 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4823      	ldr	r0, [pc, #140]	@ (8001634 <MX_TIM2_Init+0x104>)
 80015a8:	f003 fa2c 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015b2:	f000 f99f 	bl	80018f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015b6:	481f      	ldr	r0, [pc, #124]	@ (8001634 <MX_TIM2_Init+0x104>)
 80015b8:	f002 fea1 	bl	80042fe <HAL_TIM_PWM_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015c2:	f000 f997 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4817      	ldr	r0, [pc, #92]	@ (8001634 <MX_TIM2_Init+0x104>)
 80015d6:	f003 ff43 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015e0:	f000 f988 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e4:	2360      	movs	r3, #96	@ 0x60
 80015e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	480e      	ldr	r0, [pc, #56]	@ (8001634 <MX_TIM2_Init+0x104>)
 80015fc:	f003 f8ee 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001606:	f000 f975 	bl	80018f4 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800160a:	2304      	movs	r3, #4
 800160c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	2208      	movs	r2, #8
 8001612:	4619      	mov	r1, r3
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001616:	f003 f8e1 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001620:	f000 f968 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001624:	4803      	ldr	r0, [pc, #12]	@ (8001634 <MX_TIM2_Init+0x104>)
 8001626:	f000 fa43 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 800162a:	bf00      	nop
 800162c:	3738      	adds	r7, #56	@ 0x38
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000138 	.word	0x20000138

08001638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_TIM3_Init+0x94>)
 8001658:	4a1d      	ldr	r2, [pc, #116]	@ (80016d0 <MX_TIM3_Init+0x98>)
 800165a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <MX_TIM3_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM3_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <MX_TIM3_Init+0x94>)
 800166a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800166e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <MX_TIM3_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <MX_TIM3_Init+0x94>)
 8001678:	2280      	movs	r2, #128	@ 0x80
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800167c:	4813      	ldr	r0, [pc, #76]	@ (80016cc <MX_TIM3_Init+0x94>)
 800167e:	f002 fd47 	bl	8004110 <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001688:	f000 f934 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <MX_TIM3_Init+0x94>)
 800169a:	f003 f9b3 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016a4:	f000 f926 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_TIM3_Init+0x94>)
 80016b6:	f003 fed3 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f000 f918 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000184 	.word	0x20000184
 80016d0:	40000400 	.word	0x40000400

080016d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_TIM6_Init+0x68>)
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <MX_TIM6_Init+0x6c>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2476;
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_TIM6_Init+0x68>)
 80016ec:	f640 12ac 	movw	r2, #2476	@ 0x9ac
 80016f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <MX_TIM6_Init+0x68>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64515;
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <MX_TIM6_Init+0x68>)
 80016fa:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 80016fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <MX_TIM6_Init+0x68>)
 8001702:	2280      	movs	r2, #128	@ 0x80
 8001704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <MX_TIM6_Init+0x68>)
 8001708:	f002 fd02 	bl	8004110 <HAL_TIM_Base_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001712:	f000 f8ef 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <MX_TIM6_Init+0x68>)
 8001724:	f003 fe9c 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800172e:	f000 f8e1 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200001d0 	.word	0x200001d0
 8001740:	40001000 	.word	0x40001000

08001744 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_TIM7_Init+0x64>)
 8001756:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <MX_TIM7_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <MX_TIM7_Init+0x64>)
 800175c:	2207      	movs	r2, #7
 800175e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_TIM7_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <MX_TIM7_Init+0x64>)
 8001768:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800176c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_TIM7_Init+0x64>)
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <MX_TIM7_Init+0x64>)
 8001776:	f002 fccb 	bl	8004110 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001780:	f000 f8b8 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_TIM7_Init+0x64>)
 8001792:	f003 fe65 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800179c:	f000 f8aa 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000021c 	.word	0x2000021c
 80017ac:	40001400 	.word	0x40001400

080017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4a47      	ldr	r2, [pc, #284]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4b45      	ldr	r3, [pc, #276]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a41      	ldr	r2, [pc, #260]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b3f      	ldr	r3, [pc, #252]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b3c      	ldr	r3, [pc, #240]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a3b      	ldr	r2, [pc, #236]	@ (80018e8 <MX_GPIO_Init+0x138>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <MX_GPIO_Init+0x138>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEPPER_IN1_Pin|STEPPER_IN2_Pin|STEPPER_IN3_Pin|STEPPER_IN4_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	210f      	movs	r1, #15
 8001812:	4836      	ldr	r0, [pc, #216]	@ (80018ec <MX_GPIO_Init+0x13c>)
 8001814:	f000 fdd4 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_MOTOR_IN1_Pin|DC_MOTOR_IN2_Pin|DC_MOTOR_IN3_Pin|DC_MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001820:	f000 fdce 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFM_RESET_Pin|RFM_SELECT_Pin|ELECTROMAGNET_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f241 0109 	movw	r1, #4105	@ 0x1009
 800182a:	4831      	ldr	r0, [pc, #196]	@ (80018f0 <MX_GPIO_Init+0x140>)
 800182c:	f000 fdc8 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001836:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800183a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	4829      	ldr	r0, [pc, #164]	@ (80018ec <MX_GPIO_Init+0x13c>)
 8001848:	f000 fc10 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_IN1_Pin STEPPER_IN2_Pin STEPPER_IN3_Pin STEPPER_IN4_Pin */
  GPIO_InitStruct.Pin = STEPPER_IN1_Pin|STEPPER_IN2_Pin|STEPPER_IN3_Pin|STEPPER_IN4_Pin;
 800184c:	230f      	movs	r3, #15
 800184e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4619      	mov	r1, r3
 8001862:	4822      	ldr	r0, [pc, #136]	@ (80018ec <MX_GPIO_Init+0x13c>)
 8001864:	f000 fc02 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_MOTOR_IN1_Pin DC_MOTOR_IN2_Pin DC_MOTOR_IN3_Pin DC_MOTOR_IN4_Pin */
  GPIO_InitStruct.Pin = DC_MOTOR_IN1_Pin|DC_MOTOR_IN2_Pin|DC_MOTOR_IN3_Pin|DC_MOTOR_IN4_Pin;
 8001868:	230f      	movs	r3, #15
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001882:	f000 fbf3 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_RESET_Pin RFM_SELECT_Pin ELECTROMAGNET_Pin */
  GPIO_InitStruct.Pin = RFM_RESET_Pin|RFM_SELECT_Pin|ELECTROMAGNET_Pin;
 8001886:	f241 0309 	movw	r3, #4105	@ 0x1009
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4619      	mov	r1, r3
 800189e:	4814      	ldr	r0, [pc, #80]	@ (80018f0 <MX_GPIO_Init+0x140>)
 80018a0:	f000 fbe4 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_DIO0_Pin */
  GPIO_InitStruct.Pin = RFM_DIO0_Pin;
 80018a4:	2302      	movs	r3, #2
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFM_DIO0_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	480d      	ldr	r0, [pc, #52]	@ (80018f0 <MX_GPIO_Init+0x140>)
 80018ba:	f000 fbd7 	bl	800206c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2007      	movs	r0, #7
 80018c4:	f000 fb5b 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018c8:	2007      	movs	r0, #7
 80018ca:	f000 fb74 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2028      	movs	r0, #40	@ 0x28
 80018d4:	f000 fb53 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018d8:	2028      	movs	r0, #40	@ 0x28
 80018da:	f000 fb6c 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000400 	.word	0x48000400

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <Error_Handler+0x8>

08001900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190a:	4a0e      	ldr	r2, [pc, #56]	@ (8001944 <HAL_MspInit+0x44>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	@ 0x60
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <HAL_MspInit+0x44>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_MspInit+0x44>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	@ 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_MspInit+0x44>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_SPI_MspInit+0x8c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d130      	bne.n	80019cc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_SPI_MspInit+0x90>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	4a1a      	ldr	r2, [pc, #104]	@ (80019d8 <HAL_SPI_MspInit+0x90>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001974:	6593      	str	r3, [r2, #88]	@ 0x58
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_SPI_MspInit+0x90>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <HAL_SPI_MspInit+0x90>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <HAL_SPI_MspInit+0x90>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_SPI_MspInit+0x90>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800199a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800199e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ac:	2305      	movs	r3, #5
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4809      	ldr	r0, [pc, #36]	@ (80019dc <HAL_SPI_MspInit+0x94>)
 80019b8:	f000 fb58 	bl	800206c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2024      	movs	r0, #36	@ 0x24
 80019c2:	f000 fadc 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80019c6:	2024      	movs	r0, #36	@ 0x24
 80019c8:	f000 faf5 	bl	8001fb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	@ 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40003800 	.word	0x40003800
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000400 	.word	0x48000400

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f0:	d10c      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fe:	4b28      	ldr	r3, [pc, #160]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a0a:	e044      	b.n	8001a96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_TIM_Base_MspInit+0xc4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a21      	ldr	r2, [pc, #132]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
}
 8001a2e:	e032      	b.n	8001a96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <HAL_TIM_Base_MspInit+0xc8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d114      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2036      	movs	r0, #54	@ 0x36
 8001a58:	f000 fa91 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a5c:	2036      	movs	r0, #54	@ 0x36
 8001a5e:	f000 faaa 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
}
 8001a62:	e018      	b.n	8001a96 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_TIM_Base_MspInit+0xcc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d113      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a74:	f043 0320 	orr.w	r3, r3, #32
 8001a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2037      	movs	r0, #55	@ 0x37
 8001a8c:	f000 fa77 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a90:	2037      	movs	r0, #55	@ 0x37
 8001a92:	f000 fa90 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40001000 	.word	0x40001000
 8001aac:	40001400 	.word	0x40001400

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ad0:	d139      	bne.n	8001b46 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a18      	ldr	r2, [pc, #96]	@ (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_TIM_MspPostInit+0xa0>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = DC_MOTOR_EN1_2_Pin;
 8001b02:	2320      	movs	r3, #32
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_MOTOR_EN1_2_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b20:	f000 faa4 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_MOTOR_EN3_4_Pin;
 8001b24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_MOTOR_EN3_4_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <HAL_TIM_MspPostInit+0xa4>)
 8001b42:	f000 fa93 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	@ 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48000400 	.word	0x48000400

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <NMI_Handler+0x4>

08001b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f000 f8c7 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_DIO0_Pin);
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f000 fc18 	bl	80023f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <SPI2_IRQHandler+0x10>)
 8001bca:	f001 ffd1 	bl	8003b70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200000d4 	.word	0x200000d4

08001bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bdc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001be0:	f000 fc06 	bl	80023f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <TIM6_DAC_IRQHandler+0x10>)
 8001bee:	f002 fced 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200001d0 	.word	0x200001d0

08001bfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <TIM7_IRQHandler+0x10>)
 8001c02:	f002 fce3 	bl	80045cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000021c 	.word	0x2000021c

08001c10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <SystemInit+0x20>)
 8001c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <SystemInit+0x20>)
 8001c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c38:	f7ff ffea 	bl	8001c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c3c:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c3e:	490d      	ldr	r1, [pc, #52]	@ (8001c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <LoopForever+0xe>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c44:	e002      	b.n	8001c4c <LoopCopyDataInit>

08001c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4a:	3304      	adds	r3, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c50:	d3f9      	bcc.n	8001c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c54:	4c0a      	ldr	r4, [pc, #40]	@ (8001c80 <LoopForever+0x16>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c58:	e001      	b.n	8001c5e <LoopFillZerobss>

08001c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c5c:	3204      	adds	r2, #4

08001c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c60:	d3fb      	bcc.n	8001c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c62:	f003 fcab 	bl	80055bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c66:	f7ff fbbc 	bl	80013e2 <main>

08001c6a <LoopForever>:

LoopForever:
    b LoopForever
 8001c6a:	e7fe      	b.n	8001c6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c78:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 8001c7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c80:	2000026c 	.word	0x2000026c

08001c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c84:	e7fe      	b.n	8001c84 <ADC1_2_IRQHandler>
	...

08001c88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_Init+0x3c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <HAL_Init+0x3c>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 f962 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 f80f 	bl	8001cc8 <HAL_InitTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	e001      	b.n	8001cba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb6:	f7ff fe23 	bl	8001900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <HAL_InitTick+0x6c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cdc:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_InitTick+0x70>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <HAL_InitTick+0x6c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f96d 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d809      	bhi.n	8001d18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 f937 	bl	8001f7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <HAL_InitTick+0x74>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e004      	b.n	8001d28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e001      	b.n	8001d28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000268 	.word	0x20000268

08001d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000268 	.word	0x20000268

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	@ (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	@ (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	@ (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	@ (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	@ (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	@ 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d005      	beq.n	800200e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e029      	b.n	8002062 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 020e 	bic.w	r2, r2, #14
 800201c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f003 021c 	and.w	r2, r3, #28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
    }
  }
  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207a:	e17f      	b.n	800237c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8171 	beq.w	8002376 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d005      	beq.n	80020ac <HAL_GPIO_Init+0x40>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d130      	bne.n	800210e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e2:	2201      	movs	r2, #1
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 0201 	and.w	r2, r3, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b03      	cmp	r3, #3
 8002118:	d118      	bne.n	800214c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002120:	2201      	movs	r2, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f003 0201 	and.w	r2, r3, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b03      	cmp	r3, #3
 8002156:	d017      	beq.n	8002188 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d123      	bne.n	80021dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	6939      	ldr	r1, [r7, #16]
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80ac 	beq.w	8002376 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <HAL_GPIO_Init+0x330>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002222:	4a5e      	ldr	r2, [pc, #376]	@ (800239c <HAL_GPIO_Init+0x330>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6613      	str	r3, [r2, #96]	@ 0x60
 800222a:	4b5c      	ldr	r3, [pc, #368]	@ (800239c <HAL_GPIO_Init+0x330>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002236:	4a5a      	ldr	r2, [pc, #360]	@ (80023a0 <HAL_GPIO_Init+0x334>)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002260:	d025      	beq.n	80022ae <HAL_GPIO_Init+0x242>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4f      	ldr	r2, [pc, #316]	@ (80023a4 <HAL_GPIO_Init+0x338>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <HAL_GPIO_Init+0x23e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4e      	ldr	r2, [pc, #312]	@ (80023a8 <HAL_GPIO_Init+0x33c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x23a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4d      	ldr	r2, [pc, #308]	@ (80023ac <HAL_GPIO_Init+0x340>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x236>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4c      	ldr	r2, [pc, #304]	@ (80023b0 <HAL_GPIO_Init+0x344>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x232>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4b      	ldr	r2, [pc, #300]	@ (80023b4 <HAL_GPIO_Init+0x348>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x22e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4a      	ldr	r2, [pc, #296]	@ (80023b8 <HAL_GPIO_Init+0x34c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x22a>
 8002292:	2306      	movs	r3, #6
 8002294:	e00c      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 8002296:	2307      	movs	r3, #7
 8002298:	e00a      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 800229a:	2305      	movs	r3, #5
 800229c:	e008      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 800229e:	2304      	movs	r3, #4
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 80022a2:	2303      	movs	r3, #3
 80022a4:	e004      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e002      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x244>
 80022ae:	2300      	movs	r3, #0
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	f002 0203 	and.w	r2, r2, #3
 80022b6:	0092      	lsls	r2, r2, #2
 80022b8:	4093      	lsls	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022c0:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_GPIO_Init+0x334>)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HAL_GPIO_Init+0x350>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022f2:	4a32      	ldr	r2, [pc, #200]	@ (80023bc <HAL_GPIO_Init+0x350>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022f8:	4b30      	ldr	r3, [pc, #192]	@ (80023bc <HAL_GPIO_Init+0x350>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800231c:	4a27      	ldr	r2, [pc, #156]	@ (80023bc <HAL_GPIO_Init+0x350>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002322:	4b26      	ldr	r3, [pc, #152]	@ (80023bc <HAL_GPIO_Init+0x350>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002346:	4a1d      	ldr	r2, [pc, #116]	@ (80023bc <HAL_GPIO_Init+0x350>)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_GPIO_Init+0x350>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002370:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <HAL_GPIO_Init+0x350>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	f47f ae78 	bne.w	800207c <HAL_GPIO_Init+0x10>
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010000 	.word	0x40010000
 80023a4:	48000400 	.word	0x48000400
 80023a8:	48000800 	.word	0x48000800
 80023ac:	48000c00 	.word	0x48000c00
 80023b0:	48001000 	.word	0x48001000
 80023b4:	48001400 	.word	0x48001400
 80023b8:	48001800 	.word	0x48001800
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002406:	4a05      	ldr	r2, [pc, #20]	@ (800241c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f806 	bl	8002420 <HAL_GPIO_EXTI_Callback>
  }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <HAL_PWREx_GetVoltageRange+0x18>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002462:	d130      	bne.n	80024c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800246c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002470:	d038      	beq.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800247a:	4a1e      	ldr	r2, [pc, #120]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2232      	movs	r2, #50	@ 0x32
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	4a1b      	ldr	r2, [pc, #108]	@ (80024fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	3301      	adds	r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002498:	e002      	b.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3b01      	subs	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ac:	d102      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f2      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024c0:	d110      	bne.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e00f      	b.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d2:	d007      	beq.n	80024e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024dc:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40007000 	.word	0x40007000
 80024f8:	20000000 	.word	0x20000000
 80024fc:	431bde83 	.word	0x431bde83

08002500 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e3ca      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b97      	ldr	r3, [pc, #604]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800251c:	4b94      	ldr	r3, [pc, #592]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80e4 	beq.w	80026fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_RCC_OscConfig+0x4a>
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	f040 808b 	bne.w	8002658 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b01      	cmp	r3, #1
 8002546:	f040 8087 	bne.w	8002658 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254a:	4b89      	ldr	r3, [pc, #548]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x62>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e3a2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1a      	ldr	r2, [r3, #32]
 8002566:	4b82      	ldr	r3, [pc, #520]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_RCC_OscConfig+0x7c>
 8002572:	4b7f      	ldr	r3, [pc, #508]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800257a:	e005      	b.n	8002588 <HAL_RCC_OscConfig+0x88>
 800257c:	4b7c      	ldr	r3, [pc, #496]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002588:	4293      	cmp	r3, r2
 800258a:	d223      	bcs.n	80025d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fd1d 	bl	8002fd0 <RCC_SetFlashLatencyFromMSIRange>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e383      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a0:	4b73      	ldr	r3, [pc, #460]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a72      	ldr	r2, [pc, #456]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b70      	ldr	r3, [pc, #448]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	496d      	ldr	r1, [pc, #436]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025be:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	4968      	ldr	r1, [pc, #416]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
 80025d2:	e025      	b.n	8002620 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d4:	4b66      	ldr	r3, [pc, #408]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a65      	ldr	r2, [pc, #404]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b63      	ldr	r3, [pc, #396]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4960      	ldr	r1, [pc, #384]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	495b      	ldr	r1, [pc, #364]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fcdd 	bl	8002fd0 <RCC_SetFlashLatencyFromMSIRange>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e343      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002620:	f000 fc4a 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b52      	ldr	r3, [pc, #328]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	4950      	ldr	r1, [pc, #320]	@ (8002774 <HAL_RCC_OscConfig+0x274>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
 800263c:	4a4e      	ldr	r2, [pc, #312]	@ (8002778 <HAL_RCC_OscConfig+0x278>)
 800263e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002640:	4b4e      	ldr	r3, [pc, #312]	@ (800277c <HAL_RCC_OscConfig+0x27c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fb3f 	bl	8001cc8 <HAL_InitTick>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d052      	beq.n	80026fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	e327      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d032      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002660:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800266c:	f7ff fb7c 	bl	8001d68 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002674:	f7ff fb78 	bl	8001d68 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e310      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002686:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002692:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a36      	ldr	r2, [pc, #216]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002698:	f043 0308 	orr.w	r3, r3, #8
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4931      	ldr	r1, [pc, #196]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	492c      	ldr	r1, [pc, #176]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e01a      	b.n	80026fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fb49 	bl	8001d68 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026da:	f7ff fb45 	bl	8001d68 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e2dd      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ec:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x1da>
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d074      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b08      	cmp	r3, #8
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x21a>
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d10e      	bne.n	8002732 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d10b      	bne.n	8002732 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d064      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d160      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e2ba      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x24a>
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e026      	b.n	8002798 <HAL_RCC_OscConfig+0x298>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002752:	d115      	bne.n	8002780 <HAL_RCC_OscConfig+0x280>
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 800275a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b03      	ldr	r3, [pc, #12]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a02      	ldr	r2, [pc, #8]	@ (8002770 <HAL_RCC_OscConfig+0x270>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e014      	b.n	8002798 <HAL_RCC_OscConfig+0x298>
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	08005638 	.word	0x08005638
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004
 8002780:	4ba0      	ldr	r3, [pc, #640]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a9f      	ldr	r2, [pc, #636]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a9c      	ldr	r2, [pc, #624]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff fae2 	bl	8001d68 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff fade 	bl	8001d68 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e276      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	4b92      	ldr	r3, [pc, #584]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2a8>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7ff face 	bl	8001d68 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff faca 	bl	8001d68 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e262      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e2:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x2d0>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d060      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d005      	beq.n	8002810 <HAL_RCC_OscConfig+0x310>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d119      	bne.n	800283e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d116      	bne.n	800283e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002810:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x328>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e23f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	4973      	ldr	r1, [pc, #460]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	e040      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002846:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7ff fa89 	bl	8001d68 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7ff fa85 	bl	8001d68 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e21d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286c:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b62      	ldr	r3, [pc, #392]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	495f      	ldr	r1, [pc, #380]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
 800288c:	e018      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5c      	ldr	r2, [pc, #368]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff fa65 	bl	8001d68 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a2:	f7ff fa61 	bl	8001d68 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1f9      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b4:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028da:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7ff fa40 	bl	8001d68 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7ff fa3c 	bl	8001d68 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1d4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x3ec>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7ff fa23 	bl	8001d68 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7ff fa1f 	bl	8001d68 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1b7      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002938:	4b32      	ldr	r3, [pc, #200]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80a6 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002958:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10d      	bne.n	8002980 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4a26      	ldr	r2, [pc, #152]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d118      	bne.n	80029be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1d      	ldr	r2, [pc, #116]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002996:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002998:	f7ff f9e6 	bl	8001d68 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7ff f9e2 	bl	8001d68 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e17a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x508>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d8>
 80029c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029d6:	e029      	b.n	8002a2c <HAL_RCC_OscConfig+0x52c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d115      	bne.n	8002a0c <HAL_RCC_OscConfig+0x50c>
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	4a07      	ldr	r2, [pc, #28]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a03      	ldr	r2, [pc, #12]	@ (8002a04 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x52c>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	4a9b      	ldr	r2, [pc, #620]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a1c:	4b98      	ldr	r3, [pc, #608]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	4a97      	ldr	r2, [pc, #604]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d016      	beq.n	8002a62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a34:	f7ff f998 	bl	8001d68 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3c:	f7ff f994 	bl	8001d68 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e12a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	4b8b      	ldr	r3, [pc, #556]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ed      	beq.n	8002a3c <HAL_RCC_OscConfig+0x53c>
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7ff f981 	bl	8001d68 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7ff f97d 	bl	8001d68 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e113      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ed      	bne.n	8002a6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b7a      	ldr	r3, [pc, #488]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a79      	ldr	r2, [pc, #484]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80fe 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	f040 80d0 	bne.w	8002c54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ab4:	4b72      	ldr	r3, [pc, #456]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d130      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d127      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d11f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af4:	2a07      	cmp	r2, #7
 8002af6:	bf14      	ite	ne
 8002af8:	2201      	movne	r2, #1
 8002afa:	2200      	moveq	r2, #0
 8002afc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d113      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d06e      	beq.n	8002c08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d069      	beq.n	8002c04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b30:	4b53      	ldr	r3, [pc, #332]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b3c:	4b50      	ldr	r3, [pc, #320]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0ad      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4b      	ldr	r2, [pc, #300]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b58:	f7ff f906 	bl	8001d68 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7ff f902 	bl	8001d68 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e09a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x784>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b8e:	3a01      	subs	r2, #1
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b98:	0212      	lsls	r2, r2, #8
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ba0:	0852      	lsrs	r2, r2, #1
 8002ba2:	3a01      	subs	r2, #1
 8002ba4:	0552      	lsls	r2, r2, #21
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bac:	0852      	lsrs	r2, r2, #1
 8002bae:	3a01      	subs	r2, #1
 8002bb0:	0652      	lsls	r2, r2, #25
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bb8:	0912      	lsrs	r2, r2, #4
 8002bba:	0452      	lsls	r2, r2, #17
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	4930      	ldr	r1, [pc, #192]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bdc:	f7ff f8c4 	bl	8001d68 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7ff f8c0 	bl	8001d68 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e058      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c02:	e050      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e04f      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c08:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d148      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c20:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c2c:	f7ff f89c 	bl	8001d68 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7ff f898 	bl	8001d68 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e030      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x734>
 8002c52:	e028      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d023      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b09      	ldr	r3, [pc, #36]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <HAL_RCC_OscConfig+0x780>)
 8002c60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f87f 	bl	8001d68 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	e00c      	b.n	8002c88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff f87b 	bl	8001d68 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d905      	bls.n	8002c88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e013      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_RCC_OscConfig+0x7b0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ec      	bne.n	8002c6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_RCC_OscConfig+0x7b0>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4905      	ldr	r1, [pc, #20]	@ (8002cb0 <HAL_RCC_OscConfig+0x7b0>)
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_OscConfig+0x7b4>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
 8002ca0:	e001      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	feeefffc 	.word	0xfeeefffc

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0e7      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b75      	ldr	r3, [pc, #468]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b72      	ldr	r3, [pc, #456]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4970      	ldr	r1, [pc, #448]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0cf      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b63      	ldr	r3, [pc, #396]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4960      	ldr	r1, [pc, #384]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04c      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d121      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0a6      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d56:	4b54      	ldr	r3, [pc, #336]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d115      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e09a      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e08e      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e086      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4943      	ldr	r1, [pc, #268]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da0:	f7fe ffe2 	bl	8001d68 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe ffde 	bl	8001d68 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e06e      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d208      	bcs.n	8002dfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	492b      	ldr	r1, [pc, #172]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d210      	bcs.n	8002e2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 0207 	bic.w	r2, r3, #7
 8002e14:	4923      	ldr	r1, [pc, #140]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e036      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4918      	ldr	r1, [pc, #96]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4910      	ldr	r1, [pc, #64]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e6c:	f000 f824 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	490b      	ldr	r1, [pc, #44]	@ (8002eac <HAL_RCC_ClockConfig+0x1f4>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	4a09      	ldr	r2, [pc, #36]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe ff19 	bl	8001cc8 <HAL_InitTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08005638 	.word	0x08005638
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	@ 0x24
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x34>
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d11e      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eec:	4b34      	ldr	r3, [pc, #208]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d107      	bne.n	8002f08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ef8:	4b31      	ldr	r3, [pc, #196]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e005      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f08:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f14:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e004      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f3c:	4b23      	ldr	r3, [pc, #140]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d134      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d003      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d003      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0xac>
 8002f5c:	e005      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	e005      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f66:	617b      	str	r3, [r7, #20]
      break;
 8002f68:	e002      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	617b      	str	r3, [r7, #20]
      break;
 8002f6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	fb03 f202 	mul.w	r2, r3, r2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	0e5b      	lsrs	r3, r3, #25
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08005648 	.word	0x08005648
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	007a1200 	.word	0x007a1200

08002fd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fe8:	f7ff fa26 	bl	8002438 <HAL_PWREx_GetVoltageRange>
 8002fec:	6178      	str	r0, [r7, #20]
 8002fee:	e014      	b.n	800301a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	4a24      	ldr	r2, [pc, #144]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ffc:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003008:	f7ff fa16 	bl	8002438 <HAL_PWREx_GetVoltageRange>
 800300c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800300e:	4b1e      	ldr	r3, [pc, #120]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003018:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003020:	d10b      	bne.n	800303a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b80      	cmp	r3, #128	@ 0x80
 8003026:	d919      	bls.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2ba0      	cmp	r3, #160	@ 0xa0
 800302c:	d902      	bls.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800302e:	2302      	movs	r3, #2
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	e013      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003034:	2301      	movs	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	e010      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b80      	cmp	r3, #128	@ 0x80
 800303e:	d902      	bls.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003040:	2303      	movs	r3, #3
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e00a      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b80      	cmp	r3, #128	@ 0x80
 800304a:	d102      	bne.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304c:	2302      	movs	r3, #2
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	e004      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b70      	cmp	r3, #112	@ 0x70
 8003056:	d101      	bne.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003058:	2301      	movs	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 0207 	bic.w	r2, r3, #7
 8003064:	4909      	ldr	r1, [pc, #36]	@ (800308c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	40022000 	.word	0x40022000

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e095      	b.n	80031ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fc30 	bl	8001948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003108:	d902      	bls.n	8003110 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003114:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Init+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 0204 	and.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e6:	f7fe fdbf 	bl	8001d68 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
 80031fe:	e15c      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x36>
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e154      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_SPI_Transmit+0x48>
 800321a:	2302      	movs	r3, #2
 800321c:	e14d      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2203      	movs	r2, #3
 800322a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	d10f      	bne.n	8003292 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003290:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d007      	beq.n	80032b0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032b8:	d952      	bls.n	8003360 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_Transmit+0xf2>
 80032c2:	8b7b      	ldrh	r3, [r7, #26]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d145      	bne.n	8003354 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032ec:	e032      	b.n	8003354 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d112      	bne.n	8003322 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	881a      	ldrh	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	1c9a      	adds	r2, r3, #2
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003320:	e018      	b.n	8003354 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003322:	f7fe fd21 	bl	8001d68 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d803      	bhi.n	800333a <HAL_SPI_Transmit+0x164>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d102      	bne.n	8003340 <HAL_SPI_Transmit+0x16a>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0b2      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1c7      	bne.n	80032ee <HAL_SPI_Transmit+0x118>
 800335e:	e083      	b.n	8003468 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_SPI_Transmit+0x198>
 8003368:	8b7b      	ldrh	r3, [r7, #26]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d177      	bne.n	800345e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d912      	bls.n	800339e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b02      	subs	r3, #2
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800339c:	e05f      	b.n	800345e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033c4:	e04b      	b.n	800345e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d12b      	bne.n	800342c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d912      	bls.n	8003404 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b02      	subs	r3, #2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003402:	e02c      	b.n	800345e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	7812      	ldrb	r2, [r2, #0]
 8003410:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800342a:	e018      	b.n	800345e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342c:	f7fe fc9c 	bl	8001d68 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d803      	bhi.n	8003444 <HAL_SPI_Transmit+0x26e>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d102      	bne.n	800344a <HAL_SPI_Transmit+0x274>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e02d      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ae      	bne.n	80033c6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fe09 	bl	8004084 <SPI_EndRxTxTransaction>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af02      	add	r7, sp, #8
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	e123      	b.n	800372a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ea:	d112      	bne.n	8003512 <HAL_SPI_Receive+0x50>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2204      	movs	r2, #4
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f912 	bl	8003732 <HAL_SPI_TransmitReceive>
 800350e:	4603      	mov	r3, r0
 8003510:	e10b      	b.n	800372a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003512:	f7fe fc29 	bl	8001d68 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SPI_Receive+0x62>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e100      	b.n	800372a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_SPI_Receive+0x74>
 8003532:	2302      	movs	r3, #2
 8003534:	e0f9      	b.n	800372a <HAL_SPI_Receive+0x268>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2204      	movs	r2, #4
 8003542:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003588:	d908      	bls.n	800359c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e007      	b.n	80035ac <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035b4:	d10f      	bne.n	80035d6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d007      	beq.n	80035f4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035fc:	d875      	bhi.n	80036ea <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035fe:	e037      	b.n	8003670 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d117      	bne.n	800363e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f103 020c 	add.w	r2, r3, #12
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800363c:	e018      	b.n	8003670 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363e:	f7fe fb93 	bl	8001d68 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d803      	bhi.n	8003656 <HAL_SPI_Receive+0x194>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d102      	bne.n	800365c <HAL_SPI_Receive+0x19a>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e05c      	b.n	800372a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1c1      	bne.n	8003600 <HAL_SPI_Receive+0x13e>
 800367c:	e03b      	b.n	80036f6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d115      	bne.n	80036b8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	b292      	uxth	r2, r2
 8003698:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036b6:	e018      	b.n	80036ea <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b8:	f7fe fb56 	bl	8001d68 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d803      	bhi.n	80036d0 <HAL_SPI_Receive+0x20e>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_Receive+0x214>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e01f      	b.n	800372a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1c3      	bne.n	800367e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fc6a 	bl	8003fd4 <SPI_EndRxTransaction>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003728:	2300      	movs	r3, #0
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	@ 0x28
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003744:	f7fe fb10 	bl	8001d68 <HAL_GetTick>
 8003748:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003750:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003760:	7ffb      	ldrb	r3, [r7, #31]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d00c      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x4e>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376c:	d106      	bne.n	800377c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_SPI_TransmitReceive+0x4a>
 8003776:	7ffb      	ldrb	r3, [r7, #31]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d001      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e1f3      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x60>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x60>
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1e8      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_SPI_TransmitReceive+0x72>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e1e1      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d003      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2205      	movs	r2, #5
 80037bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003802:	d802      	bhi.n	800380a <HAL_SPI_TransmitReceive+0xd8>
 8003804:	8abb      	ldrh	r3, [r7, #20]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d908      	bls.n	800381c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	e007      	b.n	800382c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800382a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d007      	beq.n	800384a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003852:	f240 8083 	bls.w	800395c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x132>
 800385e:	8afb      	ldrh	r3, [r7, #22]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d16f      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	e05c      	b.n	8003944 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x19e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x19e>
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d113      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11c      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x1e6>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	b292      	uxth	r2, r2
 80038f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003918:	f7fe fa26 	bl	8001d68 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003924:	429a      	cmp	r2, r3
 8003926:	d80d      	bhi.n	8003944 <HAL_SPI_TransmitReceive+0x212>
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d009      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e111      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19d      	bne.n	800388a <HAL_SPI_TransmitReceive+0x158>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d197      	bne.n	800388a <HAL_SPI_TransmitReceive+0x158>
 800395a:	e0e5      	b.n	8003b28 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_SPI_TransmitReceive+0x23a>
 8003964:	8afb      	ldrh	r3, [r7, #22]
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 80d1 	bne.w	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b01      	cmp	r3, #1
 8003974:	d912      	bls.n	800399c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	1c9a      	adds	r2, r3, #2
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b02      	subs	r3, #2
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800399a:	e0b8      	b.n	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039c2:	e0a4      	b.n	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d134      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02f      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d12c      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d912      	bls.n	8003a12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b02      	subs	r3, #2
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a10:	e012      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d148      	bne.n	8003adc <HAL_SPI_TransmitReceive+0x3aa>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d042      	beq.n	8003adc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d923      	bls.n	8003aaa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b02      	subs	r3, #2
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d81f      	bhi.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	e016      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f103 020c 	add.w	r2, r3, #12
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003adc:	f7fe f944 	bl	8001d68 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d803      	bhi.n	8003af4 <HAL_SPI_TransmitReceive+0x3c2>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af2:	d102      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x3c8>
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e02c      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f af55 	bne.w	80039c4 <HAL_SPI_TransmitReceive+0x292>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f47f af4e 	bne.w	80039c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 faa9 	bl	8004084 <SPI_EndRxTxTransaction>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00e      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    return;
 8003bae:	e0ce      	b.n	8003d4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_SPI_IRQHandler+0x5e>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
    return;
 8003bcc:	e0bf      	b.n	8003d4e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_SPI_IRQHandler+0x7e>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80b0 	beq.w	8003d4e <HAL_SPI_IRQHandler+0x1de>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80aa 	beq.w	8003d4e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d011      	beq.n	8003c34 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c14:	f043 0204 	orr.w	r2, r3, #4
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	e00b      	b.n	8003c4c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	693b      	ldr	r3, [r7, #16]
        return;
 8003c4a:	e080      	b.n	8003d4e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5a:	f043 0201 	orr.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8e:	f043 0208 	orr.w	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d04f      	beq.n	8003d4c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <HAL_SPI_IRQHandler+0x168>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d034      	beq.n	8003d42 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0203 	bic.w	r2, r2, #3
 8003ce6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d011      	beq.n	8003d14 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_SPI_IRQHandler+0x1e4>)
 8003cf6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe f974 	bl	8001fea <HAL_DMA_Abort_IT>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <HAL_SPI_IRQHandler+0x1e4>)
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe f95e 	bl	8001fea <HAL_DMA_Abort_IT>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d38:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003d40:	e003      	b.n	8003d4a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f808 	bl	8003d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d48:	e000      	b.n	8003d4c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003d4a:	bf00      	nop
    return;
 8003d4c:	bf00      	nop
  }
}
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08003d6d 	.word	0x08003d6d

08003d58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff ffe5 	bl	8003d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003da8:	f7fd ffde 	bl	8001d68 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	4413      	add	r3, r2
 8003db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003db8:	f7fd ffd6 	bl	8001d68 <HAL_GetTick>
 8003dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	015b      	lsls	r3, r3, #5
 8003dc4:	0d1b      	lsrs	r3, r3, #20
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	fb02 f303 	mul.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dce:	e054      	b.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d050      	beq.n	8003e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dd8:	f7fd ffc6 	bl	8001d68 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d902      	bls.n	8003dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d13d      	bne.n	8003e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e06:	d111      	bne.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e10:	d004      	beq.n	8003e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d107      	bne.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e34:	d10f      	bne.n	8003e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e017      	b.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d19b      	bne.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000000 	.word	0x20000000

08003ea8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	@ 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eba:	f7fd ff55 	bl	8001d68 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003eca:	f7fd ff4d 	bl	8001d68 <HAL_GetTick>
 8003ece:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	0d1b      	lsrs	r3, r3, #20
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ef0:	e060      	b.n	8003fb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ef8:	d107      	bne.n	8003f0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d050      	beq.n	8003fb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f12:	f7fd ff29 	bl	8001d68 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d902      	bls.n	8003f28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d13d      	bne.n	8003fa4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f40:	d111      	bne.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4a:	d004      	beq.n	8003f56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f54:	d107      	bne.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6e:	d10f      	bne.n	8003f90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e010      	b.n	8003fc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d196      	bne.n	8003ef2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3728      	adds	r7, #40	@ 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000000 	.word	0x20000000

08003fd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe8:	d111      	bne.n	800400e <SPI_EndRxTransaction+0x3a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff2:	d004      	beq.n	8003ffe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffc:	d107      	bne.n	800400e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800400c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	2180      	movs	r1, #128	@ 0x80
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff febd 	bl	8003d98 <SPI_WaitFlagStateUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e023      	b.n	800407c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800403c:	d11d      	bne.n	800407a <SPI_EndRxTransaction+0xa6>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004046:	d004      	beq.n	8004052 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004050:	d113      	bne.n	800407a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ff22 	bl	8003ea8 <SPI_WaitFifoStateUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e000      	b.n	800407c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ff03 	bl	8003ea8 <SPI_WaitFifoStateUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e027      	b.n	8004108 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	2180      	movs	r1, #128	@ 0x80
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff fe68 	bl	8003d98 <SPI_WaitFlagStateUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e014      	b.n	8004108 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fedc 	bl	8003ea8 <SPI_WaitFifoStateUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e000      	b.n	8004108 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e049      	b.n	80041b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fc52 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fd4a 	bl	8004be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e04f      	b.n	8004278 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a23      	ldr	r2, [pc, #140]	@ (8004284 <HAL_TIM_Base_Start_IT+0xc4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0x76>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d018      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0x76>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <HAL_TIM_Base_Start_IT+0xc8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0x76>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1e      	ldr	r2, [pc, #120]	@ (800428c <HAL_TIM_Base_Start_IT+0xcc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0x76>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_TIM_Base_Start_IT+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0x76>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1b      	ldr	r2, [pc, #108]	@ (8004294 <HAL_TIM_Base_Start_IT+0xd4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIM_Base_Start_IT+0x76>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <HAL_TIM_Base_Start_IT+0xd8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d115      	bne.n	8004262 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	4b17      	ldr	r3, [pc, #92]	@ (800429c <HAL_TIM_Base_Start_IT+0xdc>)
 800423e:	4013      	ands	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b06      	cmp	r3, #6
 8004246:	d015      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0xb4>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424e:	d011      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	e008      	b.n	8004274 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e000      	b.n	8004276 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40013400 	.word	0x40013400
 8004298:	40014000 	.word	0x40014000
 800429c:	00010007 	.word	0x00010007

080042a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10f      	bne.n	80042e8 <HAL_TIM_Base_Stop_IT+0x48>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_Base_Stop_IT+0x48>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e049      	b.n	80043a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f841 	bl	80043ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3304      	adds	r3, #4
 800433a:	4619      	mov	r1, r3
 800433c:	4610      	mov	r0, r2
 800433e:	f000 fc53 	bl	8004be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x24>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e03c      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d109      	bne.n	80043fe <HAL_TIM_PWM_Start+0x3e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e02f      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d109      	bne.n	8004418 <HAL_TIM_PWM_Start+0x58>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e022      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d109      	bne.n	8004432 <HAL_TIM_PWM_Start+0x72>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e015      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b10      	cmp	r3, #16
 8004436:	d109      	bne.n	800444c <HAL_TIM_PWM_Start+0x8c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e008      	b.n	800445e <HAL_TIM_PWM_Start+0x9e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e09c      	b.n	80045a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_TIM_PWM_Start+0xb6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004474:	e023      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d104      	bne.n	8004486 <HAL_TIM_PWM_Start+0xc6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004484:	e01b      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d104      	bne.n	8004496 <HAL_TIM_PWM_Start+0xd6>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004494:	e013      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d104      	bne.n	80044a6 <HAL_TIM_PWM_Start+0xe6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044a4:	e00b      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d104      	bne.n	80044b6 <HAL_TIM_PWM_Start+0xf6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b4:	e003      	b.n	80044be <HAL_TIM_PWM_Start+0xfe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 ffa4 	bl	8005414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a35      	ldr	r2, [pc, #212]	@ (80045a8 <HAL_TIM_PWM_Start+0x1e8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a34      	ldr	r2, [pc, #208]	@ (80045ac <HAL_TIM_PWM_Start+0x1ec>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a32      	ldr	r2, [pc, #200]	@ (80045b0 <HAL_TIM_PWM_Start+0x1f0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a31      	ldr	r2, [pc, #196]	@ (80045b4 <HAL_TIM_PWM_Start+0x1f4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_TIM_PWM_Start+0x13e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a2f      	ldr	r2, [pc, #188]	@ (80045b8 <HAL_TIM_PWM_Start+0x1f8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_Start+0x142>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_TIM_PWM_Start+0x144>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004516:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a22      	ldr	r2, [pc, #136]	@ (80045a8 <HAL_TIM_PWM_Start+0x1e8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_TIM_PWM_Start+0x19e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452a:	d018      	beq.n	800455e <HAL_TIM_PWM_Start+0x19e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a22      	ldr	r2, [pc, #136]	@ (80045bc <HAL_TIM_PWM_Start+0x1fc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_TIM_PWM_Start+0x19e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a21      	ldr	r2, [pc, #132]	@ (80045c0 <HAL_TIM_PWM_Start+0x200>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIM_PWM_Start+0x19e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <HAL_TIM_PWM_Start+0x204>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIM_PWM_Start+0x19e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_TIM_PWM_Start+0x1ec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIM_PWM_Start+0x19e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_TIM_PWM_Start+0x1f0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d115      	bne.n	800458a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <HAL_TIM_PWM_Start+0x208>)
 8004566:	4013      	ands	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b06      	cmp	r3, #6
 800456e:	d015      	beq.n	800459c <HAL_TIM_PWM_Start+0x1dc>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004576:	d011      	beq.n	800459c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	e008      	b.n	800459c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0201 	orr.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e000      	b.n	800459e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40013400 	.word	0x40013400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	00010007 	.word	0x00010007

080045cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d020      	beq.n	8004630 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01b      	beq.n	8004630 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0202 	mvn.w	r2, #2
 8004600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fac7 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fab9 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 faca 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d020      	beq.n	800467c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0204 	mvn.w	r2, #4
 800464c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 faa1 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 8004668:	e005      	b.n	8004676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa93 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 faa4 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d020      	beq.n	80046c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01b      	beq.n	80046c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0208 	mvn.w	r2, #8
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2204      	movs	r2, #4
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa7b 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fa6d 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fa7e 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d020      	beq.n	8004714 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01b      	beq.n	8004714 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0210 	mvn.w	r2, #16
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2208      	movs	r2, #8
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa55 	bl	8004baa <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa47 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fa58 	bl	8004bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0201 	mvn.w	r2, #1
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc fa30 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800475e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 ff0f 	bl	8005584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 ff07 	bl	8005598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00c      	beq.n	80047ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fa12 	bl	8004bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0220 	mvn.w	r2, #32
 80047ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fecf 	bl	8005570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0ff      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b14      	cmp	r3, #20
 8004806:	f200 80f0 	bhi.w	80049ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800480a:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004865 	.word	0x08004865
 8004814:	080049eb 	.word	0x080049eb
 8004818:	080049eb 	.word	0x080049eb
 800481c:	080049eb 	.word	0x080049eb
 8004820:	080048a5 	.word	0x080048a5
 8004824:	080049eb 	.word	0x080049eb
 8004828:	080049eb 	.word	0x080049eb
 800482c:	080049eb 	.word	0x080049eb
 8004830:	080048e7 	.word	0x080048e7
 8004834:	080049eb 	.word	0x080049eb
 8004838:	080049eb 	.word	0x080049eb
 800483c:	080049eb 	.word	0x080049eb
 8004840:	08004927 	.word	0x08004927
 8004844:	080049eb 	.word	0x080049eb
 8004848:	080049eb 	.word	0x080049eb
 800484c:	080049eb 	.word	0x080049eb
 8004850:	08004969 	.word	0x08004969
 8004854:	080049eb 	.word	0x080049eb
 8004858:	080049eb 	.word	0x080049eb
 800485c:	080049eb 	.word	0x080049eb
 8004860:	080049a9 	.word	0x080049a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fa62 	bl	8004d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0208 	orr.w	r2, r2, #8
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e0a5      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fad2 	bl	8004e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
      break;
 80048e4:	e084      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fb3b 	bl	8004f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0208 	orr.w	r2, r2, #8
 8004900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69d9      	ldr	r1, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	61da      	str	r2, [r3, #28]
      break;
 8004924:	e064      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fba3 	bl	8005078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e043      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fbec 	bl	800514c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049a6:	e023      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fc30 	bl	8005214 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	021a      	lsls	r2, r3, #8
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049e8:	e002      	b.n	80049f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75fb      	strb	r3, [r7, #23]
      break;
 80049ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e0b6      	b.n	8004b8e <HAL_TIM_ConfigClockSource+0x18a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5c:	d03e      	beq.n	8004adc <HAL_TIM_ConfigClockSource+0xd8>
 8004a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a62:	f200 8087 	bhi.w	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6a:	f000 8086 	beq.w	8004b7a <HAL_TIM_ConfigClockSource+0x176>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a72:	d87f      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a74:	2b70      	cmp	r3, #112	@ 0x70
 8004a76:	d01a      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0xaa>
 8004a78:	2b70      	cmp	r3, #112	@ 0x70
 8004a7a:	d87b      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a7c:	2b60      	cmp	r3, #96	@ 0x60
 8004a7e:	d050      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x11e>
 8004a80:	2b60      	cmp	r3, #96	@ 0x60
 8004a82:	d877      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a84:	2b50      	cmp	r3, #80	@ 0x50
 8004a86:	d03c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xfe>
 8004a88:	2b50      	cmp	r3, #80	@ 0x50
 8004a8a:	d873      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a8c:	2b40      	cmp	r3, #64	@ 0x40
 8004a8e:	d058      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x13e>
 8004a90:	2b40      	cmp	r3, #64	@ 0x40
 8004a92:	d86f      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a94:	2b30      	cmp	r3, #48	@ 0x30
 8004a96:	d064      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15e>
 8004a98:	2b30      	cmp	r3, #48	@ 0x30
 8004a9a:	d86b      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d060      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15e>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d867      	bhi.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d05c      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15e>
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d05a      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0x15e>
 8004aac:	e062      	b.n	8004b74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004abe:	f000 fc89 	bl	80053d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	609a      	str	r2, [r3, #8]
      break;
 8004ada:	e04f      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aec:	f000 fc72 	bl	80053d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004afe:	609a      	str	r2, [r3, #8]
      break;
 8004b00:	e03c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 fbe6 	bl	80052e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2150      	movs	r1, #80	@ 0x50
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc3f 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8004b20:	e02c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f000 fc05 	bl	800533e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2160      	movs	r1, #96	@ 0x60
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fc2f 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8004b40:	e01c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f000 fbc6 	bl	80052e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2140      	movs	r1, #64	@ 0x40
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fc1f 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8004b60:	e00c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f000 fc16 	bl	800539e <TIM_ITRx_SetConfig>
      break;
 8004b72:	e003      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e000      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	@ (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c06:	d00f      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a43      	ldr	r2, [pc, #268]	@ (8004d18 <TIM_Base_SetConfig+0x130>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a42      	ldr	r2, [pc, #264]	@ (8004d1c <TIM_Base_SetConfig+0x134>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d007      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a41      	ldr	r2, [pc, #260]	@ (8004d20 <TIM_Base_SetConfig+0x138>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a40      	ldr	r2, [pc, #256]	@ (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d108      	bne.n	8004c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a35      	ldr	r2, [pc, #212]	@ (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c48:	d01b      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a32      	ldr	r2, [pc, #200]	@ (8004d18 <TIM_Base_SetConfig+0x130>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d017      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a31      	ldr	r2, [pc, #196]	@ (8004d1c <TIM_Base_SetConfig+0x134>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	@ (8004d20 <TIM_Base_SetConfig+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2f      	ldr	r2, [pc, #188]	@ (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d28 <TIM_Base_SetConfig+0x140>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2d      	ldr	r2, [pc, #180]	@ (8004d2c <TIM_Base_SetConfig+0x144>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <TIM_Base_SetConfig+0x148>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d108      	bne.n	8004c94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a16      	ldr	r2, [pc, #88]	@ (8004d14 <TIM_Base_SetConfig+0x12c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00f      	beq.n	8004ce0 <TIM_Base_SetConfig+0xf8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <TIM_Base_SetConfig+0x13c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <TIM_Base_SetConfig+0xf8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <TIM_Base_SetConfig+0x140>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <TIM_Base_SetConfig+0xf8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a16      	ldr	r2, [pc, #88]	@ (8004d2c <TIM_Base_SetConfig+0x144>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0xf8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <TIM_Base_SetConfig+0x148>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d103      	bne.n	8004ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f023 0201 	bic.w	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	611a      	str	r2, [r3, #16]
  }
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0201 	bic.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f023 0302 	bic.w	r3, r3, #2
 8004d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e40 <TIM_OC1_SetConfig+0x10c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00f      	beq.n	8004db4 <TIM_OC1_SetConfig+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a2b      	ldr	r2, [pc, #172]	@ (8004e44 <TIM_OC1_SetConfig+0x110>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <TIM_OC1_SetConfig+0x80>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e48 <TIM_OC1_SetConfig+0x114>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d007      	beq.n	8004db4 <TIM_OC1_SetConfig+0x80>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a29      	ldr	r2, [pc, #164]	@ (8004e4c <TIM_OC1_SetConfig+0x118>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_OC1_SetConfig+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a28      	ldr	r2, [pc, #160]	@ (8004e50 <TIM_OC1_SetConfig+0x11c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10c      	bne.n	8004dce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0308 	bic.w	r3, r3, #8
 8004dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <TIM_OC1_SetConfig+0x10c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_OC1_SetConfig+0xc2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e44 <TIM_OC1_SetConfig+0x110>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_OC1_SetConfig+0xc2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <TIM_OC1_SetConfig+0x114>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC1_SetConfig+0xc2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a18      	ldr	r2, [pc, #96]	@ (8004e4c <TIM_OC1_SetConfig+0x118>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC1_SetConfig+0xc2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <TIM_OC1_SetConfig+0x11c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d111      	bne.n	8004e1a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f023 0210 	bic.w	r2, r3, #16
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0320 	bic.w	r3, r3, #32
 8004ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a28      	ldr	r2, [pc, #160]	@ (8004f54 <TIM_OC2_SetConfig+0x100>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_OC2_SetConfig+0x6c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a27      	ldr	r2, [pc, #156]	@ (8004f58 <TIM_OC2_SetConfig+0x104>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10d      	bne.n	8004edc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a1d      	ldr	r2, [pc, #116]	@ (8004f54 <TIM_OC2_SetConfig+0x100>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00f      	beq.n	8004f04 <TIM_OC2_SetConfig+0xb0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f58 <TIM_OC2_SetConfig+0x104>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_OC2_SetConfig+0xb0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	@ (8004f5c <TIM_OC2_SetConfig+0x108>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_OC2_SetConfig+0xb0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f60 <TIM_OC2_SetConfig+0x10c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_OC2_SetConfig+0xb0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <TIM_OC2_SetConfig+0x110>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d113      	bne.n	8004f2c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800

08004f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <TIM_OC3_SetConfig+0xfc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC3_SetConfig+0x6a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a26      	ldr	r2, [pc, #152]	@ (8005068 <TIM_OC3_SetConfig+0x100>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10d      	bne.n	8004fee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8005064 <TIM_OC3_SetConfig+0xfc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00f      	beq.n	8005016 <TIM_OC3_SetConfig+0xae>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8005068 <TIM_OC3_SetConfig+0x100>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <TIM_OC3_SetConfig+0xae>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <TIM_OC3_SetConfig+0x104>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_OC3_SetConfig+0xae>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <TIM_OC3_SetConfig+0x108>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC3_SetConfig+0xae>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a18      	ldr	r2, [pc, #96]	@ (8005074 <TIM_OC3_SetConfig+0x10c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800

08005078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	031b      	lsls	r3, r3, #12
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <TIM_OC4_SetConfig+0xc0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00f      	beq.n	80050fc <TIM_OC4_SetConfig+0x84>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a17      	ldr	r2, [pc, #92]	@ (800513c <TIM_OC4_SetConfig+0xc4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_OC4_SetConfig+0x84>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <TIM_OC4_SetConfig+0xc8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_OC4_SetConfig+0x84>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <TIM_OC4_SetConfig+0xcc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC4_SetConfig+0x84>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a14      	ldr	r2, [pc, #80]	@ (8005148 <TIM_OC4_SetConfig+0xd0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40013400 	.word	0x40013400
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800

0800514c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005190:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a17      	ldr	r2, [pc, #92]	@ (8005200 <TIM_OC5_SetConfig+0xb4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00f      	beq.n	80051c6 <TIM_OC5_SetConfig+0x7a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a16      	ldr	r2, [pc, #88]	@ (8005204 <TIM_OC5_SetConfig+0xb8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_OC5_SetConfig+0x7a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a15      	ldr	r2, [pc, #84]	@ (8005208 <TIM_OC5_SetConfig+0xbc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d007      	beq.n	80051c6 <TIM_OC5_SetConfig+0x7a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a14      	ldr	r2, [pc, #80]	@ (800520c <TIM_OC5_SetConfig+0xc0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d003      	beq.n	80051c6 <TIM_OC5_SetConfig+0x7a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a13      	ldr	r2, [pc, #76]	@ (8005210 <TIM_OC5_SetConfig+0xc4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d109      	bne.n	80051da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800

08005214 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800525a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	051b      	lsls	r3, r3, #20
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <TIM_OC6_SetConfig+0xb8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00f      	beq.n	8005290 <TIM_OC6_SetConfig+0x7c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a17      	ldr	r2, [pc, #92]	@ (80052d0 <TIM_OC6_SetConfig+0xbc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_OC6_SetConfig+0x7c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <TIM_OC6_SetConfig+0xc0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_OC6_SetConfig+0x7c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <TIM_OC6_SetConfig+0xc4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC6_SetConfig+0x7c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a14      	ldr	r2, [pc, #80]	@ (80052dc <TIM_OC6_SetConfig+0xc8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d109      	bne.n	80052a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005296:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	029b      	lsls	r3, r3, #10
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40013400 	.word	0x40013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800

080052e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f023 0201 	bic.w	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800530a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 030a 	bic.w	r3, r3, #10
 800531c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533e:	b480      	push	{r7}
 8005340:	b087      	sub	sp, #28
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	f023 0210 	bic.w	r2, r3, #16
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	031b      	lsls	r3, r3, #12
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800537a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539e:	b480      	push	{r7}
 80053a0:	b085      	sub	sp, #20
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f043 0307 	orr.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	021a      	lsls	r2, r3, #8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2201      	movs	r2, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1a      	ldr	r2, [r3, #32]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005474:	2302      	movs	r3, #2
 8005476:	e068      	b.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2d      	ldr	r2, [pc, #180]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01d      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ea:	d018      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a13      	ldr	r2, [pc, #76]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a14      	ldr	r2, [pc, #80]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10c      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40013400 	.word	0x40013400
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40014000 	.word	0x40014000

08005570 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <memset>:
 80055ac:	4402      	add	r2, r0
 80055ae:	4603      	mov	r3, r0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d100      	bne.n	80055b6 <memset+0xa>
 80055b4:	4770      	bx	lr
 80055b6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ba:	e7f9      	b.n	80055b0 <memset+0x4>

080055bc <__libc_init_array>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4d0d      	ldr	r5, [pc, #52]	@ (80055f4 <__libc_init_array+0x38>)
 80055c0:	4c0d      	ldr	r4, [pc, #52]	@ (80055f8 <__libc_init_array+0x3c>)
 80055c2:	1b64      	subs	r4, r4, r5
 80055c4:	10a4      	asrs	r4, r4, #2
 80055c6:	2600      	movs	r6, #0
 80055c8:	42a6      	cmp	r6, r4
 80055ca:	d109      	bne.n	80055e0 <__libc_init_array+0x24>
 80055cc:	4d0b      	ldr	r5, [pc, #44]	@ (80055fc <__libc_init_array+0x40>)
 80055ce:	4c0c      	ldr	r4, [pc, #48]	@ (8005600 <__libc_init_array+0x44>)
 80055d0:	f000 f826 	bl	8005620 <_init>
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	2600      	movs	r6, #0
 80055da:	42a6      	cmp	r6, r4
 80055dc:	d105      	bne.n	80055ea <__libc_init_array+0x2e>
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e4:	4798      	blx	r3
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7ee      	b.n	80055c8 <__libc_init_array+0xc>
 80055ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ee:	4798      	blx	r3
 80055f0:	3601      	adds	r6, #1
 80055f2:	e7f2      	b.n	80055da <__libc_init_array+0x1e>
 80055f4:	08005678 	.word	0x08005678
 80055f8:	08005678 	.word	0x08005678
 80055fc:	08005678 	.word	0x08005678
 8005600:	0800567c 	.word	0x0800567c

08005604 <memcpy>:
 8005604:	440a      	add	r2, r1
 8005606:	4291      	cmp	r1, r2
 8005608:	f100 33ff 	add.w	r3, r0, #4294967295
 800560c:	d100      	bne.n	8005610 <memcpy+0xc>
 800560e:	4770      	bx	lr
 8005610:	b510      	push	{r4, lr}
 8005612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800561a:	4291      	cmp	r1, r2
 800561c:	d1f9      	bne.n	8005612 <memcpy+0xe>
 800561e:	bd10      	pop	{r4, pc}

08005620 <_init>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

0800562c <_fini>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr
