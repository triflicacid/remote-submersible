
integrates-off-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800766c  0800766c  0000866c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076e4  080076e4  00009028  2**0
                  CONTENTS
  4 .ARM          00000008  080076e4  080076e4  000086e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076ec  080076ec  00009028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076ec  080076ec  000086ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076f0  080076f0  000086f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080076f4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000028  0800771c  00009028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800771c  00009308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bd6  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f3  00000000  00000000  00020c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00024628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115f  00000000  00000000  00025cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029caf  00000000  00000000  00026e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a76a  00000000  00000000  00050b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038f6  00000000  00000000  0006b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016eb66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ffc  00000000  00000000  0016ebac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00174ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007654 	.word	0x08007654

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08007654 	.word	0x08007654

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b96a 	b.w	8000d60 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	9d08      	ldr	r5, [sp, #32]
 8000aaa:	460c      	mov	r4, r1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d14e      	bne.n	8000b4e <__udivmoddi4+0xaa>
 8000ab0:	4694      	mov	ip, r2
 8000ab2:	458c      	cmp	ip, r1
 8000ab4:	4686      	mov	lr, r0
 8000ab6:	fab2 f282 	clz	r2, r2
 8000aba:	d962      	bls.n	8000b82 <__udivmoddi4+0xde>
 8000abc:	b14a      	cbz	r2, 8000ad2 <__udivmoddi4+0x2e>
 8000abe:	f1c2 0320 	rsb	r3, r2, #32
 8000ac2:	4091      	lsls	r1, r2
 8000ac4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	4319      	orrs	r1, r3
 8000ace:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ad2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad6:	fa1f f68c 	uxth.w	r6, ip
 8000ada:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ade:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb04 f106 	mul.w	r1, r4, r6
 8000aee:	4299      	cmp	r1, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x64>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000afa:	f080 8112 	bcs.w	8000d22 <__udivmoddi4+0x27e>
 8000afe:	4299      	cmp	r1, r3
 8000b00:	f240 810f 	bls.w	8000d22 <__udivmoddi4+0x27e>
 8000b04:	3c02      	subs	r4, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b12:	fb07 1110 	mls	r1, r7, r0, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb00 f606 	mul.w	r6, r0, r6
 8000b1e:	429e      	cmp	r6, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x94>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2a:	f080 80fc 	bcs.w	8000d26 <__udivmoddi4+0x282>
 8000b2e:	429e      	cmp	r6, r3
 8000b30:	f240 80f9 	bls.w	8000d26 <__udivmoddi4+0x282>
 8000b34:	4463      	add	r3, ip
 8000b36:	3802      	subs	r0, #2
 8000b38:	1b9b      	subs	r3, r3, r6
 8000b3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b3e:	2100      	movs	r1, #0
 8000b40:	b11d      	cbz	r5, 8000b4a <__udivmoddi4+0xa6>
 8000b42:	40d3      	lsrs	r3, r2
 8000b44:	2200      	movs	r2, #0
 8000b46:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d905      	bls.n	8000b5e <__udivmoddi4+0xba>
 8000b52:	b10d      	cbz	r5, 8000b58 <__udivmoddi4+0xb4>
 8000b54:	e9c5 0100 	strd	r0, r1, [r5]
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	e7f5      	b.n	8000b4a <__udivmoddi4+0xa6>
 8000b5e:	fab3 f183 	clz	r1, r3
 8000b62:	2900      	cmp	r1, #0
 8000b64:	d146      	bne.n	8000bf4 <__udivmoddi4+0x150>
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xcc>
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	f0c0 80f0 	bcc.w	8000d50 <__udivmoddi4+0x2ac>
 8000b70:	1a86      	subs	r6, r0, r2
 8000b72:	eb64 0303 	sbc.w	r3, r4, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d0e6      	beq.n	8000b4a <__udivmoddi4+0xa6>
 8000b7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b80:	e7e3      	b.n	8000b4a <__udivmoddi4+0xa6>
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	f040 8090 	bne.w	8000ca8 <__udivmoddi4+0x204>
 8000b88:	eba1 040c 	sub.w	r4, r1, ip
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa1f f78c 	uxth.w	r7, ip
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000ba2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba6:	fb07 f006 	mul.w	r0, r7, r6
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x11c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x11a>
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2b4>
 8000bbe:	4626      	mov	r6, r4
 8000bc0:	1a1c      	subs	r4, r3, r0
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bca:	fb08 4410 	mls	r4, r8, r0, r4
 8000bce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd2:	fb00 f707 	mul.w	r7, r0, r7
 8000bd6:	429f      	cmp	r7, r3
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0x148>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000be2:	d202      	bcs.n	8000bea <__udivmoddi4+0x146>
 8000be4:	429f      	cmp	r7, r3
 8000be6:	f200 80b0 	bhi.w	8000d4a <__udivmoddi4+0x2a6>
 8000bea:	4620      	mov	r0, r4
 8000bec:	1bdb      	subs	r3, r3, r7
 8000bee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bf2:	e7a5      	b.n	8000b40 <__udivmoddi4+0x9c>
 8000bf4:	f1c1 0620 	rsb	r6, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c04:	fa04 f301 	lsl.w	r3, r4, r1
 8000c08:	ea43 030c 	orr.w	r3, r3, ip
 8000c0c:	40f4      	lsrs	r4, r6
 8000c0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c12:	0c38      	lsrs	r0, r7, #16
 8000c14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c18:	fbb4 fef0 	udiv	lr, r4, r0
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fb00 441e 	mls	r4, r0, lr, r4
 8000c24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c28:	fb0e f90c 	mul.w	r9, lr, ip
 8000c2c:	45a1      	cmp	r9, r4
 8000c2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x1a6>
 8000c34:	193c      	adds	r4, r7, r4
 8000c36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c3a:	f080 8084 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000c3e:	45a1      	cmp	r9, r4
 8000c40:	f240 8081 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000c44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	eba4 0409 	sub.w	r4, r4, r9
 8000c4e:	fa1f f983 	uxth.w	r9, r3
 8000c52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c56:	fb00 4413 	mls	r4, r0, r3, r4
 8000c5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x1d2>
 8000c66:	193c      	adds	r4, r7, r4
 8000c68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c6c:	d267      	bcs.n	8000d3e <__udivmoddi4+0x29a>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	d965      	bls.n	8000d3e <__udivmoddi4+0x29a>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	443c      	add	r4, r7
 8000c76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	429c      	cmp	r4, r3
 8000c84:	46ce      	mov	lr, r9
 8000c86:	469c      	mov	ip, r3
 8000c88:	d351      	bcc.n	8000d2e <__udivmoddi4+0x28a>
 8000c8a:	d04e      	beq.n	8000d2a <__udivmoddi4+0x286>
 8000c8c:	b155      	cbz	r5, 8000ca4 <__udivmoddi4+0x200>
 8000c8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c92:	eb64 040c 	sbc.w	r4, r4, ip
 8000c96:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9a:	40cb      	lsrs	r3, r1
 8000c9c:	431e      	orrs	r6, r3
 8000c9e:	40cc      	lsrs	r4, r1
 8000ca0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	e750      	b.n	8000b4a <__udivmoddi4+0xa6>
 8000ca8:	f1c2 0320 	rsb	r3, r2, #32
 8000cac:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	430c      	orrs	r4, r1
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd0:	0c23      	lsrs	r3, r4, #16
 8000cd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd6:	fb00 f107 	mul.w	r1, r0, r7
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x24c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ce6:	d22c      	bcs.n	8000d42 <__udivmoddi4+0x29e>
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d92a      	bls.n	8000d42 <__udivmoddi4+0x29e>
 8000cec:	3802      	subs	r0, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb01 f307 	mul.w	r3, r1, r7
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x276>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d10:	d213      	bcs.n	8000d3a <__udivmoddi4+0x296>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d911      	bls.n	8000d3a <__udivmoddi4+0x296>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4464      	add	r4, ip
 8000d1a:	1ae4      	subs	r4, r4, r3
 8000d1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d20:	e739      	b.n	8000b96 <__udivmoddi4+0xf2>
 8000d22:	4604      	mov	r4, r0
 8000d24:	e6f0      	b.n	8000b08 <__udivmoddi4+0x64>
 8000d26:	4608      	mov	r0, r1
 8000d28:	e706      	b.n	8000b38 <__udivmoddi4+0x94>
 8000d2a:	45c8      	cmp	r8, r9
 8000d2c:	d2ae      	bcs.n	8000c8c <__udivmoddi4+0x1e8>
 8000d2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d36:	3801      	subs	r0, #1
 8000d38:	e7a8      	b.n	8000c8c <__udivmoddi4+0x1e8>
 8000d3a:	4631      	mov	r1, r6
 8000d3c:	e7ed      	b.n	8000d1a <__udivmoddi4+0x276>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	e799      	b.n	8000c76 <__udivmoddi4+0x1d2>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e7d4      	b.n	8000cf0 <__udivmoddi4+0x24c>
 8000d46:	46d6      	mov	lr, sl
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1a6>
 8000d4a:	4463      	add	r3, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	e74d      	b.n	8000bec <__udivmoddi4+0x148>
 8000d50:	4606      	mov	r6, r0
 8000d52:	4623      	mov	r3, r4
 8000d54:	4608      	mov	r0, r1
 8000d56:	e70f      	b.n	8000b78 <__udivmoddi4+0xd4>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	e730      	b.n	8000bc0 <__udivmoddi4+0x11c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <display_init>:
// a = bit 0, g = bit 6
static uint8_t segment_mask[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
static uint8_t segment_mask_flipped[] = { 0x7E, 0x30, /**/ 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };
static uint8_t dp_mask = 1 << 7;

void display_init(display_t *display, const mcp_t *units[], uint8_t digit_count, bool inverted) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	461a      	mov	r2, r3
 8000d72:	460b      	mov	r3, r1
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	4613      	mov	r3, r2
 8000d78:	71bb      	strb	r3, [r7, #6]
  display->invert = inverted;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	79ba      	ldrb	r2, [r7, #6]
 8000d7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  display->digit_count = digit_count;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]
  uint8_t unit_count = (digit_count + 1) / 2;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	0fda      	lsrs	r2, r3, #31
 8000d90:	4413      	add	r3, r2
 8000d92:	105b      	asrs	r3, r3, #1
 8000d94:	75bb      	strb	r3, [r7, #22]
  uint8_t initial = inverted ? 0xff : 0x00;
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <display_init+0x3c>
 8000d9c:	23ff      	movs	r3, #255	@ 0xff
 8000d9e:	e000      	b.n	8000da2 <display_init+0x3e>
 8000da0:	2300      	movs	r3, #0
 8000da2:	757b      	strb	r3, [r7, #21]


  for (uint8_t i = 0; i < unit_count; ++i) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	75fb      	strb	r3, [r7, #23]
 8000da8:	e033      	b.n	8000e12 <display_init+0xae>
    display->units[i] = units[i];
 8000daa:	7dfb      	ldrb	r3, [r7, #23]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	4413      	add	r3, r2
 8000db2:	7dfa      	ldrb	r2, [r7, #23]
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    // set both ports to output mode and reset states
    mcp_write(units[i], MCP_IODIRA, 0x00);
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 ff28 	bl	8001c20 <mcp_write>
    mcp_write(units[i], MCP_GPIOA, initial);
 8000dd0:	7dfb      	ldrb	r3, [r7, #23]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	7d7a      	ldrb	r2, [r7, #21]
 8000ddc:	2112      	movs	r1, #18
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 ff1e 	bl	8001c20 <mcp_write>

    mcp_write(units[i], MCP_IODIRB, 0x00);
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	68ba      	ldr	r2, [r7, #8]
 8000dea:	4413      	add	r3, r2
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2200      	movs	r2, #0
 8000df0:	2101      	movs	r1, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 ff14 	bl	8001c20 <mcp_write>
    mcp_write(units[i], MCP_GPIOB, initial);
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	7d7a      	ldrb	r2, [r7, #21]
 8000e04:	2113      	movs	r1, #19
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 ff0a 	bl	8001c20 <mcp_write>
  for (uint8_t i = 0; i < unit_count; ++i) {
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
 8000e12:	7dfa      	ldrb	r2, [r7, #23]
 8000e14:	7dbb      	ldrb	r3, [r7, #22]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3c7      	bcc.n	8000daa <display_init+0x46>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <display_write_manual>:

void display_write_manual(display_t *display, uint8_t segment, uint8_t value) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
 8000e30:	4613      	mov	r3, r2
 8000e32:	70bb      	strb	r3, [r7, #2]
  if (segment >= display->digit_count) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d21e      	bcs.n	8000e7e <display_write_manual+0x5a>
    return;
  }

  // get unit location and determine port (for register address)
  mcp_t *unit = display->units[display->digit_count / 2 - 1 - segment / 2];
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	0852      	lsrs	r2, r2, #1
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	1a9a      	subs	r2, r3, r2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	60fb      	str	r3, [r7, #12]
  uint8_t address = segment % 2 ? MCP_GPIOA : MCP_GPIOB;
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <display_write_manual+0x48>
 8000e68:	2312      	movs	r3, #18
 8000e6a:	e000      	b.n	8000e6e <display_write_manual+0x4a>
 8000e6c:	2313      	movs	r3, #19
 8000e6e:	72fb      	strb	r3, [r7, #11]

  mcp_write(unit, address, value);
 8000e70:	78ba      	ldrb	r2, [r7, #2]
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	4619      	mov	r1, r3
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f000 fed2 	bl	8001c20 <mcp_write>
 8000e7c:	e000      	b.n	8000e80 <display_write_manual+0x5c>
    return;
 8000e7e:	bf00      	nop
}
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <display_write>:

void display_write(display_t *display, uint64_t value, uint8_t decimal_points) {
 8000e86:	b590      	push	{r4, r7, lr}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	e9c7 2300 	strd	r2, r3, [r7]
  // iterate, extracting and writing digits
  for (uint16_t i = 0, k = 1; i < display->digit_count; i++, k <<= 1) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	82fb      	strh	r3, [r7, #22]
 8000e96:	2301      	movs	r3, #1
 8000e98:	82bb      	strh	r3, [r7, #20]
 8000e9a:	e02a      	b.n	8000ef2 <display_write+0x6c>
    display_write_digit(display, i, value % 10, decimal_points & k);
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
 8000e9e:	b2dc      	uxtb	r4, r3
 8000ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ea4:	f04f 020a 	mov.w	r2, #10
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	f7ff fde2 	bl	8000a74 <__aeabi_uldivmod>
 8000eb0:	b2d1      	uxtb	r1, r2
 8000eb2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000eb6:	8abb      	ldrh	r3, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf14      	ite	ne
 8000ebe:	2301      	movne	r3, #1
 8000ec0:	2300      	moveq	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 f81f 	bl	8000f0c <display_write_digit>
    value /= 10;
 8000ece:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ed2:	f04f 020a 	mov.w	r2, #10
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	f7ff fdcb 	bl	8000a74 <__aeabi_uldivmod>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	e9c7 2300 	strd	r2, r3, [r7]
  for (uint16_t i = 0, k = 1; i < display->digit_count; i++, k <<= 1) {
 8000ee6:	8afb      	ldrh	r3, [r7, #22]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	82fb      	strh	r3, [r7, #22]
 8000eec:	8abb      	ldrh	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	82bb      	strh	r3, [r7, #20]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d3cd      	bcc.n	8000e9c <display_write+0x16>
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
	...

08000f0c <display_write_digit>:

void display_write_digit(display_t *display, uint8_t segment, uint8_t value, bool decimal_point) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	70fb      	strb	r3, [r7, #3]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70bb      	strb	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	707b      	strb	r3, [r7, #1]
  if (value > 9) {
 8000f26:	78bb      	ldrb	r3, [r7, #2]
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	d81b      	bhi.n	8000f64 <display_write_digit+0x58>
    return;
  }

  // calculate register data 
  uint8_t data = segment_mask[value];
 8000f2c:	78bb      	ldrb	r3, [r7, #2]
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <display_write_digit+0x60>)
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	73fb      	strb	r3, [r7, #15]

  if (decimal_point) {
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <display_write_digit+0x38>
    data |= dp_mask;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <display_write_digit+0x64>)
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	73fb      	strb	r3, [r7, #15]
  }

  display_write_manual(display, segment, display->invert ? ~data : data);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <display_write_digit+0x4a>
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	e000      	b.n	8000f58 <display_write_digit+0x4c>
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	78f9      	ldrb	r1, [r7, #3]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff61 	bl	8000e24 <display_write_manual>
 8000f62:	e000      	b.n	8000f66 <display_write_digit+0x5a>
    return;
 8000f64:	bf00      	nop
}
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	2000000a 	.word	0x2000000a
 8000f74:	00000000 	.word	0x00000000

08000f78 <action_propeller>:
#include "../Lib/util.h"

// record ballast state (NOT tri-state switch state)
tristate_t ballast_state = TRISTATE_UNDEF;

void action_propeller(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af02      	add	r7, sp, #8
  // convert raw ADC values into range
  propeller_data data;
  data.x = map_range(g_joystick_data[0], JOYSTICK_X_MIN, JOYSTICK_X_MAX, 0, 1);
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <action_propeller+0x80>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8000fe8 <action_propeller+0x70>
 8000f88:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8000ff0 <action_propeller+0x78>
 8000f8c:	f640 321a 	movw	r2, #2842	@ 0xb1a
 8000f90:	f240 3153 	movw	r1, #851	@ 0x353
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 ff2d 	bl	8001df4 <map_range>
 8000f9a:	eeb0 7a40 	vmov.f32	s14, s0
 8000f9e:	eef0 7a60 	vmov.f32	s15, s1
 8000fa2:	ed87 7b00 	vstr	d7, [r7]
  data.y = map_range(g_joystick_data[1], JOYSTICK_Y_MIN, JOYSTICK_Y_MAX, 0, 1);
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <action_propeller+0x80>)
 8000fa8:	885b      	ldrh	r3, [r3, #2]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8000fe8 <action_propeller+0x70>
 8000fb0:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 8000ff0 <action_propeller+0x78>
 8000fb4:	f640 322e 	movw	r2, #2862	@ 0xb2e
 8000fb8:	f240 31ab 	movw	r1, #939	@ 0x3ab
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 ff19 	bl	8001df4 <map_range>
 8000fc2:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc6:	eef0 7a60 	vmov.f32	s15, s1
 8000fca:	ed87 7b02 	vstr	d7, [r7, #8]

  transmit(&g_lora, OP_PROPELLER, RADIO_ON_BOARD_IDENTIFIER, &data, sizeof(data));
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	9200      	str	r2, [sp, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <action_propeller+0x84>)
 8000fda:	f000 fb89 	bl	80016f0 <transmit>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	3ff00000 	.word	0x3ff00000
	...
 8000ff8:	200000c0 	.word	0x200000c0
 8000ffc:	20000058 	.word	0x20000058

08001000 <action_ballast>:

void action_ballast(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af02      	add	r7, sp, #8
  // read which pin is active (position of switch)
  tristate_t position = read_tristate_pins(&pin_tristate_down, &pin_tristate_up);
 8001006:	492e      	ldr	r1, [pc, #184]	@ (80010c0 <action_ballast+0xc0>)
 8001008:	482e      	ldr	r0, [pc, #184]	@ (80010c4 <action_ballast+0xc4>)
 800100a:	f000 fed8 	bl	8001dbe <read_tristate_pins>
 800100e:	4603      	mov	r3, r0
 8001010:	71bb      	strb	r3, [r7, #6]

  // calculate new ballast position
  tristate_t new_state = ballast_state;
 8001012:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <action_ballast+0xc8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	71fb      	strb	r3, [r7, #7]

  switch (ballast_state) {
 8001018:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <action_ballast+0xc8>)
 800101a:	f993 3000 	ldrsb.w	r3, [r3]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d015      	beq.n	800104e <action_ballast+0x4e>
 8001022:	2b01      	cmp	r3, #1
 8001024:	dc20      	bgt.n	8001068 <action_ballast+0x68>
 8001026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102a:	d002      	beq.n	8001032 <action_ballast+0x32>
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <action_ballast+0x40>
 8001030:	e01a      	b.n	8001068 <action_ballast+0x68>
    case TRISTATE_FALSE:
      if (position == TRISTATE_TRUE) {
 8001032:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d111      	bne.n	800105e <action_ballast+0x5e>
        new_state = TRISTATE_UNDEF;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]
      }
      break;
 800103e:	e00e      	b.n	800105e <action_ballast+0x5e>
    case TRISTATE_UNDEF:
      if (position != TRISTATE_UNDEF) {
 8001040:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00c      	beq.n	8001062 <action_ballast+0x62>
        new_state = position;
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	71fb      	strb	r3, [r7, #7]
      }
      break;
 800104c:	e009      	b.n	8001062 <action_ballast+0x62>
    case TRISTATE_TRUE:
      if (position == TRISTATE_FALSE) {
 800104e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001056:	d106      	bne.n	8001066 <action_ballast+0x66>
        new_state = TRISTATE_UNDEF;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
      }
      break;
 800105c:	e003      	b.n	8001066 <action_ballast+0x66>
      break;
 800105e:	bf00      	nop
 8001060:	e002      	b.n	8001068 <action_ballast+0x68>
      break;
 8001062:	bf00      	nop
 8001064:	e000      	b.n	8001068 <action_ballast+0x68>
      break;
 8001066:	bf00      	nop
  }

  // exit if there is no change
  if (new_state == ballast_state) {
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <action_ballast+0xc8>)
 800106a:	f993 3000 	ldrsb.w	r3, [r3]
 800106e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001072:	429a      	cmp	r2, r3
 8001074:	d01f      	beq.n	80010b6 <action_ballast+0xb6>
    return;
  }

  // update state
  ballast_state = new_state;
 8001076:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <action_ballast+0xc8>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	7013      	strb	r3, [r2, #0]

  // create payload
  ballast_data data = { ballast_state };
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <action_ballast+0xc8>)
 800107e:	f993 3000 	ldrsb.w	r3, [r3]
 8001082:	713b      	strb	r3, [r7, #4]

  // record direction
  set_vert_dir(data.mode);
 8001084:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8b9 	bl	8001200 <set_vert_dir>

  // start or stop depth timer if hovering
  if (data.mode == TRISTATE_UNDEF) {
 800108e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <action_ballast+0x9e>
    HAL_TIM_Base_Stop_IT(&TIMER_DEPTH_HANDLE);
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <action_ballast+0xcc>)
 8001098:	f006 f806 	bl	80070a8 <HAL_TIM_Base_Stop_IT>
 800109c:	e002      	b.n	80010a4 <action_ballast+0xa4>
  } else {
    HAL_TIM_Base_Start_IT(&TIMER_DEPTH_HANDLE);
 800109e:	480b      	ldr	r0, [pc, #44]	@ (80010cc <action_ballast+0xcc>)
 80010a0:	f005 ff92 	bl	8006fc8 <HAL_TIM_Base_Start_IT>
  }

  transmit(&g_lora, OP_BALLAST, RADIO_ON_BOARD_IDENTIFIER, &data, sizeof(data));
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2201      	movs	r2, #1
 80010a8:	9200      	str	r2, [sp, #0]
 80010aa:	2202      	movs	r2, #2
 80010ac:	2105      	movs	r1, #5
 80010ae:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <action_ballast+0xd0>)
 80010b0:	f000 fb1e 	bl	80016f0 <transmit>
 80010b4:	e000      	b.n	80010b8 <action_ballast+0xb8>
    return;
 80010b6:	bf00      	nop
}
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	08007694 	.word	0x08007694
 80010c4:	0800769c 	.word	0x0800769c
 80010c8:	20000044 	.word	0x20000044
 80010cc:	2000026c 	.word	0x2000026c
 80010d0:	20000058 	.word	0x20000058

080010d4 <action_send_code>:

void action_send_code(void) {
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
  // create payload to contain our stored code
  code_data data = { fetch_code() };
 80010da:	f000 fdcd 	bl	8001c78 <fetch_code>
 80010de:	4603      	mov	r3, r0
 80010e0:	607b      	str	r3, [r7, #4]
  transmit(&g_lora, OP_SEND_CODE, RADIO_ON_BOARD_IDENTIFIER, &data, sizeof(data));
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2204      	movs	r2, #4
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	2110      	movs	r1, #16
 80010ec:	4808      	ldr	r0, [pc, #32]	@ (8001110 <action_send_code+0x3c>)
 80010ee:	f000 faff 	bl	80016f0 <transmit>

  display_write(&g_display, data.code, 0x0);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	461c      	mov	r4, r3
 80010f8:	4615      	mov	r5, r2
 80010fa:	2300      	movs	r3, #0
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	4622      	mov	r2, r4
 8001100:	462b      	mov	r3, r5
 8001102:	4804      	ldr	r0, [pc, #16]	@ (8001114 <action_send_code+0x40>)
 8001104:	f7ff febf 	bl	8000e86 <display_write>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	20000058 	.word	0x20000058
 8001114:	20000098 	.word	0x20000098

08001118 <action_request_code>:

void action_request_code(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  transmit_opcode(&g_lora, OP_REQUEST_CODE, RADIO_ON_BOARD_IDENTIFIER);
 800111c:	2202      	movs	r2, #2
 800111e:	2111      	movs	r1, #17
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <action_request_code+0x14>)
 8001122:	f000 fac3 	bl	80016ac <transmit_opcode>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000058 	.word	0x20000058

08001130 <action_release_pod>:

void action_release_pod(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  transmit_opcode(&g_lora, OP_RELEASE_POD, RADIO_ON_BOARD_IDENTIFIER);
 8001134:	2202      	movs	r2, #2
 8001136:	2120      	movs	r1, #32
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <action_release_pod+0x14>)
 800113a:	f000 fab7 	bl	80016ac <transmit_opcode>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000058 	.word	0x20000058

08001148 <recv_send_code>:

void recv_send_code(const payload_header *hdr, const code_data *data) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  display_write(&g_display, data->code, 0x0);
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	6809      	ldr	r1, [r1, #0]
 8001156:	2000      	movs	r0, #0
 8001158:	460a      	mov	r2, r1
 800115a:	4603      	mov	r3, r0
 800115c:	2100      	movs	r1, #0
 800115e:	9100      	str	r1, [sp, #0]
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <recv_send_code+0x28>)
 8001162:	f7ff fe90 	bl	8000e86 <display_write>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000098 	.word	0x20000098

08001174 <action_display_movement_tick>:
  // display depth in form `X.XX`
  display_write(&g_display, estimate_depth() * 100, 0x4);
}
#endif

void action_display_movement_tick(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  // tick movement counter
  counter_tick(&g_movement_counter);
 8001178:	4802      	ldr	r0, [pc, #8]	@ (8001184 <action_display_movement_tick+0x10>)
 800117a:	f000 fb04 	bl	8001786 <counter_tick>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000c8 	.word	0x200000c8

08001188 <calc_delta>:

// estimated current depth (m)
static volatile double _depth = 0;

// estimate depth change given time in this state
static double calc_delta(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  // TODO improve? is SUVAT good enought?
  // s = 1/2 * a * t^2
  return 0.5 * _time * _time * PLATFORM_ACCELERATION;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <calc_delta+0x58>)
 800118e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <calc_delta+0x5c>)
 8001198:	f7ff f9d2 	bl	8000540 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <calc_delta+0x58>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f9c9 	bl	8000540 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	a308      	add	r3, pc, #32	@ (adr r3, 80011d8 <calc_delta+0x50>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f9c0 	bl	8000540 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80011c8:	eeb0 0a47 	vmov.f32	s0, s14
 80011cc:	eef0 0a67 	vmov.f32	s1, s15
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	2b020c4a 	.word	0x2b020c4a
 80011dc:	3f991687 	.word	0x3f991687
 80011e0:	20000048 	.word	0x20000048
 80011e4:	3fe00000 	.word	0x3fe00000

080011e8 <get_vert_dir>:

int8_t get_vert_dir(void) {
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return _dir;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <get_vert_dir+0x14>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b25b      	sxtb	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	20000045 	.word	0x20000045

08001200 <set_vert_dir>:

void set_vert_dir(int8_t dir) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  // apply delta to depth
  _depth = estimate_depth();
 800120a:	f000 f813 	bl	8001234 <estimate_depth>
 800120e:	eeb0 7a40 	vmov.f32	s14, s0
 8001212:	eef0 7a60 	vmov.f32	s15, s1
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <set_vert_dir+0x2c>)
 8001218:	ed83 7b00 	vstr	d7, [r3]

  // change direction
  _dir = dir;
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <set_vert_dir+0x30>)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	7013      	strb	r3, [r2, #0]
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000050 	.word	0x20000050
 8001230:	20000045 	.word	0x20000045

08001234 <estimate_depth>:

double estimate_depth(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  // mid=hover, so delta makes no difference
  if (_dir == TRISTATE_UNDEF) {
 800123a:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <estimate_depth+0x84>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d103      	bne.n	800124c <estimate_depth+0x18>
    return _depth;
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <estimate_depth+0x88>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	e02c      	b.n	80012a6 <estimate_depth+0x72>
  }

  // calculate depth change due to `_dir` for `_time`
  double delta = calc_delta();
 800124c:	f7ff ff9c 	bl	8001188 <calc_delta>
 8001250:	ed87 0b00 	vstr	d0, [r7]

  // clamp at zero
  if (_dir == TRISTATE_TRUE && delta > _depth) {
 8001254:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <estimate_depth+0x84>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d10e      	bne.n	800127c <estimate_depth+0x48>
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <estimate_depth+0x88>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001268:	f7ff fbfa 	bl	8000a60 <__aeabi_dcmpgt>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <estimate_depth+0x48>
    return 0;
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e014      	b.n	80012a6 <estimate_depth+0x72>
  }

  // otherwise, apply delta in direction
  return _depth + delta * _dir;
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <estimate_depth+0x84>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b25b      	sxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8f2 	bl	800046c <__aeabi_i2d>
 8001288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800128c:	f7ff f958 	bl	8000540 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <estimate_depth+0x88>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7fe ff99 	bl	80001d4 <__adddf3>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
}
 80012a6:	ec43 2b17 	vmov	d7, r2, r3
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	eef0 0a67 	vmov.f32	s1, s15
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000045 	.word	0x20000045
 80012bc:	20000050 	.word	0x20000050

080012c0 <interrupt_send_code>:
  0b0000001,
  0b0001000
};

// interrupt handler various actions, but not as an actual interrupt
void interrupt_send_code(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  timed_lock_call(&lock_send_code, HAL_GetTick());
 80012c4:	f001 fa90 	bl	80027e8 <HAL_GetTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <interrupt_send_code+0x18>)
 80012ce:	f000 fd05 	bl	8001cdc <timed_lock_call>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000d4 	.word	0x200000d4

080012dc <interrupt_request_code>:

void interrupt_request_code(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  timed_lock_call(&lock_req_code, HAL_GetTick());
 80012e0:	f001 fa82 	bl	80027e8 <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <interrupt_request_code+0x18>)
 80012ea:	f000 fcf7 	bl	8001cdc <timed_lock_call>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000e0 	.word	0x200000e0

080012f8 <interrupt_release_pod>:

void interrupt_release_pod(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  timed_lock_call(&lock_release_pod, HAL_GetTick());
 80012fc:	f001 fa74 	bl	80027e8 <HAL_GetTick>
 8001300:	4603      	mov	r3, r0
 8001302:	4619      	mov	r1, r3
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <interrupt_release_pod+0x18>)
 8001306:	f000 fce9 	bl	8001cdc <timed_lock_call>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000ec 	.word	0x200000ec

08001314 <interrupt_tristate_up>:

void interrupt_tristate_up(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  timed_lock_call(&lock_tristate_up, HAL_GetTick());
 8001318:	f001 fa66 	bl	80027e8 <HAL_GetTick>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <interrupt_tristate_up+0x18>)
 8001322:	f000 fcdb 	bl	8001cdc <timed_lock_call>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000104 	.word	0x20000104

08001330 <interrupt_tristate_down>:

void interrupt_tristate_down(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  timed_lock_call(&lock_tristate_down, HAL_GetTick());
 8001334:	f001 fa58 	bl	80027e8 <HAL_GetTick>
 8001338:	4603      	mov	r3, r0
 800133a:	4619      	mov	r1, r3
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <interrupt_tristate_down+0x18>)
 800133e:	f000 fccd 	bl	8001cdc <timed_lock_call>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000f8 	.word	0x200000f8

0800134c <HAL_GPIO_EXTI_Callback>:

// INTERRUPT: override GPIO external interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  switch (pin) {
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800135c:	d025      	beq.n	80013aa <HAL_GPIO_EXTI_Callback+0x5e>
 800135e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001362:	dc26      	bgt.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
 8001364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001368:	d01b      	beq.n	80013a2 <HAL_GPIO_EXTI_Callback+0x56>
 800136a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800136e:	dc20      	bgt.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001374:	d011      	beq.n	800139a <HAL_GPIO_EXTI_Callback+0x4e>
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800137a:	dc1a      	bgt.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
 800137c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001380:	d003      	beq.n	800138a <HAL_GPIO_EXTI_Callback+0x3e>
 8001382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001386:	d004      	beq.n	8001392 <HAL_GPIO_EXTI_Callback+0x46>
      break;
    case GPIO_PIN_12: // press 'release escape pod' button
      create_action(interrupt_release_pod);
      break;
  }
}
 8001388:	e013      	b.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
      create_action(interrupt_tristate_down);
 800138a:	480c      	ldr	r0, [pc, #48]	@ (80013bc <HAL_GPIO_EXTI_Callback+0x70>)
 800138c:	f000 f942 	bl	8001614 <create_action>
      break;
 8001390:	e00f      	b.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
      create_action(interrupt_tristate_up);
 8001392:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001394:	f000 f93e 	bl	8001614 <create_action>
      break;
 8001398:	e00b      	b.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
      create_action(interrupt_send_code);
 800139a:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <HAL_GPIO_EXTI_Callback+0x78>)
 800139c:	f000 f93a 	bl	8001614 <create_action>
      break;
 80013a0:	e007      	b.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
      create_action(interrupt_request_code);
 80013a2:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013a4:	f000 f936 	bl	8001614 <create_action>
      break;
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_EXTI_Callback+0x66>
      create_action(interrupt_release_pod);
 80013aa:	4808      	ldr	r0, [pc, #32]	@ (80013cc <HAL_GPIO_EXTI_Callback+0x80>)
 80013ac:	f000 f932 	bl	8001614 <create_action>
      break;
 80013b0:	bf00      	nop
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	08001331 	.word	0x08001331
 80013c0:	08001315 	.word	0x08001315
 80013c4:	080012c1 	.word	0x080012c1
 80013c8:	080012dd 	.word	0x080012dd
 80013cc:	080012f9 	.word	0x080012f9

080013d0 <HAL_TIM_PeriodElapsedCallback>:

// INTERRUPT: override timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *h) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if (h == &TIMER_HANDLE) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d147      	bne.n	8001470 <HAL_TIM_PeriodElapsedCallback+0xa0>
    // poll joystick; start ADC
    HAL_ADC_Start_DMA(&ADC_HANDLE, (uint32_t *) g_joystick_data, ADC_NCONV);
 80013e0:	2202      	movs	r2, #2
 80013e2:	492a      	ldr	r1, [pc, #168]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013e4:	482a      	ldr	r0, [pc, #168]	@ (8001490 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80013e6:	f001 fd75 	bl	8002ed4 <HAL_ADC_Start_DMA>

    // DMA writes ADC results to buffer
    // compare new results, only update if differ to old
    if (read_joystick) {
 80013ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d02f      	beq.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x84>
      if (!is_within_tolerance(g_joystick_data[0], prev_joystick_data[0], JOYSTICK_TOLERANCE) || !is_within_tolerance(g_joystick_data[1], prev_joystick_data[1], JOYSTICK_TOLERANCE)) {
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	2296      	movs	r2, #150	@ 0x96
 8001404:	4619      	mov	r1, r3
 8001406:	f000 fcbb 	bl	8001d80 <is_within_tolerance>
 800140a:	4603      	mov	r3, r0
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d110      	bne.n	8001438 <HAL_TIM_PeriodElapsedCallback+0x68>
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001418:	885b      	ldrh	r3, [r3, #2]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001420:	885b      	ldrh	r3, [r3, #2]
 8001422:	b29b      	uxth	r3, r3
 8001424:	2296      	movs	r2, #150	@ 0x96
 8001426:	4619      	mov	r1, r3
 8001428:	f000 fcaa 	bl	8001d80 <is_within_tolerance>
 800142c:	4603      	mov	r3, r0
 800142e:	f083 0301 	eor.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d023      	beq.n	8001480 <HAL_TIM_PeriodElapsedCallback+0xb0>
    	create_action(action_propeller);
 8001438:	4818      	ldr	r0, [pc, #96]	@ (800149c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800143a:	f000 f8eb 	bl	8001614 <create_action>

    	// update previous values
    	prev_joystick_data[0] = g_joystick_data[0];
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001446:	801a      	strh	r2, [r3, #0]
    	prev_joystick_data[1] = g_joystick_data[1];
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800144a:	885b      	ldrh	r3, [r3, #2]
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001450:	805a      	strh	r2, [r3, #2]
      prev_joystick_data[0] = g_joystick_data[0];
      prev_joystick_data[1] = g_joystick_data[1];
      read_joystick = true;
    }

    return;
 8001452:	e015      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0xb0>
      prev_joystick_data[0] = g_joystick_data[0];
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800145c:	801a      	strh	r2, [r3, #0]
      prev_joystick_data[1] = g_joystick_data[1];
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001460:	885b      	ldrh	r3, [r3, #2]
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001466:	805a      	strh	r2, [r3, #2]
      read_joystick = true;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
    return;
 800146e:	e007      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0xb0>
  }

  if (h == &TIMER_DEPTH_HANDLE) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d104      	bne.n	8001482 <HAL_TIM_PeriodElapsedCallback+0xb2>
    create_action(action_display_movement_tick);
 8001478:	480a      	ldr	r0, [pc, #40]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800147a:	f000 f8cb 	bl	8001614 <create_action>
//#ifdef PREDICT_DEPTH
    //create_action(action_predict_depth_tick);
//#endif
    return;
 800147e:	e000      	b.n	8001482 <HAL_TIM_PeriodElapsedCallback+0xb2>
    return;
 8001480:	bf00      	nop
  }
}
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200002b8 	.word	0x200002b8
 800148c:	200000c0 	.word	0x200000c0
 8001490:	2000015c 	.word	0x2000015c
 8001494:	200000bc 	.word	0x200000bc
 8001498:	200000c4 	.word	0x200000c4
 800149c:	08000f79 	.word	0x08000f79
 80014a0:	2000026c 	.word	0x2000026c
 80014a4:	08001175 	.word	0x08001175

080014a8 <movement_counter_on_tick>:

// on-tick callback for movement counter
void movement_counter_on_tick(uint32_t tick) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  if (tick == 0) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <movement_counter_on_tick+0x14>
    i = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e00d      	b.n	80014d8 <movement_counter_on_tick+0x30>
  } else {
    i = get_vert_dir() == TRISTATE_TRUE ? tick : 4 - tick;
 80014bc:	f7ff fe94 	bl	80011e8 <get_vert_dir>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d005      	beq.n	80014d2 <movement_counter_on_tick+0x2a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f1c3 0304 	rsb	r3, r3, #4
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	e001      	b.n	80014d6 <movement_counter_on_tick+0x2e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73fb      	strb	r3, [r7, #15]
  }

  display_write_manual(&g_display, 4, movement_segment_data[i]);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <movement_counter_on_tick+0x4c>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	2104      	movs	r1, #4
 80014e6:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <movement_counter_on_tick+0x50>)
 80014e8:	f7ff fc9c 	bl	8000e24 <display_write_manual>
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000000c 	.word	0x2000000c
 80014f8:	20000098 	.word	0x20000098

080014fc <setup>:

void setup(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af02      	add	r7, sp, #8
  // initialise LoRa device with +20dBm
  lora_init(&g_lora, &SPI_HANDLE, &pin_cs_radio, &pin_reset);
 8001502:	4b2a      	ldr	r3, [pc, #168]	@ (80015ac <setup+0xb0>)
 8001504:	4a2a      	ldr	r2, [pc, #168]	@ (80015b0 <setup+0xb4>)
 8001506:	492b      	ldr	r1, [pc, #172]	@ (80015b4 <setup+0xb8>)
 8001508:	482b      	ldr	r0, [pc, #172]	@ (80015b8 <setup+0xbc>)
 800150a:	f000 f9f5 	bl	80018f8 <lora_init>
  lora_set_tx_power(&g_lora, 20);
 800150e:	2114      	movs	r1, #20
 8001510:	4829      	ldr	r0, [pc, #164]	@ (80015b8 <setup+0xbc>)
 8001512:	f000 fae4 	bl	8001ade <lora_set_tx_power>

  // set payload receive handlers
  register_send_code_callback(recv_send_code);
 8001516:	4829      	ldr	r0, [pc, #164]	@ (80015bc <setup+0xc0>)
 8001518:	f000 f8b8 	bl	800168c <register_send_code_callback>

  // initialise 7-segment display
  mcp_init(&mcp1_2, &SPI_HANDLE, &pin_cs1_2, 0x00, &pin_reset);
 800151c:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <setup+0xb0>)
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2300      	movs	r3, #0
 8001522:	4a27      	ldr	r2, [pc, #156]	@ (80015c0 <setup+0xc4>)
 8001524:	4923      	ldr	r1, [pc, #140]	@ (80015b4 <setup+0xb8>)
 8001526:	4827      	ldr	r0, [pc, #156]	@ (80015c4 <setup+0xc8>)
 8001528:	f000 fb48 	bl	8001bbc <mcp_init>
  mcp_init(&mcp3_4, &SPI_HANDLE, &pin_cs3_4, 0x00, &pin_reset);
 800152c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <setup+0xb0>)
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2300      	movs	r3, #0
 8001532:	4a25      	ldr	r2, [pc, #148]	@ (80015c8 <setup+0xcc>)
 8001534:	491f      	ldr	r1, [pc, #124]	@ (80015b4 <setup+0xb8>)
 8001536:	4825      	ldr	r0, [pc, #148]	@ (80015cc <setup+0xd0>)
 8001538:	f000 fb40 	bl	8001bbc <mcp_init>
  display_init(&g_display, (mcp_t *[2]) { &mcp1_2, &mcp3_4 }, 4, true);
 800153c:	4a24      	ldr	r2, [pc, #144]	@ (80015d0 <setup+0xd4>)
 800153e:	463b      	mov	r3, r7
 8001540:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001544:	e883 0003 	stmia.w	r3, {r0, r1}
 8001548:	4639      	mov	r1, r7
 800154a:	2301      	movs	r3, #1
 800154c:	2204      	movs	r2, #4
 800154e:	4821      	ldr	r0, [pc, #132]	@ (80015d4 <setup+0xd8>)
 8001550:	f7ff fc08 	bl	8000d64 <display_init>

  // hardcode internal code
  save_code(CODE_INITIAL_VALUE);
 8001554:	f240 40d2 	movw	r0, #1234	@ 0x4d2
 8001558:	f000 fb9a 	bl	8001c90 <save_code>

  // start timers
  HAL_TIM_Base_Start_IT(&TIMER_HANDLE);
 800155c:	481e      	ldr	r0, [pc, #120]	@ (80015d8 <setup+0xdc>)
 800155e:	f005 fd33 	bl	8006fc8 <HAL_TIM_Base_Start_IT>

  // initialise debouncing locks
  timed_lock_init(&lock_send_code, 10, action_send_code);
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <setup+0xe0>)
 8001564:	210a      	movs	r1, #10
 8001566:	481e      	ldr	r0, [pc, #120]	@ (80015e0 <setup+0xe4>)
 8001568:	f000 fba2 	bl	8001cb0 <timed_lock_init>
  timed_lock_init(&lock_req_code, 10, action_request_code);
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <setup+0xe8>)
 800156e:	210a      	movs	r1, #10
 8001570:	481d      	ldr	r0, [pc, #116]	@ (80015e8 <setup+0xec>)
 8001572:	f000 fb9d 	bl	8001cb0 <timed_lock_init>
  timed_lock_init(&lock_release_pod, 10, action_release_pod);
 8001576:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <setup+0xf0>)
 8001578:	210a      	movs	r1, #10
 800157a:	481d      	ldr	r0, [pc, #116]	@ (80015f0 <setup+0xf4>)
 800157c:	f000 fb98 	bl	8001cb0 <timed_lock_init>
  timed_lock_init(&lock_tristate_up, 10, action_ballast);
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <setup+0xf8>)
 8001582:	210a      	movs	r1, #10
 8001584:	481c      	ldr	r0, [pc, #112]	@ (80015f8 <setup+0xfc>)
 8001586:	f000 fb93 	bl	8001cb0 <timed_lock_init>
  timed_lock_init(&lock_tristate_down, 10, action_ballast);
 800158a:	4a1a      	ldr	r2, [pc, #104]	@ (80015f4 <setup+0xf8>)
 800158c:	210a      	movs	r1, #10
 800158e:	481b      	ldr	r0, [pc, #108]	@ (80015fc <setup+0x100>)
 8001590:	f000 fb8e 	bl	8001cb0 <timed_lock_init>

  // setup movement counter
  counter_init(&g_movement_counter, 4);
 8001594:	2104      	movs	r1, #4
 8001596:	481a      	ldr	r0, [pc, #104]	@ (8001600 <setup+0x104>)
 8001598:	f000 f8d3 	bl	8001742 <counter_init>
  counter_on_tick(&g_movement_counter, movement_counter_on_tick);
 800159c:	4919      	ldr	r1, [pc, #100]	@ (8001604 <setup+0x108>)
 800159e:	4818      	ldr	r0, [pc, #96]	@ (8001600 <setup+0x104>)
 80015a0:	f000 f8e3 	bl	800176a <counter_on_tick>

  // finally, set LoRa to receive mode
  //lora_receive(&g_lora, 0);
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0800768c 	.word	0x0800768c
 80015b0:	08007684 	.word	0x08007684
 80015b4:	20000208 	.word	0x20000208
 80015b8:	20000058 	.word	0x20000058
 80015bc:	08001149 	.word	0x08001149
 80015c0:	08007674 	.word	0x08007674
 80015c4:	20000078 	.word	0x20000078
 80015c8:	0800767c 	.word	0x0800767c
 80015cc:	20000088 	.word	0x20000088
 80015d0:	0800766c 	.word	0x0800766c
 80015d4:	20000098 	.word	0x20000098
 80015d8:	200002b8 	.word	0x200002b8
 80015dc:	080010d5 	.word	0x080010d5
 80015e0:	200000d4 	.word	0x200000d4
 80015e4:	08001119 	.word	0x08001119
 80015e8:	200000e0 	.word	0x200000e0
 80015ec:	08001131 	.word	0x08001131
 80015f0:	200000ec 	.word	0x200000ec
 80015f4:	08001001 	.word	0x08001001
 80015f8:	20000104 	.word	0x20000104
 80015fc:	200000f8 	.word	0x200000f8
 8001600:	200000c8 	.word	0x200000c8
 8001604:	080014a9 	.word	0x080014a9

08001608 <loop>:

void loop(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  execute_pending_actions();
 800160c:	f000 f820 	bl	8001650 <execute_pending_actions>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <create_action>:
static volatile handler pending_actions[MAX_PENDING_ACTIONS] = {NULL};

// number of pending actions
static volatile uint32_t count = 0;

bool create_action(handler action_handler) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  // check if at capacity
  if (count >= MAX_PENDING_ACTIONS) {
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <create_action+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d901      	bls.n	8001628 <create_action+0x14>
    return false;
 8001624:	2300      	movs	r3, #0
 8001626:	e009      	b.n	800163c <create_action+0x28>
  }

  // insert into array and increase size
  pending_actions[count++] = action_handler;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <create_action+0x34>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	4906      	ldr	r1, [pc, #24]	@ (8001648 <create_action+0x34>)
 8001630:	600a      	str	r2, [r1, #0]
 8001632:	4906      	ldr	r1, [pc, #24]	@ (800164c <create_action+0x38>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return true;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000150 	.word	0x20000150
 800164c:	20000110 	.word	0x20000110

08001650 <execute_pending_actions>:
handler next_action(void) {
  // get last item in list, or NULL if empty
  return count == 0 ? NULL : pending_actions[--count];
}

void execute_pending_actions(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  // iterate over array and call handlers
  for (uint16_t i = 0; i < count; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	80fb      	strh	r3, [r7, #6]
 800165a:	e007      	b.n	800166c <execute_pending_actions+0x1c>
    pending_actions[i]();
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <execute_pending_actions+0x34>)
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	4798      	blx	r3
  for (uint16_t i = 0; i < count; i++) {
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	3301      	adds	r3, #1
 800166a:	80fb      	strh	r3, [r7, #6]
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <execute_pending_actions+0x38>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3f2      	bcc.n	800165c <execute_pending_actions+0xc>
  }
  
  // 'empty' array (old entries will be overwritten)
  count = 0;
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <execute_pending_actions+0x38>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000110 	.word	0x20000110
 8001688:	20000150 	.word	0x20000150

0800168c <register_send_code_callback>:

void register_ballast_callback(ballast_callback_t cb) {
  ballast_cb = cb;
}

void register_send_code_callback(send_code_callback_t cb) {
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  send_code_cb = cb;
 8001694:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <register_send_code_callback+0x1c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000154 	.word	0x20000154

080016ac <transmit_opcode>:
      CALL_FN1(release_pod_cb, header)
      break;
  }
}

void transmit_opcode(lora_t *lora, uint8_t opcode, uint8_t recipient) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	4613      	mov	r3, r2
 80016ba:	70bb      	strb	r3, [r7, #2]
  lora_begin_packet(lora, RADIO_IMPLICIT_HEADER);
 80016bc:	2100      	movs	r1, #0
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f972 	bl	80019a8 <lora_begin_packet>
  lora_write(lora, opcode);
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f98e 	bl	80019ea <lora_write>
  lora_write(lora, RADIO_IDENTIFIER);
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f98a 	bl	80019ea <lora_write>
  lora_write(lora, recipient);
 80016d6:	78bb      	ldrb	r3, [r7, #2]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f985 	bl	80019ea <lora_write>
  lora_end_packet(lora, true);
 80016e0:	2101      	movs	r1, #1
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f9b5 	bl	8001a52 <lora_end_packet>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <transmit>:

void transmit(lora_t *lora, uint8_t opcode, uint8_t recipient, const void *data, uint8_t data_size) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	72fb      	strb	r3, [r7, #11]
 80016fe:	4613      	mov	r3, r2
 8001700:	72bb      	strb	r3, [r7, #10]
  lora_begin_packet(lora, RADIO_IMPLICIT_HEADER);
 8001702:	2100      	movs	r1, #0
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 f94f 	bl	80019a8 <lora_begin_packet>
  lora_write(lora, opcode);
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	4619      	mov	r1, r3
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f96b 	bl	80019ea <lora_write>
  lora_write(lora, RADIO_IDENTIFIER);
 8001714:	2101      	movs	r1, #1
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f967 	bl	80019ea <lora_write>
  lora_write(lora, recipient);
 800171c:	7abb      	ldrb	r3, [r7, #10]
 800171e:	4619      	mov	r1, r3
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f962 	bl	80019ea <lora_write>
  lora_write_bytes(lora, data, data_size);
 8001726:	7e3b      	ldrb	r3, [r7, #24]
 8001728:	461a      	mov	r2, r3
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f96d 	bl	8001a0c <lora_write_bytes>
  lora_end_packet(lora, true);
 8001732:	2101      	movs	r1, #1
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 f98c 	bl	8001a52 <lora_end_packet>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <counter_init>:
#include "counter.h"

#include <stddef.h>

void counter_init(counter_t *counter, uint32_t limit) {
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  counter->limit = limit;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	601a      	str	r2, [r3, #0]
  counter->value = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  counter->on_tick = NULL;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <counter_on_tick>:

void counter_on_tick(counter_t *counter, void (*callback)(uint32_t)) {
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  counter->on_tick = callback;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	609a      	str	r2, [r3, #8]
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <counter_tick>:

uint32_t counter_get(counter_t *counter) {
  return counter->value;
}

void counter_tick(counter_t *counter) {
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  // increment current value, overflow if needed
  counter->value++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]

  if (counter->value >= counter->limit) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d302      	bcc.n	80017aa <counter_tick+0x24>
    counter->value = 0;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
  }

  // invoke callback with new tick count
  if (counter->on_tick) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <counter_tick+0x38>
    counter->on_tick(counter->value);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6852      	ldr	r2, [r2, #4]
 80017ba:	4610      	mov	r0, r2
 80017bc:	4798      	blx	r3
  }
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_read>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

static uint8_t _read(lora_t *lora, uint8_t address) {
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
  // command - request address to read
  uint8_t cmd = address & 0x7F, data;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	73fb      	strb	r3, [r7, #15]

  reset_pin(lora->cs);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 faa7 	bl	8001d34 <reset_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f107 010f 	add.w	r1, r7, #15
 80017ee:	2364      	movs	r3, #100	@ 0x64
 80017f0:	2201      	movs	r2, #1
 80017f2:	f004 fd08 	bl	8006206 <HAL_SPI_Transmit>
  HAL_SPI_Receive(lora->spi, &data, 1, 100);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f107 010e 	add.w	r1, r7, #14
 80017fe:	2364      	movs	r3, #100	@ 0x64
 8001800:	2201      	movs	r2, #1
 8001802:	f004 fe76 	bl	80064f2 <HAL_SPI_Receive>
  set_pin(lora->cs);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fa82 	bl	8001d14 <set_pin>

  return data;
 8001810:	7bbb      	ldrb	r3, [r7, #14]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write_bytes>:

static void _write_bytes(lora_t *lora, uint8_t address, const uint8_t *data, uint8_t size) {
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	461a      	mov	r2, r3
 8001826:	460b      	mov	r3, r1
 8001828:	72fb      	strb	r3, [r7, #11]
 800182a:	4613      	mov	r3, r2
 800182c:	72bb      	strb	r3, [r7, #10]
  // command - tell device to write to address
  uint8_t cmd = 0x80 | address;
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001834:	b2db      	uxtb	r3, r3
 8001836:	75fb      	strb	r3, [r7, #23]

  reset_pin(lora->cs);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fa79 	bl	8001d34 <reset_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	f107 0117 	add.w	r1, r7, #23
 800184a:	2364      	movs	r3, #100	@ 0x64
 800184c:	2201      	movs	r2, #1
 800184e:	f004 fcda 	bl	8006206 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(lora->spi, data, size, 100);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	7abb      	ldrb	r3, [r7, #10]
 8001858:	b29a      	uxth	r2, r3
 800185a:	2364      	movs	r3, #100	@ 0x64
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	f004 fcd2 	bl	8006206 <HAL_SPI_Transmit>
  set_pin(lora->cs);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fa54 	bl	8001d14 <set_pin>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_write>:

static void _write(lora_t *lora, uint8_t address, uint8_t data) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
 8001880:	4613      	mov	r3, r2
 8001882:	70bb      	strb	r3, [r7, #2]
  _write_bytes(lora, address, &data, 1);
 8001884:	1cba      	adds	r2, r7, #2
 8001886:	78f9      	ldrb	r1, [r7, #3]
 8001888:	2301      	movs	r3, #1
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffc5 	bl	800181a <_write_bytes>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <explicit_header_mode>:

static void explicit_header_mode(lora_t *lora) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = false;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	771a      	strb	r2, [r3, #28]
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) & 0xfe);
 80018a6:	211d      	movs	r1, #29
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff8c 	bl	80017c6 <_read>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	211d      	movs	r1, #29
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffda 	bl	8001874 <_write>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <implicit_header_mode>:

static void implicit_header_mode(lora_t *lora) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = true;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	771a      	strb	r2, [r3, #28]
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) | 0x01);
 80018d6:	211d      	movs	r1, #29
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff74 	bl	80017c6 <_read>
 80018de:	4603      	mov	r3, r0
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	211d      	movs	r1, #29
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffc2 	bl	8001874 <_write>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <lora_init>:


void lora_init(lora_t *lora, SPI_HandleTypeDef *spi, const pin_t *cs, const pin_t *rst) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  lora->spi = spi;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	601a      	str	r2, [r3, #0]
  lora->cs = cs;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]
  lora->rst = rst;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	609a      	str	r2, [r3, #8]
  lora->on_receive = NULL;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  lora->on_cad_done = NULL;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  lora->on_tx_done = NULL;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]

  // set SS high
  set_pin(lora->cs);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f9f0 	bl	8001d14 <set_pin>

  // toggle reset
  reset_pin(lora->rst);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f9fb 	bl	8001d34 <reset_pin>
  HAL_Delay(5);
 800193e:	2005      	movs	r0, #5
 8001940:	f000 ff5e 	bl	8002800 <HAL_Delay>
  set_pin(lora->rst);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f9e3 	bl	8001d14 <set_pin>
  HAL_Delay(5);
 800194e:	2005      	movs	r0, #5
 8001950:	f000 ff56 	bl	8002800 <HAL_Delay>

  // put in sleep mode
  lora_sleep(lora);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f8b5 	bl	8001ac4 <lora_sleep>

  // set base addresses
  _write(lora, REG_FIFO_TX_BASE_ADDR, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	210e      	movs	r1, #14
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff ff88 	bl	8001874 <_write>
  _write(lora, REG_FIFO_RX_BASE_ADDR, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	210f      	movs	r1, #15
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f7ff ff83 	bl	8001874 <_write>

  // set LNA boost
  _write(lora, REG_LNA, _read(lora, REG_LNA) | 0x03);
 800196e:	210c      	movs	r1, #12
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff ff28 	bl	80017c6 <_read>
 8001976:	4603      	mov	r3, r0
 8001978:	f043 0303 	orr.w	r3, r3, #3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	210c      	movs	r1, #12
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff ff76 	bl	8001874 <_write>

  // set auto AGC
  _write(lora, REG_MODEM_CONFIG_3, 0x04);
 8001988:	2204      	movs	r2, #4
 800198a:	2126      	movs	r1, #38	@ 0x26
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff71 	bl	8001874 <_write>

  // set to +17dBm
  lora_set_tx_power(lora, 17);
 8001992:	2111      	movs	r1, #17
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f8a2 	bl	8001ade <lora_set_tx_power>

  // put in standby mode
  lora_idle(lora);
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f885 	bl	8001aaa <lora_idle>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <lora_begin_packet>:

void lora_begin_packet(lora_t *lora, bool implicit_header) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
  // put in standby mode
  lora_idle(lora);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f878 	bl	8001aaa <lora_idle>

  if (implicit_header) {
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <lora_begin_packet+0x20>
    implicit_header_mode(lora);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff81 	bl	80018c8 <implicit_header_mode>
 80019c6:	e002      	b.n	80019ce <lora_begin_packet+0x26>
  } else {
    explicit_header_mode(lora);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff65 	bl	8001898 <explicit_header_mode>
  }

  // reset FIFO address and payload length
  _write(lora, REG_FIFO_ADDR_PTR, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	210d      	movs	r1, #13
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff4e 	bl	8001874 <_write>
  _write(lora, REG_PAYLOAD_LENGTH, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2122      	movs	r1, #34	@ 0x22
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff49 	bl	8001874 <_write>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <lora_write>:

// write byte byte to FIFO
size_t lora_write(lora_t *lora, uint8_t byte) {
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  return lora_write_bytes(lora, &byte, sizeof(byte));
 80019f6:	1cfb      	adds	r3, r7, #3
 80019f8:	2201      	movs	r2, #1
 80019fa:	4619      	mov	r1, r3
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f805 	bl	8001a0c <lora_write_bytes>
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <lora_write_bytes>:

size_t lora_write_bytes(lora_t *lora, const uint8_t *buffer, size_t size) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  int current_length = _read(lora, REG_PAYLOAD_LENGTH);
 8001a18:	2122      	movs	r1, #34	@ 0x22
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f7ff fed3 	bl	80017c6 <_read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	617b      	str	r3, [r7, #20]

  // write data
  //for (size_t i = 0; i < size; i++) {
  //  _write(lora, REG_FIFO, buffer[i]);
  //}
  _write_bytes(lora, REG_FIFO, buffer, size);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff fef4 	bl	800181a <_write_bytes>

  // update length
  _write(lora, REG_PAYLOAD_LENGTH, current_length + size);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2122      	movs	r1, #34	@ 0x22
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff ff16 	bl	8001874 <_write>

  return size;
 8001a48:	687b      	ldr	r3, [r7, #4]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <lora_end_packet>:

void lora_end_packet(lora_t *lora, bool async) {
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
  if (async)
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <lora_end_packet+0x1c>
      _write(lora, REG_DIO_MAPPING_1, 0x40); // DIO0 -> TXDONE
 8001a64:	2240      	movs	r2, #64	@ 0x40
 8001a66:	2140      	movs	r1, #64	@ 0x40
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff03 	bl	8001874 <_write>

  // put in TX mode
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001a6e:	2283      	movs	r2, #131	@ 0x83
 8001a70:	2101      	movs	r1, #1
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fefe 	bl	8001874 <_write>

  if (!async) {
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f083 0301 	eor.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00e      	beq.n	8001aa2 <lora_end_packet+0x50>
    // wait for TX done
    while (!(_read(lora, REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 8001a84:	bf00      	nop
 8001a86:	2112      	movs	r1, #18
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fe9c 	bl	80017c6 <_read>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f6      	beq.n	8001a86 <lora_end_packet+0x34>
      ;

    // clear IRQ's
    _write(lora, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001a98:	2208      	movs	r2, #8
 8001a9a:	2112      	movs	r1, #18
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fee9 	bl	8001874 <_write>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <lora_idle>:
void lora_cad(lora_t *lora) {
  _write(lora, REG_DIO_MAPPING_1, 0x80);// DIO0 -> CADDONE
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_CAD);
}

void lora_idle(lora_t *lora) {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001ab2:	2281      	movs	r2, #129	@ 0x81
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fedc 	bl	8001874 <_write>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <lora_sleep>:

void lora_sleep(lora_t *lora) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001acc:	2280      	movs	r2, #128	@ 0x80
 8001ace:	2101      	movs	r1, #1
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fecf 	bl	8001874 <_write>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <lora_set_tx_power>:

void lora_set_tx_power(lora_t *lora, int level) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  if (level > 17) {
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b11      	cmp	r3, #17
 8001aec:	dd11      	ble.n	8001b12 <lora_set_tx_power+0x34>
    if (level > 20) {
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b14      	cmp	r3, #20
 8001af2:	dd01      	ble.n	8001af8 <lora_set_tx_power+0x1a>
      level = 20;
 8001af4:	2314      	movs	r3, #20
 8001af6:	603b      	str	r3, [r7, #0]
    }

    level -= 3;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3b03      	subs	r3, #3
 8001afc:	603b      	str	r3, [r7, #0]

    // high power operation
    _write(lora, REG_PA_DAC, 0x87);
 8001afe:	2287      	movs	r2, #135	@ 0x87
 8001b00:	214d      	movs	r1, #77	@ 0x4d
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff feb6 	bl	8001874 <_write>
    lora_set_ocp(lora, 140);
 8001b08:	218c      	movs	r1, #140	@ 0x8c
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f822 	bl	8001b54 <lora_set_ocp>
 8001b10:	e00d      	b.n	8001b2e <lora_set_tx_power+0x50>
  } else {
    if (level < 2) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	dc01      	bgt.n	8001b1c <lora_set_tx_power+0x3e>
      level = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	603b      	str	r3, [r7, #0]
    }

    _write(lora, REG_PA_DAC, 0x84);
 8001b1c:	2284      	movs	r2, #132	@ 0x84
 8001b1e:	214d      	movs	r1, #77	@ 0x4d
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fea7 	bl	8001874 <_write>
    lora_set_ocp(lora, 100);
 8001b26:	2164      	movs	r1, #100	@ 0x64
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f813 	bl	8001b54 <lora_set_ocp>
  }

  _write(lora, REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3b02      	subs	r3, #2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	2109      	movs	r1, #9
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fe95 	bl	8001874 <_write>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <lora_set_ocp>:
void lora_disable_invert_iq(lora_t *lora) {
  _write(lora, REG_INVERTIQ,  0x27);
  _write(lora, REG_INVERTIQ2, 0x1d);
}

void lora_set_ocp(lora_t *lora, uint8_t mA) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8001b60:	231b      	movs	r3, #27
 8001b62:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b78      	cmp	r3, #120	@ 0x78
 8001b68:	d809      	bhi.n	8001b7e <lora_set_ocp+0x2a>
    ocpTrim = (mA - 45) / 5;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	3b2d      	subs	r3, #45	@ 0x2d
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <lora_set_ocp+0x64>)
 8001b70:	fb82 1203 	smull	r1, r2, r2, r3
 8001b74:	1052      	asrs	r2, r2, #1
 8001b76:	17db      	asrs	r3, r3, #31
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e00b      	b.n	8001b96 <lora_set_ocp+0x42>
  } else if (mA <=240) {
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b82:	d808      	bhi.n	8001b96 <lora_set_ocp+0x42>
    ocpTrim = (mA + 30) / 10;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	331e      	adds	r3, #30
 8001b88:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb8 <lora_set_ocp+0x64>)
 8001b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8e:	1092      	asrs	r2, r2, #2
 8001b90:	17db      	asrs	r3, r3, #31
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	73fb      	strb	r3, [r7, #15]
  }

  _write(lora, REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	210b      	movs	r1, #11
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fe63 	bl	8001874 <_write>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	66666667 	.word	0x66666667

08001bbc <mcp_init>:

static inline uint8_t get_control_byte(bool write, uint8_t hw_addr) {
  return 0x40 | ((hw_addr & 0x7) << 1) | (write ? 0 : 1);
}

void mcp_init(mcp_t *mcp, SPI_HandleTypeDef *spi, const pin_t *cs, uint8_t hw_addr, const pin_t *rst) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	70fb      	strb	r3, [r7, #3]
  mcp->spi = spi;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	609a      	str	r2, [r3, #8]
  mcp->cs = cs;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
  mcp->hw_addr = hw_addr;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	711a      	strb	r2, [r3, #4]
  mcp->rst = rst;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	60da      	str	r2, [r3, #12]

  // toggle reset & chip select
  set_pin(cs);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f896 	bl	8001d14 <set_pin>
  set_pin(rst);
 8001be8:	69b8      	ldr	r0, [r7, #24]
 8001bea:	f000 f893 	bl	8001d14 <set_pin>
  HAL_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 fe06 	bl	8002800 <HAL_Delay>

  reset_pin(cs);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f89d 	bl	8001d34 <reset_pin>
  reset_pin(rst);
 8001bfa:	69b8      	ldr	r0, [r7, #24]
 8001bfc:	f000 f89a 	bl	8001d34 <reset_pin>
  HAL_Delay(1);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f000 fdfd 	bl	8002800 <HAL_Delay>

  set_pin(cs);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f884 	bl	8001d14 <set_pin>
  set_pin(rst);
 8001c0c:	69b8      	ldr	r0, [r7, #24]
 8001c0e:	f000 f881 	bl	8001d14 <set_pin>
  HAL_Delay(5);
 8001c12:	2005      	movs	r0, #5
 8001c14:	f000 fdf4 	bl	8002800 <HAL_Delay>
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <mcp_write>:

void mcp_write(mcp_t *mcp, uint8_t address, uint8_t data) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	70bb      	strb	r3, [r7, #2]
  reset_pin(mcp->cs);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f87d 	bl	8001d34 <reset_pin>

  uint8_t payload[] = {
 8001c3a:	2340      	movs	r3, #64	@ 0x40
 8001c3c:	733b      	strb	r3, [r7, #12]
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	737b      	strb	r3, [r7, #13]
 8001c42:	78bb      	ldrb	r3, [r7, #2]
 8001c44:	73bb      	strb	r3, [r7, #14]
    0x40, // get_control_byte(true, mcp->hw_addr),
    address,
    data
  };

  HAL_SPI_Transmit(mcp->spi, payload, 3, MCP_TIMEOUT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6898      	ldr	r0, [r3, #8]
 8001c4a:	f107 010c 	add.w	r1, r7, #12
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	2203      	movs	r2, #3
 8001c54:	f004 fad7 	bl	8006206 <HAL_SPI_Transmit>
  HAL_Delay(1);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 fdd1 	bl	8002800 <HAL_Delay>

  set_pin(mcp->cs);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f856 	bl	8001d14 <set_pin>
  HAL_Delay(1);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 fdc9 	bl	8002800 <HAL_Delay>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <fetch_code>:
#include "stored-code.h"

static volatile code_t _code;

code_t fetch_code(void) {
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return _code;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	@ (8001c8c <fetch_code+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000158 	.word	0x20000158

08001c90 <save_code>:

void save_code(code_t code) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  _code = code;
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <save_code+0x1c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000158 	.word	0x20000158

08001cb0 <timed_lock_init>:
#include "timed-lock.h"

void timed_lock_init(timed_lock_t *lock, uint16_t waitfor, void (*callback)(void)) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	817b      	strh	r3, [r7, #10]
  lock->callback = callback;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
  lock->last = 0;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
  lock->waitfor = waitfor;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	897a      	ldrh	r2, [r7, #10]
 8001cce:	809a      	strh	r2, [r3, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <timed_lock_call>:

void timed_lock_reset(timed_lock_t *lock) {
  lock->last = 0;
}

void timed_lock_call(timed_lock_t *lock, uint32_t elapsed) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  // ensure sufficient time has passed
  if (lock->last == 0 || lock->waitfor <= elapsed - lock->last) {
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <timed_lock_call+0x24>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	889b      	ldrh	r3, [r3, #4]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4299      	cmp	r1, r3
 8001cfe:	d805      	bhi.n	8001d0c <timed_lock_call+0x30>
    lock->last = elapsed;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	601a      	str	r2, [r3, #0]
    lock->callback();
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4798      	blx	r3
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <set_pin>:
inline void write_pin(const pin_t *pin, bool state) {
  HAL_GPIO_WritePin(pin->port, pin->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// set a pin high
inline void set_pin(const pin_t *pin) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	4619      	mov	r1, r3
 8001d28:	f002 feb2 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <reset_pin>:

// set a pin low
inline void reset_pin(const pin_t *pin) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	889b      	ldrh	r3, [r3, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	4619      	mov	r1, r3
 8001d48:	f002 fea2 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <read_pin>:
inline void toggle_pin(const pin_t *pin) {
  HAL_GPIO_TogglePin(pin->port, pin->pin);
}

// read the state of the given pin (true=set, false=reset)
inline bool read_pin(const pin_t *pin) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(pin->port, pin->pin) == GPIO_PIN_SET;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	889b      	ldrh	r3, [r3, #4]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f002 fe7a 	bl	8004a60 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	bf0c      	ite	eq
 8001d72:	2301      	moveq	r3, #1
 8001d74:	2300      	movne	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <is_within_tolerance>:
// read a tri-state switch, or other simlar structure
// returns `TRISTATE_FALSE` if the false pin is set, same for the true pin, otherwise `TRISTATE_UNDEF`
tristate_t read_tristate_pins(const pin_t *false_pin, const pin_t *true_pin);

// return if `value` is within `tolerance` of `target`
inline bool is_within_tolerance(int target, int value, int tolerance) {
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  int delta = target < value ? value - target : target - value;
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	da03      	bge.n	8001d9c <is_within_tolerance+0x1c>
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	e002      	b.n	8001da2 <is_within_tolerance+0x22>
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  return delta <= tolerance;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	bfd4      	ite	le
 8001dac:	2301      	movle	r3, #1
 8001dae:	2300      	movgt	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <read_tristate_pins>:
extern inline void set_pin(const pin_t *);
extern inline void reset_pin(const pin_t *);
extern inline void toggle_pin(const pin_t *);
extern inline bool read_pin(const pin_t *);

tristate_t read_tristate_pins(const pin_t *false_pin, const pin_t *true_pin) {
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  if (read_pin(false_pin)) {
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ffc3 	bl	8001d54 <read_pin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <read_tristate_pins+0x1c>
    return TRISTATE_FALSE;
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd8:	e008      	b.n	8001dec <read_tristate_pins+0x2e>
  } else if (read_pin(true_pin)) {
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f7ff ffba 	bl	8001d54 <read_pin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <read_tristate_pins+0x2c>
    return TRISTATE_TRUE;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <read_tristate_pins+0x2e>
  } else {
    return TRISTATE_UNDEF;
 8001dea:	2300      	movs	r3, #0
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <map_range>:

extern inline bool is_within_tolerance(int target, int value, int tolerance);

double map_range(uint32_t value, uint32_t old_min, uint32_t old_max, double new_min, double new_max) {
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	61f8      	str	r0, [r7, #28]
 8001dfc:	61b9      	str	r1, [r7, #24]
 8001dfe:	617a      	str	r2, [r7, #20]
 8001e00:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e04:	ed87 1b00 	vstr	d1, [r7]
  double percentage = (double) (value - old_min) / (old_max - old_min);
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb1c 	bl	800044c <__aeabi_ui2d>
 8001e14:	4604      	mov	r4, r0
 8001e16:	460d      	mov	r5, r1
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb14 	bl	800044c <__aeabi_ui2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe fcb2 	bl	8000794 <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	e9c7 2308 	strd	r2, r3, [r7, #32]
  return percentage * (new_max - new_min) + new_min;
 8001e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e40:	f7fe f9c6 	bl	80001d0 <__aeabi_dsub>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e50:	f7fe fb76 	bl	8000540 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e60:	f7fe f9b8 	bl	80001d4 <__adddf3>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e70:	eef0 0a67 	vmov.f32	s1, s15
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bdb0      	pop	{r4, r5, r7, pc}

08001e7a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7e:	f000 fc4a 	bl	8002716 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e82:	f000 f811 	bl	8001ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e86:	f000 f9b1 	bl	80021ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001e8a:	f000 f991 	bl	80021b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e8e:	f000 f85d 	bl	8001f4c <MX_ADC1_Init>
  MX_TIM6_Init();
 8001e92:	f000 f91f 	bl	80020d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001e96:	f000 f955 	bl	8002144 <MX_TIM7_Init>
  MX_SPI1_Init();
 8001e9a:	f000 f8dd 	bl	8002058 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001e9e:	f7ff fb2d 	bl	80014fc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 8001ea2:	f7ff fbb1 	bl	8001608 <loop>
 8001ea6:	e7fc      	b.n	8001ea2 <main+0x28>

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b096      	sub	sp, #88	@ 0x58
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	2244      	movs	r2, #68	@ 0x44
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 fba0 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001eca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ece:	f002 fe1d 	bl	8004b0c <HAL_PWREx_ControlVoltageScaling>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ed8:	f000 fa02 	bl	80022e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001edc:	2302      	movs	r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ee4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eea:	2302      	movs	r3, #2
 8001eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001efa:	2307      	movs	r3, #7
 8001efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fe54 	bl	8004bb8 <HAL_RCC_OscConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001f16:	f000 f9e3 	bl	80022e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f2e:	463b      	mov	r3, r7
 8001f30:	2104      	movs	r1, #4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fa1c 	bl	8005370 <HAL_RCC_ClockConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f3e:	f000 f9cf 	bl	80022e0 <Error_Handler>
  }
}
 8001f42:	bf00      	nop
 8001f44:	3758      	adds	r7, #88	@ 0x58
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
 8001f6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f6e:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f70:	4a36      	ldr	r2, [pc, #216]	@ (800204c <MX_ADC1_Init+0x100>)
 8001f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f74:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f7a:	4b33      	ldr	r3, [pc, #204]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f80:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f86:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f8e:	2204      	movs	r2, #4
 8001f90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f92:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc0:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fce:	481e      	ldr	r0, [pc, #120]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fd0:	f000 fe30 	bl	8002c34 <HAL_ADC_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001fda:	f000 f981 	bl	80022e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4817      	ldr	r0, [pc, #92]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8001fea:	f001 ffd5 	bl	8003f98 <HAL_ADCEx_MultiModeConfigChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ff4:	f000 f974 	bl	80022e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <MX_ADC1_Init+0x104>)
 8001ffa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ffc:	2306      	movs	r3, #6
 8001ffe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002000:	2307      	movs	r3, #7
 8002002:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002004:	237f      	movs	r3, #127	@ 0x7f
 8002006:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002008:	2304      	movs	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	4619      	mov	r1, r3
 8002014:	480c      	ldr	r0, [pc, #48]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8002016:	f001 fa5b 	bl	80034d0 <HAL_ADC_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8002020:	f000 f95e 	bl	80022e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_ADC1_Init+0x108>)
 8002026:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002028:	230c      	movs	r3, #12
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4805      	ldr	r0, [pc, #20]	@ (8002048 <MX_ADC1_Init+0xfc>)
 8002032:	f001 fa4d 	bl	80034d0 <HAL_ADC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800203c:	f000 f950 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	@ 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000015c 	.word	0x2000015c
 800204c:	50040000 	.word	0x50040000
 8002050:	04300002 	.word	0x04300002
 8002054:	08600004 	.word	0x08600004

08002058 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800205c:	4b1b      	ldr	r3, [pc, #108]	@ (80020cc <MX_SPI1_Init+0x74>)
 800205e:	4a1c      	ldr	r2, [pc, #112]	@ (80020d0 <MX_SPI1_Init+0x78>)
 8002060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <MX_SPI1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002072:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002076:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_SPI1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800208c:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <MX_SPI1_Init+0x74>)
 800208e:	2238      	movs	r2, #56	@ 0x38
 8002090:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <MX_SPI1_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002098:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <MX_SPI1_Init+0x74>)
 800209a:	2200      	movs	r2, #0
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020a6:	2207      	movs	r2, #7
 80020a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_SPI1_Init+0x74>)
 80020b8:	f004 f802 	bl	80060c0 <HAL_SPI_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020c2:	f000 f90d 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000208 	.word	0x20000208
 80020d0:	40013000 	.word	0x40013000

080020d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <MX_TIM6_Init+0x68>)
 80020e6:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <MX_TIM6_Init+0x6c>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 319;
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <MX_TIM6_Init+0x68>)
 80020ec:	f240 123f 	movw	r2, #319	@ 0x13f
 80020f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <MX_TIM6_Init+0x68>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 62499;
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <MX_TIM6_Init+0x68>)
 80020fa:	f24f 4223 	movw	r2, #62499	@ 0xf423
 80020fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <MX_TIM6_Init+0x68>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002106:	480d      	ldr	r0, [pc, #52]	@ (800213c <MX_TIM6_Init+0x68>)
 8002108:	f004 ff06 	bl	8006f18 <HAL_TIM_Base_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002112:	f000 f8e5 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4806      	ldr	r0, [pc, #24]	@ (800213c <MX_TIM6_Init+0x68>)
 8002124:	f005 f9c4 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800212e:	f000 f8d7 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000026c 	.word	0x2000026c
 8002140:	40001000 	.word	0x40001000

08002144 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <MX_TIM7_Init+0x64>)
 8002156:	4a15      	ldr	r2, [pc, #84]	@ (80021ac <MX_TIM7_Init+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 159;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <MX_TIM7_Init+0x64>)
 800215c:	229f      	movs	r2, #159	@ 0x9f
 800215e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <MX_TIM7_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <MX_TIM7_Init+0x64>)
 8002168:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800216c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <MX_TIM7_Init+0x64>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <MX_TIM7_Init+0x64>)
 8002176:	f004 fecf 	bl	8006f18 <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002180:	f000 f8ae 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <MX_TIM7_Init+0x64>)
 8002192:	f005 f98d 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800219c:	f000 f8a0 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200002b8 	.word	0x200002b8
 80021ac:	40001400 	.word	0x40001400

080021b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021b6:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <MX_DMA_Init+0x38>)
 80021b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ba:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <MX_DMA_Init+0x38>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <MX_DMA_Init+0x38>)
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	200b      	movs	r0, #11
 80021d4:	f002 f86b 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021d8:	200b      	movs	r0, #11
 80021da:	f002 f884 	bl	80042e6 <HAL_NVIC_EnableIRQ>

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000

080021ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	4b35      	ldr	r3, [pc, #212]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	4a34      	ldr	r2, [pc, #208]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220e:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	4b2f      	ldr	r3, [pc, #188]	@ (80022d8 <MX_GPIO_Init+0xec>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	4a2e      	ldr	r2, [pc, #184]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002226:	4b2c      	ldr	r3, [pc, #176]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a28      	ldr	r2, [pc, #160]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223e:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <MX_GPIO_Init+0xec>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_IO1_2_Pin|CS_IO3_4_Pin|CS_Radio_Pin|IO_Reset_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f240 2107 	movw	r1, #519	@ 0x207
 8002250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002254:	f002 fc1c 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_IO1_2_Pin CS_IO3_4_Pin CS_Radio_Pin IO_Reset_Pin */
  GPIO_InitStruct.Pin = CS_IO1_2_Pin|CS_IO3_4_Pin|CS_Radio_Pin|IO_Reset_Pin;
 8002258:	f240 2307 	movw	r3, #519	@ 0x207
 800225c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4619      	mov	r1, r3
 8002270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002274:	f002 fa4a 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pins : TriState_Down_Pin TriState_Up_Pin SendCode_Pin RequestCode_Pin
                           ReleasePod_Pin */
  GPIO_InitStruct.Pin = TriState_Down_Pin|TriState_Up_Pin|SendCode_Pin|RequestCode_Pin
 8002278:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800227c:	60fb      	str	r3, [r7, #12]
                          |ReleasePod_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4619      	mov	r1, r3
 800228e:	4813      	ldr	r0, [pc, #76]	@ (80022dc <MX_GPIO_Init+0xf0>)
 8002290:	f002 fa3c 	bl	800470c <HAL_GPIO_Init>

  /*Configure GPIO pin : Radio_DIO_Pin */
  GPIO_InitStruct.Pin = Radio_DIO_Pin;
 8002294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Radio_DIO_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 030c 	add.w	r3, r7, #12
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ac:	f002 fa2e 	bl	800470c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2017      	movs	r0, #23
 80022b6:	f001 fffa 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022ba:	2017      	movs	r0, #23
 80022bc:	f002 f813 	bl	80042e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2028      	movs	r0, #40	@ 0x28
 80022c6:	f001 fff2 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022ca:	2028      	movs	r0, #40	@ 0x28
 80022cc:	f002 f80b 	bl	80042e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022d0:	bf00      	nop
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48000800 	.word	0x48000800

080022e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <Error_Handler+0x8>

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <HAL_MspInit+0x44>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_MspInit+0x44>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_MspInit+0x44>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	4a08      	ldr	r2, [pc, #32]	@ (8002330 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	@ 0x58
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_MspInit+0x44>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b0ac      	sub	sp, #176	@ 0xb0
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2288      	movs	r2, #136	@ 0x88
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f005 f951 	bl	80075fc <memset>
  if(hadc->Instance==ADC1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a40      	ldr	r2, [pc, #256]	@ (8002460 <HAL_ADC_MspInit+0x12c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d179      	bne.n	8002458 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002364:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002368:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800236a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800236e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800237a:	2308      	movs	r3, #8
 800237c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800237e:	2307      	movs	r3, #7
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002382:	2302      	movs	r3, #2
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002386:	2302      	movs	r3, #2
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800238a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800238e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4618      	mov	r0, r3
 8002396:	f003 f9d7 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80023a0:	f7ff ff9e 	bl	80022e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <HAL_ADC_MspInit+0x130>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002464 <HAL_ADC_MspInit+0x130>)
 80023aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <HAL_ADC_MspInit+0x130>)
 80023b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023bc:	4b29      	ldr	r3, [pc, #164]	@ (8002464 <HAL_ADC_MspInit+0x130>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c0:	4a28      	ldr	r2, [pc, #160]	@ (8002464 <HAL_ADC_MspInit+0x130>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c8:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <HAL_ADC_MspInit+0x130>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023da:	230b      	movs	r3, #11
 80023dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023ea:	4619      	mov	r1, r3
 80023ec:	481e      	ldr	r0, [pc, #120]	@ (8002468 <HAL_ADC_MspInit+0x134>)
 80023ee:	f002 f98d 	bl	800470c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_ADC_MspInit+0x138>)
 80023f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002470 <HAL_ADC_MspInit+0x13c>)
 80023f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <HAL_ADC_MspInit+0x138>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fe:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002404:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_ADC_MspInit+0x138>)
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002412:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002416:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <HAL_ADC_MspInit+0x138>)
 800241a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800242c:	480f      	ldr	r0, [pc, #60]	@ (800246c <HAL_ADC_MspInit+0x138>)
 800242e:	f001 ff75 	bl	800431c <HAL_DMA_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8002438:	f7ff ff52 	bl	80022e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a0b      	ldr	r2, [pc, #44]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002440:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <HAL_ADC_MspInit+0x138>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2012      	movs	r0, #18
 800244e:	f001 ff2e 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002452:	2012      	movs	r0, #18
 8002454:	f001 ff47 	bl	80042e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002458:	bf00      	nop
 800245a:	37b0      	adds	r7, #176	@ 0xb0
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	50040000 	.word	0x50040000
 8002464:	40021000 	.word	0x40021000
 8002468:	48000800 	.word	0x48000800
 800246c:	200001c0 	.word	0x200001c0
 8002470:	40020008 	.word	0x40020008

08002474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	@ 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_SPI_MspInit+0xb4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d144      	bne.n	8002520 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002496:	4b25      	ldr	r3, [pc, #148]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249a:	4a24      	ldr	r2, [pc, #144]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 800249c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024a2:	4b22      	ldr	r3, [pc, #136]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b1f      	ldr	r3, [pc, #124]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ba:	4b1c      	ldr	r3, [pc, #112]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_SPI_MspInit+0xb8>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024de:	23c0      	movs	r3, #192	@ 0xc0
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ea:	2303      	movs	r3, #3
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ee:	2305      	movs	r3, #5
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fc:	f002 f906 	bl	800470c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002500:	2308      	movs	r3, #8
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002510:	2305      	movs	r3, #5
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <HAL_SPI_MspInit+0xbc>)
 800251c:	f002 f8f6 	bl	800470c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002520:	bf00      	nop
 8002522:	3728      	adds	r7, #40	@ 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013000 	.word	0x40013000
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400

08002534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1a      	ldr	r2, [pc, #104]	@ (80025ac <HAL_TIM_Base_MspInit+0x78>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d114      	bne.n	8002570 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002546:	4b1a      	ldr	r3, [pc, #104]	@ (80025b0 <HAL_TIM_Base_MspInit+0x7c>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_TIM_Base_MspInit+0x7c>)
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	6593      	str	r3, [r2, #88]	@ 0x58
 8002552:	4b17      	ldr	r3, [pc, #92]	@ (80025b0 <HAL_TIM_Base_MspInit+0x7c>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	2036      	movs	r0, #54	@ 0x36
 8002564:	f001 fea3 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002568:	2036      	movs	r0, #54	@ 0x36
 800256a:	f001 febc 	bl	80042e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800256e:	e018      	b.n	80025a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0f      	ldr	r2, [pc, #60]	@ (80025b4 <HAL_TIM_Base_MspInit+0x80>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d113      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <HAL_TIM_Base_MspInit+0x7c>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	4a0c      	ldr	r2, [pc, #48]	@ (80025b0 <HAL_TIM_Base_MspInit+0x7c>)
 8002580:	f043 0320 	orr.w	r3, r3, #32
 8002584:	6593      	str	r3, [r2, #88]	@ 0x58
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_TIM_Base_MspInit+0x7c>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2037      	movs	r0, #55	@ 0x37
 8002598:	f001 fe89 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800259c:	2037      	movs	r0, #55	@ 0x37
 800259e:	f001 fea2 	bl	80042e6 <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40001000 	.word	0x40001000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40001400 	.word	0x40001400

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <NMI_Handler+0x4>

080025c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <MemManage_Handler+0x4>

080025d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <UsageFault_Handler+0x4>

080025e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260e:	f000 f8d7 	bl	80027c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <DMA1_Channel1_IRQHandler+0x10>)
 800261e:	f001 ff95 	bl	800454c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200001c0 	.word	0x200001c0

0800262c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <ADC1_2_IRQHandler+0x10>)
 8002632:	f000 fd0b 	bl	800304c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000015c 	.word	0x2000015c

08002640 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TriState_Down_Pin);
 8002644:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002648:	f002 fa3a 	bl	8004ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TriState_Up_Pin);
 800264c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002650:	f002 fa36 	bl	8004ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}

08002658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SendCode_Pin);
 800265c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002660:	f002 fa2e 	bl	8004ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RequestCode_Pin);
 8002664:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002668:	f002 fa2a 	bl	8004ac0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ReleasePod_Pin);
 800266c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002670:	f002 fa26 	bl	8004ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}

08002678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800267c:	4802      	ldr	r0, [pc, #8]	@ (8002688 <TIM6_DAC_IRQHandler+0x10>)
 800267e:	f004 fd42 	bl	8007106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000026c 	.word	0x2000026c

0800268c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002690:	4802      	ldr	r0, [pc, #8]	@ (800269c <TIM7_IRQHandler+0x10>)
 8002692:	f004 fd38 	bl	8007106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200002b8 	.word	0x200002b8

080026a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <SystemInit+0x20>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <SystemInit+0x20>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c8:	f7ff ffea 	bl	80026a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026cc:	480c      	ldr	r0, [pc, #48]	@ (8002700 <LoopForever+0x6>)
  ldr r1, =_edata
 80026ce:	490d      	ldr	r1, [pc, #52]	@ (8002704 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <LoopForever+0xe>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d4:	e002      	b.n	80026dc <LoopCopyDataInit>

080026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026da:	3304      	adds	r3, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e0:	d3f9      	bcc.n	80026d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <LoopForever+0x12>)
  ldr r4, =_ebss
 80026e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002710 <LoopForever+0x16>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e8:	e001      	b.n	80026ee <LoopFillZerobss>

080026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ec:	3204      	adds	r2, #4

080026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f0:	d3fb      	bcc.n	80026ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f2:	f004 ff8b 	bl	800760c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026f6:	f7ff fbc0 	bl	8001e7a <main>

080026fa <LoopForever>:

LoopForever:
    b LoopForever
 80026fa:	e7fe      	b.n	80026fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002708:	080076f4 	.word	0x080076f4
  ldr r2, =_sbss
 800270c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002710:	20000308 	.word	0x20000308

08002714 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC3_IRQHandler>

08002716 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002720:	2003      	movs	r0, #3
 8002722:	f001 fdb9 	bl	8004298 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002726:	200f      	movs	r0, #15
 8002728:	f000 f80e 	bl	8002748 <HAL_InitTick>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	71fb      	strb	r3, [r7, #7]
 8002736:	e001      	b.n	800273c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002738:	f7ff fdd8 	bl	80022ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800273c:	79fb      	ldrb	r3, [r7, #7]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002754:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <HAL_InitTick+0x6c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d023      	beq.n	80027a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800275c:	4b16      	ldr	r3, [pc, #88]	@ (80027b8 <HAL_InitTick+0x70>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_InitTick+0x6c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276a:	fbb3 f3f1 	udiv	r3, r3, r1
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f001 fdc5 	bl	8004302 <HAL_SYSTICK_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d809      	bhi.n	8002798 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f001 fd8f 	bl	80042ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002790:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <HAL_InitTick+0x74>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e007      	b.n	80027a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e004      	b.n	80027a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e001      	b.n	80027a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000024 	.word	0x20000024
 80027b8:	2000001c 	.word	0x2000001c
 80027bc:	20000020 	.word	0x20000020

080027c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c4:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_IncTick+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_IncTick+0x24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_IncTick+0x24>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000024 	.word	0x20000024
 80027e4:	20000304 	.word	0x20000304

080027e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <HAL_GetTick+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000304 	.word	0x20000304

08002800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff ffee 	bl	80027e8 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d005      	beq.n	8002826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_Delay+0x44>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002826:	bf00      	nop
 8002828:	f7ff ffde 	bl	80027e8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f7      	bhi.n	8002828 <HAL_Delay+0x28>
  {
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000024 	.word	0x20000024

08002848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3360      	adds	r3, #96	@ 0x60
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <LL_ADC_SetOffset+0x44>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	4313      	orrs	r3, r2
 80028e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	03fff000 	.word	0x03fff000

080028f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3360      	adds	r3, #96	@ 0x60
 8002906:	461a      	mov	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3360      	adds	r3, #96	@ 0x60
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3330      	adds	r3, #48	@ 0x30
 8002990:	461a      	mov	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	4413      	add	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	211f      	movs	r1, #31
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 011f 	and.w	r1, r3, #31
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0e5b      	lsrs	r3, r3, #25
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0d1b      	lsrs	r3, r3, #20
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2107      	movs	r1, #7
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	401a      	ands	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	0d1b      	lsrs	r3, r3, #20
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	431a      	orrs	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0318 	and.w	r3, r3, #24
 8002a76:	4908      	ldr	r1, [pc, #32]	@ (8002a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a78:	40d9      	lsrs	r1, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	0007ffff 	.word	0x0007ffff

08002a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6093      	str	r3, [r2, #8]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0c:	d101      	bne.n	8002b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <LL_ADC_IsEnabled+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_ADC_IsEnabled+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d101      	bne.n	8002bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b089      	sub	sp, #36	@ 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e130      	b.n	8002eb0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fb69 	bl	8002334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff3f 	bl	8002af8 <LL_ADC_IsDeepPowerDownEnabled>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff25 	bl	8002ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff5a 	bl	8002b48 <LL_ADC_IsInternalRegulatorEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff3e 	bl	8002b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ca4:	4b84      	ldr	r3, [pc, #528]	@ (8002eb8 <HAL_ADC_Init+0x284>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	4a84      	ldr	r2, [pc, #528]	@ (8002ebc <HAL_ADC_Init+0x288>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f9      	bne.n	8002cba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff3c 	bl	8002b48 <LL_ADC_IsInternalRegulatorEnabled>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff75 	bl	8002be6 <LL_ADC_REG_IsConversionOngoing>
 8002cfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80c9 	bne.w	8002e9e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 80c5 	bne.w	8002e9e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d1c:	f043 0202 	orr.w	r2, r3, #2
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff35 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d115      	bne.n	8002d60 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d34:	4862      	ldr	r0, [pc, #392]	@ (8002ec0 <HAL_ADC_Init+0x28c>)
 8002d36:	f7ff ff2f 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4861      	ldr	r0, [pc, #388]	@ (8002ec4 <HAL_ADC_Init+0x290>)
 8002d3e:	f7ff ff2b 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	431c      	orrs	r4, r3
 8002d46:	4860      	ldr	r0, [pc, #384]	@ (8002ec8 <HAL_ADC_Init+0x294>)
 8002d48:	f7ff ff26 	bl	8002b98 <LL_ADC_IsEnabled>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4323      	orrs	r3, r4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	485c      	ldr	r0, [pc, #368]	@ (8002ecc <HAL_ADC_Init+0x298>)
 8002d5c:	f7ff fd74 	bl	8002848 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7e5b      	ldrb	r3, [r3, #25]
 8002d64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d106      	bne.n	8002d9c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	3b01      	subs	r3, #1
 8002d94:	045b      	lsls	r3, r3, #17
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	4b44      	ldr	r3, [pc, #272]	@ (8002ed0 <HAL_ADC_Init+0x29c>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff1b 	bl	8002c0c <LL_ADC_INJ_IsConversionOngoing>
 8002dd6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d13d      	bne.n	8002e5a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13a      	bne.n	8002e5a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002df0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e00:	f023 0302 	bic.w	r3, r3, #2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d118      	bne.n	8002e4a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e22:	f023 0304 	bic.w	r3, r3, #4
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
 8002e48:	e007      	b.n	8002e5a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10c      	bne.n	8002e7c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	f023 010f 	bic.w	r1, r3, #15
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	1e5a      	subs	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e7a:	e007      	b.n	8002e8c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020f 	bic.w	r2, r2, #15
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e9c:	e007      	b.n	8002eae <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f043 0210 	orr.w	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3724      	adds	r7, #36	@ 0x24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd90      	pop	{r4, r7, pc}
 8002eb8:	2000001c 	.word	0x2000001c
 8002ebc:	053e2d63 	.word	0x053e2d63
 8002ec0:	50040000 	.word	0x50040000
 8002ec4:	50040100 	.word	0x50040100
 8002ec8:	50040200 	.word	0x50040200
 8002ecc:	50040300 	.word	0x50040300
 8002ed0:	fff0c007 	.word	0xfff0c007

08002ed4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee0:	4853      	ldr	r0, [pc, #332]	@ (8003030 <HAL_ADC_Start_DMA+0x15c>)
 8002ee2:	f7ff fddb 	bl	8002a9c <LL_ADC_GetMultimode>
 8002ee6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fe7a 	bl	8002be6 <LL_ADC_REG_IsConversionOngoing>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 8093 	bne.w	8003020 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x34>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e08e      	b.n	8003026 <HAL_ADC_Start_DMA+0x152>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a47      	ldr	r2, [pc, #284]	@ (8003034 <HAL_ADC_Start_DMA+0x160>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d008      	beq.n	8002f2c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d002      	beq.n	8002f2c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	d172      	bne.n	8003012 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fec1 	bl	8003cb4 <ADC_Enable>
 8002f32:	4603      	mov	r3, r0
 8002f34:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d165      	bne.n	8003008 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <HAL_ADC_Start_DMA+0x164>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d002      	beq.n	8002f60 <HAL_ADC_Start_DMA+0x8c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e000      	b.n	8002f62 <HAL_ADC_Start_DMA+0x8e>
 8002f60:	4b36      	ldr	r3, [pc, #216]	@ (800303c <HAL_ADC_Start_DMA+0x168>)
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d002      	beq.n	8002f70 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	f023 0206 	bic.w	r2, r3, #6
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f94:	e002      	b.n	8002f9c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa0:	4a27      	ldr	r2, [pc, #156]	@ (8003040 <HAL_ADC_Start_DMA+0x16c>)
 8002fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	4a26      	ldr	r2, [pc, #152]	@ (8003044 <HAL_ADC_Start_DMA+0x170>)
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb0:	4a25      	ldr	r2, [pc, #148]	@ (8003048 <HAL_ADC_Start_DMA+0x174>)
 8002fb2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	221c      	movs	r2, #28
 8002fba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0210 	orr.w	r2, r2, #16
 8002fd2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3340      	adds	r3, #64	@ 0x40
 8002fee:	4619      	mov	r1, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f001 fa4a 	bl	800448c <HAL_DMA_Start_IT>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fddc 	bl	8002bbe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003006:	e00d      	b.n	8003024 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003010:	e008      	b.n	8003024 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800301e:	e001      	b.n	8003024 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003020:	2302      	movs	r3, #2
 8003022:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	50040300 	.word	0x50040300
 8003034:	50040200 	.word	0x50040200
 8003038:	50040100 	.word	0x50040100
 800303c:	50040000 	.word	0x50040000
 8003040:	08003dc1 	.word	0x08003dc1
 8003044:	08003e99 	.word	0x08003e99
 8003048:	08003eb5 	.word	0x08003eb5

0800304c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	@ 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003068:	4882      	ldr	r0, [pc, #520]	@ (8003274 <HAL_ADC_IRQHandler+0x228>)
 800306a:	f7ff fd17 	bl	8002a9c <LL_ADC_GetMultimode>
 800306e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d017      	beq.n	80030aa <HAL_ADC_IRQHandler+0x5e>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d012      	beq.n	80030aa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003094:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 ff71 	bl	8003f84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_ADC_IRQHandler+0x72>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8083 	beq.w	80031d0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07d      	beq.n	80031d0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fc32 	bl	800295a <LL_ADC_REG_IsTriggerSourceSWStart>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d062      	beq.n	80031c2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5d      	ldr	r2, [pc, #372]	@ (8003278 <HAL_ADC_IRQHandler+0x22c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d002      	beq.n	800310c <HAL_ADC_IRQHandler+0xc0>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	e000      	b.n	800310e <HAL_ADC_IRQHandler+0xc2>
 800310c:	4b5b      	ldr	r3, [pc, #364]	@ (800327c <HAL_ADC_IRQHandler+0x230>)
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4293      	cmp	r3, r2
 8003114:	d008      	beq.n	8003128 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d002      	beq.n	8003128 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b09      	cmp	r3, #9
 8003126:	d104      	bne.n	8003132 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	e00c      	b.n	800314c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a50      	ldr	r2, [pc, #320]	@ (8003278 <HAL_ADC_IRQHandler+0x22c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d002      	beq.n	8003142 <HAL_ADC_IRQHandler+0xf6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	e000      	b.n	8003144 <HAL_ADC_IRQHandler+0xf8>
 8003142:	4b4e      	ldr	r3, [pc, #312]	@ (800327c <HAL_ADC_IRQHandler+0x230>)
 8003144:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d135      	bne.n	80031c2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b08      	cmp	r3, #8
 8003162:	d12e      	bne.n	80031c2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fd3c 	bl	8002be6 <LL_ADC_REG_IsConversionOngoing>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11a      	bne.n	80031aa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 020c 	bic.w	r2, r2, #12
 8003182:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d112      	bne.n	80031c2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80031a8:	e00b      	b.n	80031c2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f95c 	bl	8003480 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	220c      	movs	r2, #12
 80031ce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x198>
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 809f 	beq.w	800332e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8099 	beq.w	800332e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fbdd 	bl	80029d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800321e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fb98 	bl	800295a <LL_ADC_REG_IsTriggerSourceSWStart>
 800322a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a11      	ldr	r2, [pc, #68]	@ (8003278 <HAL_ADC_IRQHandler+0x22c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d002      	beq.n	800323c <HAL_ADC_IRQHandler+0x1f0>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e000      	b.n	800323e <HAL_ADC_IRQHandler+0x1f2>
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <HAL_ADC_IRQHandler+0x230>)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4293      	cmp	r3, r2
 8003244:	d008      	beq.n	8003258 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d002      	beq.n	8003258 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b07      	cmp	r3, #7
 8003256:	d104      	bne.n	8003262 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	e013      	b.n	800328a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <HAL_ADC_IRQHandler+0x22c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_ADC_IRQHandler+0x234>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	e007      	b.n	8003282 <HAL_ADC_IRQHandler+0x236>
 8003272:	bf00      	nop
 8003274:	50040300 	.word	0x50040300
 8003278:	50040100 	.word	0x50040100
 800327c:	50040000 	.word	0x50040000
 8003280:	4b7d      	ldr	r3, [pc, #500]	@ (8003478 <HAL_ADC_IRQHandler+0x42c>)
 8003282:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d047      	beq.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_ADC_IRQHandler+0x25e>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03f      	beq.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d13a      	bne.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b40      	cmp	r3, #64	@ 0x40
 80032b6:	d133      	bne.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12e      	bne.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fca0 	bl	8002c0c <LL_ADC_INJ_IsConversionOngoing>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11a      	bne.n	8003308 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032e0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d112      	bne.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
 8003306:	e00b      	b.n	8003320 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330c:	f043 0210 	orr.w	r2, r3, #16
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fe07 	bl	8003f34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2260      	movs	r2, #96	@ 0x60
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d011      	beq.n	800335c <HAL_ADC_IRQHandler+0x310>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003346:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8aa 	bl	80034a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2280      	movs	r2, #128	@ 0x80
 800335a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_ADC_IRQHandler+0x340>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003374:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fded 	bl	8003f5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003392:	2b00      	cmp	r3, #0
 8003394:	d012      	beq.n	80033bc <HAL_ADC_IRQHandler+0x370>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fddf 	bl	8003f70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d036      	beq.n	8003434 <HAL_ADC_IRQHandler+0x3e8>
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d031      	beq.n	8003434 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80033d8:	2301      	movs	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
 80033dc:	e014      	b.n	8003408 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033e4:	4825      	ldr	r0, [pc, #148]	@ (800347c <HAL_ADC_IRQHandler+0x430>)
 80033e6:	f7ff fb67 	bl	8002ab8 <LL_ADC_GetMultiDMATransfer>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	e008      	b.n	8003408 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003404:	2301      	movs	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	2b01      	cmp	r3, #1
 800340c:	d10e      	bne.n	800342c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003412:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341e:	f043 0202 	orr.w	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f848 	bl	80034bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2210      	movs	r2, #16
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343a:	2b00      	cmp	r3, #0
 800343c:	d018      	beq.n	8003470 <HAL_ADC_IRQHandler+0x424>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	f043 0208 	orr.w	r2, r3, #8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003468:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fd6c 	bl	8003f48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003470:	bf00      	nop
 8003472:	3728      	adds	r7, #40	@ 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	50040000 	.word	0x50040000
 800347c:	50040300 	.word	0x50040300

08003480 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b0b6      	sub	sp, #216	@ 0xd8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x22>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e3c9      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x7b6>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fb71 	bl	8002be6 <LL_ADC_REG_IsConversionOngoing>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 83aa 	bne.w	8003c60 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b05      	cmp	r3, #5
 800351a:	d824      	bhi.n	8003566 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	3b02      	subs	r3, #2
 8003522:	2b03      	cmp	r3, #3
 8003524:	d81b      	bhi.n	800355e <HAL_ADC_ConfigChannel+0x8e>
 8003526:	a201      	add	r2, pc, #4	@ (adr r2, 800352c <HAL_ADC_ConfigChannel+0x5c>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	08003545 	.word	0x08003545
 8003534:	0800354d 	.word	0x0800354d
 8003538:	08003555 	.word	0x08003555
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800353c:	230c      	movs	r3, #12
 800353e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003542:	e010      	b.n	8003566 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003544:	2312      	movs	r3, #18
 8003546:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800354a:	e00c      	b.n	8003566 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800354c:	2318      	movs	r3, #24
 800354e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003552:	e008      	b.n	8003566 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003554:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800355e:	2306      	movs	r3, #6
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003564:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003574:	f7ff fa04 	bl	8002980 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fb32 	bl	8002be6 <LL_ADC_REG_IsConversionOngoing>
 8003582:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fb3e 	bl	8002c0c <LL_ADC_INJ_IsConversionOngoing>
 8003590:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 81a4 	bne.w	80038e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800359e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 819f 	bne.w	80038e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f7ff fa22 	bl	80029fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	08db      	lsrs	r3, r3, #3
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d00a      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6919      	ldr	r1, [r3, #16]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ec:	f7ff f960 	bl	80028b0 <LL_ADC_SetOffset>
 80035f0:	e179      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f97d 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 80035fe:	4603      	mov	r3, r0
 8003600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_ADC_ConfigChannel+0x14e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff f972 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	e01e      	b.n	800365c <HAL_ADC_ConfigChannel+0x18c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f967 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 800362a:	4603      	mov	r3, r0
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800363c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003640:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e004      	b.n	800365a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1a4>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0e9b      	lsrs	r3, r3, #26
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	e018      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x1d6>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e004      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800369c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d106      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f936 	bl	8002924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f91a 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x214>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff f90f 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	0e9b      	lsrs	r3, r3, #26
 80036de:	f003 021f 	and.w	r2, r3, #31
 80036e2:	e01e      	b.n	8003722 <HAL_ADC_ConfigChannel+0x252>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f904 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003702:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800370a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003712:	2320      	movs	r3, #32
 8003714:	e004      	b.n	8003720 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_ADC_ConfigChannel+0x26a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	e018      	b.n	800376c <HAL_ADC_ConfigChannel+0x29c>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800374e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003752:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003756:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800375e:	2320      	movs	r3, #32
 8003760:	e004      	b.n	800376c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003762:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800376c:	429a      	cmp	r2, r3
 800376e:	d106      	bne.n	800377e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2200      	movs	r2, #0
 8003776:	2101      	movs	r1, #1
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff f8d3 	bl	8002924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff f8b7 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 800378a:	4603      	mov	r3, r0
 800378c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x2da>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2102      	movs	r1, #2
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff f8ac 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	0e9b      	lsrs	r3, r3, #26
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	e01e      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x318>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f8a1 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c0:	fa93 f3a3 	rbit	r3, r3
 80037c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80037c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80037d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80037d8:	2320      	movs	r3, #32
 80037da:	e004      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80037dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e0:	fab3 f383 	clz	r3, r3
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x330>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0e9b      	lsrs	r3, r3, #26
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	e014      	b.n	800382a <HAL_ADC_ConfigChannel+0x35a>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003808:	fa93 f3a3 	rbit	r3, r3
 800380c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800380e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e004      	b.n	800382a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003820:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800382a:	429a      	cmp	r2, r3
 800382c:	d106      	bne.n	800383c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	2102      	movs	r1, #2
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f874 	bl	8002924 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2103      	movs	r1, #3
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff f858 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x398>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2103      	movs	r1, #3
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff f84d 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 800385e:	4603      	mov	r3, r0
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 021f 	and.w	r2, r3, #31
 8003866:	e017      	b.n	8003898 <HAL_ADC_ConfigChannel+0x3c8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2103      	movs	r1, #3
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff f842 	bl	80028f8 <LL_ADC_GetOffsetChannel>
 8003874:	4603      	mov	r3, r0
 8003876:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003882:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e003      	b.n	8003896 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800388e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x3e0>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	e011      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x404>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80038be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80038c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80038c8:	2320      	movs	r3, #32
 80038ca:	e003      	b.n	80038d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80038cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d106      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	2103      	movs	r1, #3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff f81f 	bl	8002924 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f954 	bl	8002b98 <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 8140 	bne.w	8003b78 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	461a      	mov	r2, r3
 8003906:	f7ff f8a5 	bl	8002a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4a8f      	ldr	r2, [pc, #572]	@ (8003b4c <HAL_ADC_ConfigChannel+0x67c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	f040 8131 	bne.w	8003b78 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_ADC_ConfigChannel+0x46e>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	0e9b      	lsrs	r3, r3, #26
 800392c:	3301      	adds	r3, #1
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2b09      	cmp	r3, #9
 8003934:	bf94      	ite	ls
 8003936:	2301      	movls	r3, #1
 8003938:	2300      	movhi	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e019      	b.n	8003972 <HAL_ADC_ConfigChannel+0x4a2>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003956:	2320      	movs	r3, #32
 8003958:	e003      	b.n	8003962 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800395a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2b09      	cmp	r3, #9
 800396a:	bf94      	ite	ls
 800396c:	2301      	movls	r3, #1
 800396e:	2300      	movhi	r3, #0
 8003970:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003972:	2b00      	cmp	r3, #0
 8003974:	d079      	beq.n	8003a6a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x4c2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	3301      	adds	r3, #1
 800398a:	069b      	lsls	r3, r3, #26
 800398c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003990:	e015      	b.n	80039be <HAL_ADC_ConfigChannel+0x4ee>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80039a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80039a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e003      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80039ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	069b      	lsls	r3, r3, #26
 80039ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_ADC_ConfigChannel+0x50e>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0e9b      	lsrs	r3, r3, #26
 80039d0:	3301      	adds	r3, #1
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	e017      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x53e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80039ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80039f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80039f6:	2320      	movs	r3, #32
 80039f8:	e003      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80039fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	ea42 0103 	orr.w	r1, r2, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x564>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0e9b      	lsrs	r3, r3, #26
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 021f 	and.w	r2, r3, #31
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	051b      	lsls	r3, r3, #20
 8003a32:	e018      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x596>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e003      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f003 021f 	and.w	r2, r3, #31
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a66:	430b      	orrs	r3, r1
 8003a68:	e081      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x5b6>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0e9b      	lsrs	r3, r3, #26
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a84:	e015      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x5e2>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e003      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	069b      	lsls	r3, r3, #26
 8003aae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x602>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	0e9b      	lsrs	r3, r3, #26
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	e017      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x632>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	61bb      	str	r3, [r7, #24]
  return result;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e003      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	ea42 0103 	orr.w	r1, r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x65e>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0e9b      	lsrs	r3, r3, #26
 8003b18:	3301      	adds	r3, #1
 8003b1a:	f003 021f 	and.w	r2, r3, #31
 8003b1e:	4613      	mov	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4413      	add	r3, r2
 8003b24:	3b1e      	subs	r3, #30
 8003b26:	051b      	lsls	r3, r3, #20
 8003b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	e01e      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x69c>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	60fb      	str	r3, [r7, #12]
  return result;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e006      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x688>
 8003b4a:	bf00      	nop
 8003b4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f003 021f 	and.w	r2, r3, #31
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	3b1e      	subs	r3, #30
 8003b66:	051b      	lsls	r3, r3, #20
 8003b68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fe ff43 	bl	80029fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b44      	ldr	r3, [pc, #272]	@ (8003c90 <HAL_ADC_ConfigChannel+0x7c0>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d07a      	beq.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b84:	4843      	ldr	r0, [pc, #268]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7c4>)
 8003b86:	f7fe fe85 	bl	8002894 <LL_ADC_GetCommonPathInternalCh>
 8003b8a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a41      	ldr	r2, [pc, #260]	@ (8003c98 <HAL_ADC_ConfigChannel+0x7c8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d12c      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d126      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	@ (8003c9c <HAL_ADC_ConfigChannel+0x7cc>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_ADC_ConfigChannel+0x6e8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d15d      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4834      	ldr	r0, [pc, #208]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bc4:	f7fe fe53 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	099b      	lsrs	r3, r3, #6
 8003bce:	4a36      	ldr	r2, [pc, #216]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003be2:	e002      	b.n	8003bea <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f9      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bf0:	e040      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8003cac <HAL_ADC_ConfigChannel+0x7dc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d118      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d112      	bne.n	8003c2e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a23      	ldr	r2, [pc, #140]	@ (8003c9c <HAL_ADC_ConfigChannel+0x7cc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_ADC_ConfigChannel+0x74c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a22      	ldr	r2, [pc, #136]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d12d      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c24:	4619      	mov	r1, r3
 8003c26:	481b      	ldr	r0, [pc, #108]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c28:	f7fe fe21 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c2c:	e024      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d120      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11a      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <HAL_ADC_ConfigChannel+0x7cc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d115      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c56:	4619      	mov	r1, r3
 8003c58:	480e      	ldr	r0, [pc, #56]	@ (8003c94 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c5a:	f7fe fe08 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
 8003c5e:	e00c      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003c72:	e002      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c82:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	37d8      	adds	r7, #216	@ 0xd8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	80080000 	.word	0x80080000
 8003c94:	50040300 	.word	0x50040300
 8003c98:	c7520000 	.word	0xc7520000
 8003c9c:	50040000 	.word	0x50040000
 8003ca0:	50040200 	.word	0x50040200
 8003ca4:	2000001c 	.word	0x2000001c
 8003ca8:	053e2d63 	.word	0x053e2d63
 8003cac:	cb840000 	.word	0xcb840000
 8003cb0:	80000001 	.word	0x80000001

08003cb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe ff67 	bl	8002b98 <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d169      	bne.n	8003da4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b36      	ldr	r3, [pc, #216]	@ (8003db0 <ADC_Enable+0xfc>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e055      	b.n	8003da6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe ff36 	bl	8002b70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d04:	482b      	ldr	r0, [pc, #172]	@ (8003db4 <ADC_Enable+0x100>)
 8003d06:	f7fe fdc5 	bl	8002894 <LL_ADC_GetCommonPathInternalCh>
 8003d0a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d14:	4b28      	ldr	r3, [pc, #160]	@ (8003db8 <ADC_Enable+0x104>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	4a28      	ldr	r2, [pc, #160]	@ (8003dbc <ADC_Enable+0x108>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d2e:	e002      	b.n	8003d36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f9      	bne.n	8003d30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fd54 	bl	80027e8 <HAL_GetTick>
 8003d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d42:	e028      	b.n	8003d96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe ff25 	bl	8002b98 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe ff09 	bl	8002b70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d5e:	f7fe fd43 	bl	80027e8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d914      	bls.n	8003d96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00d      	beq.n	8003d96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f043 0210 	orr.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	f043 0201 	orr.w	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e007      	b.n	8003da6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d1cf      	bne.n	8003d44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	8000003f 	.word	0x8000003f
 8003db4:	50040300 	.word	0x50040300
 8003db8:	2000001c 	.word	0x2000001c
 8003dbc:	053e2d63 	.word	0x053e2d63

08003dc0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d14b      	bne.n	8003e72 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dde:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d021      	beq.n	8003e38 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fdae 	bl	800295a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d032      	beq.n	8003e6a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d12b      	bne.n	8003e6a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11f      	bne.n	8003e6a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e36:	e018      	b.n	8003e6a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d111      	bne.n	8003e6a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d105      	bne.n	8003e6a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fb08 	bl	8003480 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e70:	e00e      	b.n	8003e90 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff fb1c 	bl	80034bc <HAL_ADC_ErrorCallback>
}
 8003e84:	e004      	b.n	8003e90 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff faf4 	bl	8003494 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	f043 0204 	orr.w	r2, r3, #4
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff faee 	bl	80034bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <LL_ADC_IsEnabled>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <LL_ADC_IsEnabled+0x18>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_ADC_IsEnabled+0x1a>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_ADC_REG_IsConversionOngoing>:
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d101      	bne.n	8003f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003f98:	b590      	push	{r4, r7, lr}
 8003f9a:	b09f      	sub	sp, #124	@ 0x7c
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e093      	b.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d102      	bne.n	8003fd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fd0:	4b46      	ldr	r3, [pc, #280]	@ (80040ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	e001      	b.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e072      	b.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff87 	bl	8003f0e <LL_ADC_REG_IsConversionOngoing>
 8004000:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ff81 	bl	8003f0e <LL_ADC_REG_IsConversionOngoing>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d154      	bne.n	80040bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004014:	2b00      	cmp	r3, #0
 8004016:	d151      	bne.n	80040bc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004018:	4b35      	ldr	r3, [pc, #212]	@ (80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800401a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d02c      	beq.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004036:	035b      	lsls	r3, r3, #13
 8004038:	430b      	orrs	r3, r1
 800403a:	431a      	orrs	r2, r3
 800403c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800403e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004040:	4829      	ldr	r0, [pc, #164]	@ (80040e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004042:	f7ff ff51 	bl	8003ee8 <LL_ADC_IsEnabled>
 8004046:	4604      	mov	r4, r0
 8004048:	4828      	ldr	r0, [pc, #160]	@ (80040ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800404a:	f7ff ff4d 	bl	8003ee8 <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	431c      	orrs	r4, r3
 8004052:	4828      	ldr	r0, [pc, #160]	@ (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004054:	f7ff ff48 	bl	8003ee8 <LL_ADC_IsEnabled>
 8004058:	4603      	mov	r3, r0
 800405a:	4323      	orrs	r3, r4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d137      	bne.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004068:	f023 030f 	bic.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	6811      	ldr	r1, [r2, #0]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	6892      	ldr	r2, [r2, #8]
 8004074:	430a      	orrs	r2, r1
 8004076:	431a      	orrs	r2, r3
 8004078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800407a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800407c:	e028      	b.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800407e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004088:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800408a:	4817      	ldr	r0, [pc, #92]	@ (80040e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800408c:	f7ff ff2c 	bl	8003ee8 <LL_ADC_IsEnabled>
 8004090:	4604      	mov	r4, r0
 8004092:	4816      	ldr	r0, [pc, #88]	@ (80040ec <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004094:	f7ff ff28 	bl	8003ee8 <LL_ADC_IsEnabled>
 8004098:	4603      	mov	r3, r0
 800409a:	431c      	orrs	r4, r3
 800409c:	4815      	ldr	r0, [pc, #84]	@ (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800409e:	f7ff ff23 	bl	8003ee8 <LL_ADC_IsEnabled>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4323      	orrs	r3, r4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d112      	bne.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80040b2:	f023 030f 	bic.w	r3, r3, #15
 80040b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040ba:	e009      	b.n	80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80040ce:	e000      	b.n	80040d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80040da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80040de:	4618      	mov	r0, r3
 80040e0:	377c      	adds	r7, #124	@ 0x7c
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	50040000 	.word	0x50040000
 80040ec:	50040100 	.word	0x50040100
 80040f0:	50040300 	.word	0x50040300
 80040f4:	50040200 	.word	0x50040200

080040f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004108:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <__NVIC_SetPriorityGrouping+0x44>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004114:	4013      	ands	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800412a:	4a04      	ldr	r2, [pc, #16]	@ (800413c <__NVIC_SetPriorityGrouping+0x44>)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	60d3      	str	r3, [r2, #12]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004144:	4b04      	ldr	r3, [pc, #16]	@ (8004158 <__NVIC_GetPriorityGrouping+0x18>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	f003 0307 	and.w	r3, r3, #7
}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	db0b      	blt.n	8004186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	4907      	ldr	r1, [pc, #28]	@ (8004194 <__NVIC_EnableIRQ+0x38>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2001      	movs	r0, #1
 800417e:	fa00 f202 	lsl.w	r2, r0, r2
 8004182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000e100 	.word	0xe000e100

08004198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	db0a      	blt.n	80041c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	490c      	ldr	r1, [pc, #48]	@ (80041e4 <__NVIC_SetPriority+0x4c>)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	0112      	lsls	r2, r2, #4
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	440b      	add	r3, r1
 80041bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c0:	e00a      	b.n	80041d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4908      	ldr	r1, [pc, #32]	@ (80041e8 <__NVIC_SetPriority+0x50>)
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	3b04      	subs	r3, #4
 80041d0:	0112      	lsls	r2, r2, #4
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	440b      	add	r3, r1
 80041d6:	761a      	strb	r2, [r3, #24]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000e100 	.word	0xe000e100
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f1c3 0307 	rsb	r3, r3, #7
 8004206:	2b04      	cmp	r3, #4
 8004208:	bf28      	it	cs
 800420a:	2304      	movcs	r3, #4
 800420c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3304      	adds	r3, #4
 8004212:	2b06      	cmp	r3, #6
 8004214:	d902      	bls.n	800421c <NVIC_EncodePriority+0x30>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3b03      	subs	r3, #3
 800421a:	e000      	b.n	800421e <NVIC_EncodePriority+0x32>
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43da      	mvns	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	401a      	ands	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004234:	f04f 31ff 	mov.w	r1, #4294967295
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	fa01 f303 	lsl.w	r3, r1, r3
 800423e:	43d9      	mvns	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	4313      	orrs	r3, r2
         );
}
 8004246:	4618      	mov	r0, r3
 8004248:	3724      	adds	r7, #36	@ 0x24
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004264:	d301      	bcc.n	800426a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004266:	2301      	movs	r3, #1
 8004268:	e00f      	b.n	800428a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800426a:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <SysTick_Config+0x40>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004272:	210f      	movs	r1, #15
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	f7ff ff8e 	bl	8004198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <SysTick_Config+0x40>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004282:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <SysTick_Config+0x40>)
 8004284:	2207      	movs	r2, #7
 8004286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000e010 	.word	0xe000e010

08004298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff29 	bl	80040f8 <__NVIC_SetPriorityGrouping>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4603      	mov	r3, r0
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c0:	f7ff ff3e 	bl	8004140 <__NVIC_GetPriorityGrouping>
 80042c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7ff ff8e 	bl	80041ec <NVIC_EncodePriority>
 80042d0:	4602      	mov	r2, r0
 80042d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff5d 	bl	8004198 <__NVIC_SetPriority>
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff31 	bl	800415c <__NVIC_EnableIRQ>
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff ffa2 	bl	8004254 <SysTick_Config>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e098      	b.n	8004460 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	4b4d      	ldr	r3, [pc, #308]	@ (800446c <HAL_DMA_Init+0x150>)
 8004336:	429a      	cmp	r2, r3
 8004338:	d80f      	bhi.n	800435a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	4b4b      	ldr	r3, [pc, #300]	@ (8004470 <HAL_DMA_Init+0x154>)
 8004342:	4413      	add	r3, r2
 8004344:	4a4b      	ldr	r2, [pc, #300]	@ (8004474 <HAL_DMA_Init+0x158>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	009a      	lsls	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a48      	ldr	r2, [pc, #288]	@ (8004478 <HAL_DMA_Init+0x15c>)
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40
 8004358:	e00e      	b.n	8004378 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	4b46      	ldr	r3, [pc, #280]	@ (800447c <HAL_DMA_Init+0x160>)
 8004362:	4413      	add	r3, r2
 8004364:	4a43      	ldr	r2, [pc, #268]	@ (8004474 <HAL_DMA_Init+0x158>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	009a      	lsls	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a42      	ldr	r2, [pc, #264]	@ (8004480 <HAL_DMA_Init+0x164>)
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800439c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d2:	d039      	beq.n	8004448 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	4a27      	ldr	r2, [pc, #156]	@ (8004478 <HAL_DMA_Init+0x15c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d11a      	bne.n	8004414 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80043de:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <HAL_DMA_Init+0x168>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e6:	f003 031c 	and.w	r3, r3, #28
 80043ea:	210f      	movs	r1, #15
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	4924      	ldr	r1, [pc, #144]	@ (8004484 <HAL_DMA_Init+0x168>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043f8:	4b22      	ldr	r3, [pc, #136]	@ (8004484 <HAL_DMA_Init+0x168>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004404:	f003 031c 	and.w	r3, r3, #28
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	491d      	ldr	r1, [pc, #116]	@ (8004484 <HAL_DMA_Init+0x168>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
 8004412:	e019      	b.n	8004448 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004414:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <HAL_DMA_Init+0x16c>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441c:	f003 031c 	and.w	r3, r3, #28
 8004420:	210f      	movs	r1, #15
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	4917      	ldr	r1, [pc, #92]	@ (8004488 <HAL_DMA_Init+0x16c>)
 800442a:	4013      	ands	r3, r2
 800442c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800442e:	4b16      	ldr	r3, [pc, #88]	@ (8004488 <HAL_DMA_Init+0x16c>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	f003 031c 	and.w	r3, r3, #28
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	4911      	ldr	r1, [pc, #68]	@ (8004488 <HAL_DMA_Init+0x16c>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40020407 	.word	0x40020407
 8004470:	bffdfff8 	.word	0xbffdfff8
 8004474:	cccccccd 	.word	0xcccccccd
 8004478:	40020000 	.word	0x40020000
 800447c:	bffdfbf8 	.word	0xbffdfbf8
 8004480:	40020400 	.word	0x40020400
 8004484:	400200a8 	.word	0x400200a8
 8004488:	400204a8 	.word	0x400204a8

0800448c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_DMA_Start_IT+0x20>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e04b      	b.n	8004544 <HAL_DMA_Start_IT+0xb8>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d13a      	bne.n	8004536 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f8e0 	bl	80046aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 020e 	orr.w	r2, r2, #14
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e00f      	b.n	8004524 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 020a 	orr.w	r2, r2, #10
 8004522:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e005      	b.n	8004542 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004568:	f003 031c 	and.w	r3, r3, #28
 800456c:	2204      	movs	r2, #4
 800456e:	409a      	lsls	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d026      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x7a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d021      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d107      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a4:	f003 021c 	and.w	r2, r3, #28
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	2104      	movs	r1, #4
 80045ae:	fa01 f202 	lsl.w	r2, r1, r2
 80045b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d071      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045c4:	e06c      	b.n	80046a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f003 031c 	and.w	r3, r3, #28
 80045ce:	2202      	movs	r2, #2
 80045d0:	409a      	lsls	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d02e      	beq.n	8004638 <HAL_DMA_IRQHandler+0xec>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d029      	beq.n	8004638 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 020a 	bic.w	r2, r2, #10
 8004600:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	f003 021c 	and.w	r2, r3, #28
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2102      	movs	r1, #2
 8004618:	fa01 f202 	lsl.w	r2, r1, r2
 800461c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d038      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004636:	e033      	b.n	80046a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463c:	f003 031c 	and.w	r3, r3, #28
 8004640:	2208      	movs	r2, #8
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d02a      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x156>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d025      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 020e 	bic.w	r2, r2, #14
 8004664:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f003 021c 	and.w	r2, r3, #28
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
}
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046bc:	f003 021c 	and.w	r2, r3, #28
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d108      	bne.n	80046ee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046ec:	e007      	b.n	80046fe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471a:	e17f      	b.n	8004a1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2101      	movs	r1, #1
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	fa01 f303 	lsl.w	r3, r1, r3
 8004728:	4013      	ands	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8171 	beq.w	8004a16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d005      	beq.n	800474c <HAL_GPIO_Init+0x40>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d130      	bne.n	80047ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004782:	2201      	movs	r2, #1
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0201 	and.w	r2, r3, #1
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d118      	bne.n	80047ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80047c0:	2201      	movs	r2, #1
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4013      	ands	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	08db      	lsrs	r3, r3, #3
 80047d6:	f003 0201 	and.w	r2, r3, #1
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d017      	beq.n	8004828 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d123      	bne.n	800487c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	08da      	lsrs	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3208      	adds	r2, #8
 8004876:	6939      	ldr	r1, [r7, #16]
 8004878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0203 	and.w	r2, r3, #3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 80ac 	beq.w	8004a16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048be:	4b5f      	ldr	r3, [pc, #380]	@ (8004a3c <HAL_GPIO_Init+0x330>)
 80048c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a3c <HAL_GPIO_Init+0x330>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80048ca:	4b5c      	ldr	r3, [pc, #368]	@ (8004a3c <HAL_GPIO_Init+0x330>)
 80048cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048d6:	4a5a      	ldr	r2, [pc, #360]	@ (8004a40 <HAL_GPIO_Init+0x334>)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004900:	d025      	beq.n	800494e <HAL_GPIO_Init+0x242>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a4f      	ldr	r2, [pc, #316]	@ (8004a44 <HAL_GPIO_Init+0x338>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01f      	beq.n	800494a <HAL_GPIO_Init+0x23e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a4e      	ldr	r2, [pc, #312]	@ (8004a48 <HAL_GPIO_Init+0x33c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d019      	beq.n	8004946 <HAL_GPIO_Init+0x23a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a4d      	ldr	r2, [pc, #308]	@ (8004a4c <HAL_GPIO_Init+0x340>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_GPIO_Init+0x236>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a4c      	ldr	r2, [pc, #304]	@ (8004a50 <HAL_GPIO_Init+0x344>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00d      	beq.n	800493e <HAL_GPIO_Init+0x232>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a4b      	ldr	r2, [pc, #300]	@ (8004a54 <HAL_GPIO_Init+0x348>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <HAL_GPIO_Init+0x22e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a58 <HAL_GPIO_Init+0x34c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <HAL_GPIO_Init+0x22a>
 8004932:	2306      	movs	r3, #6
 8004934:	e00c      	b.n	8004950 <HAL_GPIO_Init+0x244>
 8004936:	2307      	movs	r3, #7
 8004938:	e00a      	b.n	8004950 <HAL_GPIO_Init+0x244>
 800493a:	2305      	movs	r3, #5
 800493c:	e008      	b.n	8004950 <HAL_GPIO_Init+0x244>
 800493e:	2304      	movs	r3, #4
 8004940:	e006      	b.n	8004950 <HAL_GPIO_Init+0x244>
 8004942:	2303      	movs	r3, #3
 8004944:	e004      	b.n	8004950 <HAL_GPIO_Init+0x244>
 8004946:	2302      	movs	r3, #2
 8004948:	e002      	b.n	8004950 <HAL_GPIO_Init+0x244>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_GPIO_Init+0x244>
 800494e:	2300      	movs	r3, #0
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	f002 0203 	and.w	r2, r2, #3
 8004956:	0092      	lsls	r2, r2, #2
 8004958:	4093      	lsls	r3, r2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004960:	4937      	ldr	r1, [pc, #220]	@ (8004a40 <HAL_GPIO_Init+0x334>)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	3302      	adds	r3, #2
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800496e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	43db      	mvns	r3, r3
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004992:	4a32      	ldr	r2, [pc, #200]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004998:	4b30      	ldr	r3, [pc, #192]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049bc:	4a27      	ldr	r2, [pc, #156]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049c2:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049e6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a10:	4a12      	ldr	r2, [pc, #72]	@ (8004a5c <HAL_GPIO_Init+0x350>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f47f ae78 	bne.w	800471c <HAL_GPIO_Init+0x10>
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40010000 	.word	0x40010000
 8004a44:	48000400 	.word	0x48000400
 8004a48:	48000800 	.word	0x48000800
 8004a4c:	48000c00 	.word	0x48000c00
 8004a50:	48001000 	.word	0x48001000
 8004a54:	48001400 	.word	0x48001400
 8004a58:	48001800 	.word	0x48001800
 8004a5c:	40010400 	.word	0x40010400

08004a60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	e001      	b.n	8004a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aac:	e002      	b.n	8004ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d006      	beq.n	8004ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ad6:	4a05      	ldr	r2, [pc, #20]	@ (8004aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fc fc34 	bl	800134c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40010400 	.word	0x40010400

08004af0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004af4:	4b04      	ldr	r3, [pc, #16]	@ (8004b08 <HAL_PWREx_GetVoltageRange+0x18>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40007000 	.word	0x40007000

08004b0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b1a:	d130      	bne.n	8004b7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b1c:	4b23      	ldr	r3, [pc, #140]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b28:	d038      	beq.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b2a:	4b20      	ldr	r3, [pc, #128]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b32:	4a1e      	ldr	r2, [pc, #120]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2232      	movs	r2, #50	@ 0x32
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	0c9b      	lsrs	r3, r3, #18
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b50:	e002      	b.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b58:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b64:	d102      	bne.n	8004b6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f2      	bne.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b78:	d110      	bne.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e00f      	b.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d007      	beq.n	8004b9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b94:	4a05      	ldr	r2, [pc, #20]	@ (8004bac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	2000001c 	.word	0x2000001c
 8004bb4:	431bde83 	.word	0x431bde83

08004bb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e3ca      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bca:	4b97      	ldr	r3, [pc, #604]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd4:	4b94      	ldr	r3, [pc, #592]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 80e4 	beq.w	8004db4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCC_OscConfig+0x4a>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	f040 808b 	bne.w	8004d10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	f040 8087 	bne.w	8004d10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c02:	4b89      	ldr	r3, [pc, #548]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x62>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e3a2      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	4b82      	ldr	r3, [pc, #520]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7c>
 8004c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c32:	e005      	b.n	8004c40 <HAL_RCC_OscConfig+0x88>
 8004c34:	4b7c      	ldr	r3, [pc, #496]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d223      	bcs.n	8004c8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fd1d 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e383      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c58:	4b73      	ldr	r3, [pc, #460]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a72      	ldr	r2, [pc, #456]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c5e:	f043 0308 	orr.w	r3, r3, #8
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	4b70      	ldr	r3, [pc, #448]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	496d      	ldr	r1, [pc, #436]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c76:	4b6c      	ldr	r3, [pc, #432]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	4968      	ldr	r1, [pc, #416]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
 8004c8a:	e025      	b.n	8004cd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8c:	4b66      	ldr	r3, [pc, #408]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a65      	ldr	r2, [pc, #404]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	4b63      	ldr	r3, [pc, #396]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	4960      	ldr	r1, [pc, #384]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004caa:	4b5f      	ldr	r3, [pc, #380]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	495b      	ldr	r1, [pc, #364]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fcdd 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e343      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd8:	f000 fc4a 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b52      	ldr	r3, [pc, #328]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	4950      	ldr	r1, [pc, #320]	@ (8004e2c <HAL_RCC_OscConfig+0x274>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8004e30 <HAL_RCC_OscConfig+0x278>)
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8004e34 <HAL_RCC_OscConfig+0x27c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fd fd23 	bl	8002748 <HAL_InitTick>
 8004d02:	4603      	mov	r3, r0
 8004d04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d052      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	e327      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d032      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d18:	4b43      	ldr	r3, [pc, #268]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a42      	ldr	r2, [pc, #264]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d24:	f7fd fd60 	bl	80027e8 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d2c:	f7fd fd5c 	bl	80027e8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e310      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4a:	4b37      	ldr	r3, [pc, #220]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a36      	ldr	r2, [pc, #216]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d50:	f043 0308 	orr.w	r3, r3, #8
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	4b34      	ldr	r3, [pc, #208]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4931      	ldr	r1, [pc, #196]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d68:	4b2f      	ldr	r3, [pc, #188]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	492c      	ldr	r1, [pc, #176]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]
 8004d7c:	e01a      	b.n	8004db4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a29      	ldr	r2, [pc, #164]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d8a:	f7fd fd2d 	bl	80027e8 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d92:	f7fd fd29 	bl	80027e8 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e2dd      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004da4:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x1da>
 8004db0:	e000      	b.n	8004db4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004db2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d074      	beq.n	8004eaa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d005      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x21a>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d10e      	bne.n	8004dea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d10b      	bne.n	8004dea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd2:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d064      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x2f0>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d160      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e2ba      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x24a>
 8004df4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a0b      	ldr	r2, [pc, #44]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	e026      	b.n	8004e50 <HAL_RCC_OscConfig+0x298>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e0a:	d115      	bne.n	8004e38 <HAL_RCC_OscConfig+0x280>
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a05      	ldr	r2, [pc, #20]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004e12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b03      	ldr	r3, [pc, #12]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a02      	ldr	r2, [pc, #8]	@ (8004e28 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	e014      	b.n	8004e50 <HAL_RCC_OscConfig+0x298>
 8004e26:	bf00      	nop
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	080076a4 	.word	0x080076a4
 8004e30:	2000001c 	.word	0x2000001c
 8004e34:	20000020 	.word	0x20000020
 8004e38:	4ba0      	ldr	r3, [pc, #640]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a9f      	ldr	r2, [pc, #636]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b9d      	ldr	r3, [pc, #628]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a9c      	ldr	r2, [pc, #624]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d013      	beq.n	8004e80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fd fcc6 	bl	80027e8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fd fcc2 	bl	80027e8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	@ 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e276      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e72:	4b92      	ldr	r3, [pc, #584]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x2a8>
 8004e7e:	e014      	b.n	8004eaa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd fcb2 	bl	80027e8 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fd fcae 	bl	80027e8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	@ 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e262      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e9a:	4b88      	ldr	r3, [pc, #544]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x2d0>
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d060      	beq.n	8004f78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x310>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d119      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d116      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x328>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e23f      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee0:	4b76      	ldr	r3, [pc, #472]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	061b      	lsls	r3, r3, #24
 8004eee:	4973      	ldr	r1, [pc, #460]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef4:	e040      	b.n	8004f78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d023      	beq.n	8004f46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004efe:	4b6f      	ldr	r3, [pc, #444]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a6e      	ldr	r2, [pc, #440]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fd fc6d 	bl	80027e8 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f12:	f7fd fc69 	bl	80027e8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e21d      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f24:	4b65      	ldr	r3, [pc, #404]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f30:	4b62      	ldr	r3, [pc, #392]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	495f      	ldr	r1, [pc, #380]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	604b      	str	r3, [r1, #4]
 8004f44:	e018      	b.n	8004f78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f46:	4b5d      	ldr	r3, [pc, #372]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fd fc49 	bl	80027e8 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fd fc45 	bl	80027e8 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1f9      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f6c:	4b53      	ldr	r3, [pc, #332]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d03c      	beq.n	8004ffe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01c      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f92:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fd fc24 	bl	80027e8 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa4:	f7fd fc20 	bl	80027e8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e1d4      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb6:	4b41      	ldr	r3, [pc, #260]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0ef      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x3ec>
 8004fc4:	e01b      	b.n	8004ffe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fcc:	4a3b      	ldr	r2, [pc, #236]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7fd fc07 	bl	80027e8 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fde:	f7fd fc03 	bl	80027e8 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e1b7      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ff0:	4b32      	ldr	r3, [pc, #200]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ef      	bne.n	8004fde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80a6 	beq.w	8005158 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005010:	4b2a      	ldr	r3, [pc, #168]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800501c:	4b27      	ldr	r3, [pc, #156]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005020:	4a26      	ldr	r2, [pc, #152]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8005022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005026:	6593      	str	r3, [r2, #88]	@ 0x58
 8005028:	4b24      	ldr	r3, [pc, #144]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 800502a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005034:	2301      	movs	r3, #1
 8005036:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005038:	4b21      	ldr	r3, [pc, #132]	@ (80050c0 <HAL_RCC_OscConfig+0x508>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d118      	bne.n	8005076 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005044:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <HAL_RCC_OscConfig+0x508>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_RCC_OscConfig+0x508>)
 800504a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005050:	f7fd fbca 	bl	80027e8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005058:	f7fd fbc6 	bl	80027e8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e17a      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506a:	4b15      	ldr	r3, [pc, #84]	@ (80050c0 <HAL_RCC_OscConfig+0x508>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d108      	bne.n	8005090 <HAL_RCC_OscConfig+0x4d8>
 800507e:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005084:	4a0d      	ldr	r2, [pc, #52]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800508e:	e029      	b.n	80050e4 <HAL_RCC_OscConfig+0x52c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b05      	cmp	r3, #5
 8005096:	d115      	bne.n	80050c4 <HAL_RCC_OscConfig+0x50c>
 8005098:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509e:	4a07      	ldr	r2, [pc, #28]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050a8:	4b04      	ldr	r3, [pc, #16]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	4a03      	ldr	r2, [pc, #12]	@ (80050bc <HAL_RCC_OscConfig+0x504>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050b8:	e014      	b.n	80050e4 <HAL_RCC_OscConfig+0x52c>
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40007000 	.word	0x40007000
 80050c4:	4b9c      	ldr	r3, [pc, #624]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ca:	4a9b      	ldr	r2, [pc, #620]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80050d4:	4b98      	ldr	r3, [pc, #608]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	4a97      	ldr	r2, [pc, #604]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d016      	beq.n	800511a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fd fb7c 	bl	80027e8 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fd fb78 	bl	80027e8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e12a      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510a:	4b8b      	ldr	r3, [pc, #556]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ed      	beq.n	80050f4 <HAL_RCC_OscConfig+0x53c>
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511a:	f7fd fb65 	bl	80027e8 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7fd fb61 	bl	80027e8 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005130:	4293      	cmp	r3, r2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e113      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005138:	4b7f      	ldr	r3, [pc, #508]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1ed      	bne.n	8005122 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005146:	7ffb      	ldrb	r3, [r7, #31]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d105      	bne.n	8005158 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514c:	4b7a      	ldr	r3, [pc, #488]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	4a79      	ldr	r2, [pc, #484]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005156:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80fe 	beq.w	800535e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	2b02      	cmp	r3, #2
 8005168:	f040 80d0 	bne.w	800530c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800516c:	4b72      	ldr	r3, [pc, #456]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f003 0203 	and.w	r2, r3, #3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	429a      	cmp	r2, r3
 800517e:	d130      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	3b01      	subs	r3, #1
 800518c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	429a      	cmp	r2, r3
 8005190:	d127      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d11f      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80051ac:	2a07      	cmp	r2, #7
 80051ae:	bf14      	ite	ne
 80051b0:	2201      	movne	r2, #1
 80051b2:	2200      	moveq	r2, #0
 80051b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d113      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	3b01      	subs	r3, #1
 80051c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d109      	bne.n	80051e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	085b      	lsrs	r3, r3, #1
 80051da:	3b01      	subs	r3, #1
 80051dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d06e      	beq.n	80052c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d069      	beq.n	80052bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051e8:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051f4:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0ad      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005204:	4b4c      	ldr	r3, [pc, #304]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a4b      	ldr	r2, [pc, #300]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800520a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005210:	f7fd faea 	bl	80027e8 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fd fae6 	bl	80027e8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e09a      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522a:	4b43      	ldr	r3, [pc, #268]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005236:	4b40      	ldr	r3, [pc, #256]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCC_OscConfig+0x784>)
 800523c:	4013      	ands	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005246:	3a01      	subs	r2, #1
 8005248:	0112      	lsls	r2, r2, #4
 800524a:	4311      	orrs	r1, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005250:	0212      	lsls	r2, r2, #8
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005258:	0852      	lsrs	r2, r2, #1
 800525a:	3a01      	subs	r2, #1
 800525c:	0552      	lsls	r2, r2, #21
 800525e:	4311      	orrs	r1, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005264:	0852      	lsrs	r2, r2, #1
 8005266:	3a01      	subs	r2, #1
 8005268:	0652      	lsls	r2, r2, #25
 800526a:	4311      	orrs	r1, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005270:	0912      	lsrs	r2, r2, #4
 8005272:	0452      	lsls	r2, r2, #17
 8005274:	430a      	orrs	r2, r1
 8005276:	4930      	ldr	r1, [pc, #192]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005278:	4313      	orrs	r3, r2
 800527a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800527c:	4b2e      	ldr	r3, [pc, #184]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2d      	ldr	r2, [pc, #180]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005288:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a2a      	ldr	r2, [pc, #168]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 800528e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005292:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005294:	f7fd faa8 	bl	80027e8 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529c:	f7fd faa4 	bl	80027e8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e058      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ae:	4b22      	ldr	r3, [pc, #136]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052ba:	e050      	b.n	800535e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e04f      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d148      	bne.n	800535e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80052d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052d8:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a16      	ldr	r2, [pc, #88]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 80052de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052e4:	f7fd fa80 	bl	80027e8 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fd fa7c 	bl	80027e8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e030      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x734>
 800530a:	e028      	b.n	800535e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d023      	beq.n	800535a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a08      	ldr	r2, [pc, #32]	@ (8005338 <HAL_RCC_OscConfig+0x780>)
 8005318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800531c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fd fa63 	bl	80027e8 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005324:	e00c      	b.n	8005340 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005326:	f7fd fa5f 	bl	80027e8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d905      	bls.n	8005340 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e013      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
 8005338:	40021000 	.word	0x40021000
 800533c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <HAL_RCC_OscConfig+0x7b0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ec      	bne.n	8005326 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <HAL_RCC_OscConfig+0x7b0>)
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	4905      	ldr	r1, [pc, #20]	@ (8005368 <HAL_RCC_OscConfig+0x7b0>)
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_OscConfig+0x7b4>)
 8005354:	4013      	ands	r3, r2
 8005356:	60cb      	str	r3, [r1, #12]
 8005358:	e001      	b.n	800535e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40021000 	.word	0x40021000
 800536c:	feeefffc 	.word	0xfeeefffc

08005370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0e7      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b75      	ldr	r3, [pc, #468]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d910      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b72      	ldr	r3, [pc, #456]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 0207 	bic.w	r2, r3, #7
 800539a:	4970      	ldr	r1, [pc, #448]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b6e      	ldr	r3, [pc, #440]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0cf      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b66      	ldr	r3, [pc, #408]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d908      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b63      	ldr	r3, [pc, #396]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4960      	ldr	r1, [pc, #384]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d04c      	beq.n	8005488 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d121      	bne.n	8005446 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e0a6      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800540e:	4b54      	ldr	r3, [pc, #336]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d115      	bne.n	8005446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e09a      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005426:	4b4e      	ldr	r3, [pc, #312]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e08e      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005436:	4b4a      	ldr	r3, [pc, #296]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e086      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005446:	4b46      	ldr	r3, [pc, #280]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f023 0203 	bic.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4943      	ldr	r1, [pc, #268]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005458:	f7fd f9c6 	bl	80027e8 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	e00a      	b.n	8005476 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005460:	f7fd f9c2 	bl	80027e8 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800546e:	4293      	cmp	r3, r2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e06e      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	4b3a      	ldr	r3, [pc, #232]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 020c 	and.w	r2, r3, #12
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	429a      	cmp	r2, r3
 8005486:	d1eb      	bne.n	8005460 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	4b31      	ldr	r3, [pc, #196]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d208      	bcs.n	80054b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	492b      	ldr	r1, [pc, #172]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b6:	4b29      	ldr	r3, [pc, #164]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d210      	bcs.n	80054e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c4:	4b25      	ldr	r3, [pc, #148]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f023 0207 	bic.w	r2, r3, #7
 80054cc:	4923      	ldr	r1, [pc, #140]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d4:	4b21      	ldr	r3, [pc, #132]	@ (800555c <HAL_RCC_ClockConfig+0x1ec>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e036      	b.n	8005554 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4918      	ldr	r1, [pc, #96]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005510:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4910      	ldr	r1, [pc, #64]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005524:	f000 f824 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <HAL_RCC_ClockConfig+0x1f0>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	490b      	ldr	r1, [pc, #44]	@ (8005564 <HAL_RCC_ClockConfig+0x1f4>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	4a09      	ldr	r2, [pc, #36]	@ (8005568 <HAL_RCC_ClockConfig+0x1f8>)
 8005542:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <HAL_RCC_ClockConfig+0x1fc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7fd f8fd 	bl	8002748 <HAL_InitTick>
 800554e:	4603      	mov	r3, r0
 8005550:	72fb      	strb	r3, [r7, #11]

  return status;
 8005552:	7afb      	ldrb	r3, [r7, #11]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40022000 	.word	0x40022000
 8005560:	40021000 	.word	0x40021000
 8005564:	080076a4 	.word	0x080076a4
 8005568:	2000001c 	.word	0x2000001c
 800556c:	20000020 	.word	0x20000020

08005570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	@ 0x24
 8005574:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557e:	4b3e      	ldr	r3, [pc, #248]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005588:	4b3b      	ldr	r3, [pc, #236]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b0c      	cmp	r3, #12
 800559c:	d121      	bne.n	80055e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d11e      	bne.n	80055e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055a4:	4b34      	ldr	r3, [pc, #208]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b0:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e005      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055cc:	4a2b      	ldr	r2, [pc, #172]	@ (800567c <HAL_RCC_GetSysClockFreq+0x10c>)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10d      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d102      	bne.n	80055ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055e8:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e004      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055f4:	4b23      	ldr	r3, [pc, #140]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x114>)
 80055f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b0c      	cmp	r3, #12
 80055fc:	d134      	bne.n	8005668 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d003      	beq.n	8005616 <HAL_RCC_GetSysClockFreq+0xa6>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d003      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0xac>
 8005614:	e005      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005616:	4b1a      	ldr	r3, [pc, #104]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x110>)
 8005618:	617b      	str	r3, [r7, #20]
      break;
 800561a:	e005      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x114>)
 800561e:	617b      	str	r3, [r7, #20]
      break;
 8005620:	e002      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	617b      	str	r3, [r7, #20]
      break;
 8005626:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005628:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	3301      	adds	r3, #1
 8005634:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005636:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	fb03 f202 	mul.w	r2, r3, r2
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800564e:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x108>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	0e5b      	lsrs	r3, r3, #25
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	3301      	adds	r3, #1
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
 8005666:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005668:	69bb      	ldr	r3, [r7, #24]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3724      	adds	r7, #36	@ 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
 800567c:	080076b4 	.word	0x080076b4
 8005680:	00f42400 	.word	0x00f42400
 8005684:	007a1200 	.word	0x007a1200

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005694:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056a0:	f7ff fa26 	bl	8004af0 <HAL_PWREx_GetVoltageRange>
 80056a4:	6178      	str	r0, [r7, #20]
 80056a6:	e014      	b.n	80056d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	4a24      	ldr	r2, [pc, #144]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b4:	4b22      	ldr	r3, [pc, #136]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056c0:	f7ff fa16 	bl	8004af0 <HAL_PWREx_GetVoltageRange>
 80056c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d8:	d10b      	bne.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b80      	cmp	r3, #128	@ 0x80
 80056de:	d919      	bls.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80056e4:	d902      	bls.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e6:	2302      	movs	r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e013      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056ec:	2301      	movs	r3, #1
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e010      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	@ 0x80
 80056f6:	d902      	bls.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056f8:	2303      	movs	r3, #3
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e00a      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b80      	cmp	r3, #128	@ 0x80
 8005702:	d102      	bne.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005704:	2302      	movs	r3, #2
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e004      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b70      	cmp	r3, #112	@ 0x70
 800570e:	d101      	bne.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005710:	2301      	movs	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 0207 	bic.w	r2, r3, #7
 800571c:	4909      	ldr	r1, [pc, #36]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005724:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	40022000 	.word	0x40022000

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005750:	2300      	movs	r3, #0
 8005752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005754:	2300      	movs	r3, #0
 8005756:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d041      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005768:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800576c:	d02a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800576e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005772:	d824      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005778:	d008      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800577a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800577e:	d81e      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005788:	d010      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800578a:	e018      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800578c:	4b86      	ldr	r3, [pc, #536]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a85      	ldr	r2, [pc, #532]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005796:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005798:	e015      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3304      	adds	r3, #4
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fabb 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057aa:	e00c      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3320      	adds	r3, #32
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fba6 	bl	8005f04 <RCCEx_PLLSAI2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	74fb      	strb	r3, [r7, #19]
      break;
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057cc:	4b76      	ldr	r3, [pc, #472]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057da:	4973      	ldr	r1, [pc, #460]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057e2:	e001      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d041      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057fc:	d02a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005802:	d824      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005808:	d008      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800580a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800580e:	d81e      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005818:	d010      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800581a:	e018      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800581c:	4b62      	ldr	r3, [pc, #392]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a61      	ldr	r2, [pc, #388]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005826:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005828:	e015      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fa73 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800583a:	e00c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3320      	adds	r3, #32
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb5e 	bl	8005f04 <RCCEx_PLLSAI2_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	74fb      	strb	r3, [r7, #19]
      break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800585c:	4b52      	ldr	r3, [pc, #328]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800586a:	494f      	ldr	r1, [pc, #316]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005872:	e001      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a0 	beq.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800588a:	4b47      	ldr	r3, [pc, #284]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a4:	4a40      	ldr	r2, [pc, #256]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ac:	4b3e      	ldr	r3, [pc, #248]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b8:	2301      	movs	r3, #1
 80058ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058bc:	4b3b      	ldr	r3, [pc, #236]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3a      	ldr	r2, [pc, #232]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c8:	f7fc ff8e 	bl	80027e8 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d0:	f7fc ff8a 	bl	80027e8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	74fb      	strb	r3, [r7, #19]
        break;
 80058e2:	e005      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058e4:	4b31      	ldr	r3, [pc, #196]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d15c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058f6:	4b2c      	ldr	r3, [pc, #176]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005900:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01f      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	429a      	cmp	r2, r3
 8005912:	d019      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005914:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800591e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005920:	4b21      	ldr	r3, [pc, #132]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005926:	4a20      	ldr	r2, [pc, #128]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005930:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005940:	4a19      	ldr	r2, [pc, #100]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fc ff49 	bl	80027e8 <HAL_GetTick>
 8005956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005958:	e00b      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fc ff45 	bl	80027e8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d902      	bls.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	74fb      	strb	r3, [r7, #19]
            break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ec      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005986:	4b08      	ldr	r3, [pc, #32]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005996:	4904      	ldr	r1, [pc, #16]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800599e:	e009      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	74bb      	strb	r3, [r7, #18]
 80059a4:	e006      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059a6:	bf00      	nop
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7cfb      	ldrb	r3, [r7, #19]
 80059b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b4:	7c7b      	ldrb	r3, [r7, #17]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d105      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ba:	4b9e      	ldr	r3, [pc, #632]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	4a9d      	ldr	r2, [pc, #628]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059d2:	4b98      	ldr	r3, [pc, #608]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d8:	f023 0203 	bic.w	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	4994      	ldr	r1, [pc, #592]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059f4:	4b8f      	ldr	r3, [pc, #572]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fa:	f023 020c 	bic.w	r2, r3, #12
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	498c      	ldr	r1, [pc, #560]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a16:	4b87      	ldr	r3, [pc, #540]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	4983      	ldr	r1, [pc, #524]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a38:	4b7e      	ldr	r3, [pc, #504]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a46:	497b      	ldr	r1, [pc, #492]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a5a:	4b76      	ldr	r3, [pc, #472]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a68:	4972      	ldr	r1, [pc, #456]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8a:	496a      	ldr	r1, [pc, #424]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a9e:	4b65      	ldr	r3, [pc, #404]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	4961      	ldr	r1, [pc, #388]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ace:	4959      	ldr	r1, [pc, #356]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae2:	4b54      	ldr	r3, [pc, #336]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af0:	4950      	ldr	r1, [pc, #320]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b04:	4b4b      	ldr	r3, [pc, #300]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	4948      	ldr	r1, [pc, #288]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b26:	4b43      	ldr	r3, [pc, #268]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b34:	493f      	ldr	r1, [pc, #252]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d028      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b48:	4b3a      	ldr	r3, [pc, #232]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b56:	4937      	ldr	r1, [pc, #220]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b66:	d106      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b68:	4b32      	ldr	r3, [pc, #200]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b72:	60d3      	str	r3, [r2, #12]
 8005b74:	e011      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f8c8 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d028      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ba6:	4b23      	ldr	r3, [pc, #140]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb4:	491f      	ldr	r1, [pc, #124]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bc4:	d106      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bd0:	60d3      	str	r3, [r2, #12]
 8005bd2:	e011      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f899 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02b      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c04:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c12:	4908      	ldr	r1, [pc, #32]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c22:	d109      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c24:	4b03      	ldr	r3, [pc, #12]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a02      	ldr	r2, [pc, #8]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c2e:	60d3      	str	r3, [r2, #12]
 8005c30:	e014      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f867 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c68:	4b2b      	ldr	r3, [pc, #172]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c76:	4928      	ldr	r1, [pc, #160]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c86:	d10d      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f844 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	74bb      	strb	r3, [r7, #18]
 8005ca2:	e011      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3320      	adds	r3, #32
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f925 	bl	8005f04 <RCCEx_PLLSAI2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cd4:	4b10      	ldr	r3, [pc, #64]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ce2:	490d      	ldr	r1, [pc, #52]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cf6:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d06:	4904      	ldr	r1, [pc, #16]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000

08005d1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d2a:	4b75      	ldr	r3, [pc, #468]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d018      	beq.n	8005d68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d36:	4b72      	ldr	r3, [pc, #456]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0203 	and.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d10d      	bne.n	8005d62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
       ||
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d047      	beq.n	8005df2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
 8005d66:	e044      	b.n	8005df2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d018      	beq.n	8005da2 <RCCEx_PLLSAI1_Config+0x86>
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d825      	bhi.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa4>
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <RCCEx_PLLSAI1_Config+0x62>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d009      	beq.n	8005d90 <RCCEx_PLLSAI1_Config+0x74>
 8005d7c:	e020      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d7e:	4b60      	ldr	r3, [pc, #384]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11d      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d8e:	e01a      	b.n	8005dc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d90:	4b5b      	ldr	r3, [pc, #364]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da0:	e013      	b.n	8005dca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005da2:	4b57      	ldr	r3, [pc, #348]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dae:	4b54      	ldr	r3, [pc, #336]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dbe:	e006      	b.n	8005dce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e004      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	430b      	orrs	r3, r1
 8005dec:	4944      	ldr	r1, [pc, #272]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d17d      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005df8:	4b41      	ldr	r3, [pc, #260]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a40      	ldr	r2, [pc, #256]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e04:	f7fc fcf0 	bl	80027e8 <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e0a:	e009      	b.n	8005e20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e0c:	f7fc fcec 	bl	80027e8 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d902      	bls.n	8005e20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1e:	e005      	b.n	8005e2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e20:	4b37      	ldr	r3, [pc, #220]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1ef      	bne.n	8005e0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d160      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d111      	bne.n	8005e5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e38:	4b31      	ldr	r3, [pc, #196]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6892      	ldr	r2, [r2, #8]
 8005e48:	0211      	lsls	r1, r2, #8
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68d2      	ldr	r2, [r2, #12]
 8005e4e:	0912      	lsrs	r2, r2, #4
 8005e50:	0452      	lsls	r2, r2, #17
 8005e52:	430a      	orrs	r2, r1
 8005e54:	492a      	ldr	r1, [pc, #168]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	610b      	str	r3, [r1, #16]
 8005e5a:	e027      	b.n	8005eac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d112      	bne.n	8005e88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e62:	4b27      	ldr	r3, [pc, #156]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	0211      	lsls	r1, r2, #8
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6912      	ldr	r2, [r2, #16]
 8005e78:	0852      	lsrs	r2, r2, #1
 8005e7a:	3a01      	subs	r2, #1
 8005e7c:	0552      	lsls	r2, r2, #21
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	491f      	ldr	r1, [pc, #124]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	610b      	str	r3, [r1, #16]
 8005e86:	e011      	b.n	8005eac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e88:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6892      	ldr	r2, [r2, #8]
 8005e98:	0211      	lsls	r1, r2, #8
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6952      	ldr	r2, [r2, #20]
 8005e9e:	0852      	lsrs	r2, r2, #1
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	0652      	lsls	r2, r2, #25
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	4916      	ldr	r1, [pc, #88]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005eac:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a13      	ldr	r2, [pc, #76]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fc fc96 	bl	80027e8 <HAL_GetTick>
 8005ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ebe:	e009      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ec0:	f7fc fc92 	bl	80027e8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d902      	bls.n	8005ed4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ed2:	e005      	b.n	8005ee0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ef      	beq.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ee6:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	4904      	ldr	r1, [pc, #16]	@ (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40021000 	.word	0x40021000

08005f04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f12:	4b6a      	ldr	r3, [pc, #424]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f1e:	4b67      	ldr	r3, [pc, #412]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0203 	and.w	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d10d      	bne.n	8005f4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
       ||
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f36:	4b61      	ldr	r3, [pc, #388]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
       ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d047      	beq.n	8005fda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
 8005f4e:	e044      	b.n	8005fda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d018      	beq.n	8005f8a <RCCEx_PLLSAI2_Config+0x86>
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d825      	bhi.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa4>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d002      	beq.n	8005f66 <RCCEx_PLLSAI2_Config+0x62>
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d009      	beq.n	8005f78 <RCCEx_PLLSAI2_Config+0x74>
 8005f64:	e020      	b.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f66:	4b55      	ldr	r3, [pc, #340]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11d      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f76:	e01a      	b.n	8005fae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f78:	4b50      	ldr	r3, [pc, #320]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d116      	bne.n	8005fb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f88:	e013      	b.n	8005fb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f96:	4b49      	ldr	r3, [pc, #292]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fa6:	e006      	b.n	8005fb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e004      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10d      	bne.n	8005fda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	4939      	ldr	r1, [pc, #228]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d167      	bne.n	80060b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fe0:	4b36      	ldr	r3, [pc, #216]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a35      	ldr	r2, [pc, #212]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fc fbfc 	bl	80027e8 <HAL_GetTick>
 8005ff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ff2:	e009      	b.n	8006008 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ff4:	f7fc fbf8 	bl	80027e8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d902      	bls.n	8006008 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	73fb      	strb	r3, [r7, #15]
        break;
 8006006:	e005      	b.n	8006014 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006008:	4b2c      	ldr	r3, [pc, #176]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ef      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d14a      	bne.n	80060b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d111      	bne.n	8006044 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006020:	4b26      	ldr	r3, [pc, #152]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6892      	ldr	r2, [r2, #8]
 8006030:	0211      	lsls	r1, r2, #8
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68d2      	ldr	r2, [r2, #12]
 8006036:	0912      	lsrs	r2, r2, #4
 8006038:	0452      	lsls	r2, r2, #17
 800603a:	430a      	orrs	r2, r1
 800603c:	491f      	ldr	r1, [pc, #124]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	614b      	str	r3, [r1, #20]
 8006042:	e011      	b.n	8006068 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006044:	4b1d      	ldr	r3, [pc, #116]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800604c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6892      	ldr	r2, [r2, #8]
 8006054:	0211      	lsls	r1, r2, #8
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6912      	ldr	r2, [r2, #16]
 800605a:	0852      	lsrs	r2, r2, #1
 800605c:	3a01      	subs	r2, #1
 800605e:	0652      	lsls	r2, r2, #25
 8006060:	430a      	orrs	r2, r1
 8006062:	4916      	ldr	r1, [pc, #88]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006064:	4313      	orrs	r3, r2
 8006066:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006068:	4b14      	ldr	r3, [pc, #80]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006072:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006074:	f7fc fbb8 	bl	80027e8 <HAL_GetTick>
 8006078:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800607a:	e009      	b.n	8006090 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800607c:	f7fc fbb4 	bl	80027e8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d902      	bls.n	8006090 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	73fb      	strb	r3, [r7, #15]
          break;
 800608e:	e005      	b.n	800609c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006090:	4b0a      	ldr	r3, [pc, #40]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0ef      	beq.n	800607c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060a2:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4904      	ldr	r1, [pc, #16]	@ (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000

080060c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e095      	b.n	80061fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e2:	d009      	beq.n	80060f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
 80060ea:	e005      	b.n	80060f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc f9ae 	bl	8002474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800612e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006138:	d902      	bls.n	8006140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e002      	b.n	8006146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800614e:	d007      	beq.n	8006160 <HAL_SPI_Init+0xa0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061a2:	ea42 0103 	orr.w	r1, r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	f003 0204 	and.w	r2, r3, #4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061dc:	ea42 0103 	orr.w	r1, r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006216:	f7fc fae7 	bl	80027e8 <HAL_GetTick>
 800621a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d001      	beq.n	8006230 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
 800622e:	e15c      	b.n	80064ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_SPI_Transmit+0x36>
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e154      	b.n	80064ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_SPI_Transmit+0x48>
 800624a:	2302      	movs	r3, #2
 800624c:	e14d      	b.n	80064ea <HAL_SPI_Transmit+0x2e4>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2203      	movs	r2, #3
 800625a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	88fa      	ldrh	r2, [r7, #6]
 8006274:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a0:	d10f      	bne.n	80062c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062cc:	2b40      	cmp	r3, #64	@ 0x40
 80062ce:	d007      	beq.n	80062e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062e8:	d952      	bls.n	8006390 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_SPI_Transmit+0xf2>
 80062f2:	8b7b      	ldrh	r3, [r7, #26]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d145      	bne.n	8006384 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fc:	881a      	ldrh	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	1c9a      	adds	r2, r3, #2
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800631c:	e032      	b.n	8006384 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d112      	bne.n	8006352 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006330:	881a      	ldrh	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006350:	e018      	b.n	8006384 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006352:	f7fc fa49 	bl	80027e8 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d803      	bhi.n	800636a <HAL_SPI_Transmit+0x164>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d102      	bne.n	8006370 <HAL_SPI_Transmit+0x16a>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e0b2      	b.n	80064ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1c7      	bne.n	800631e <HAL_SPI_Transmit+0x118>
 800638e:	e083      	b.n	8006498 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_SPI_Transmit+0x198>
 8006398:	8b7b      	ldrh	r3, [r7, #26]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d177      	bne.n	800648e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d912      	bls.n	80063ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	881a      	ldrh	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b02      	subs	r3, #2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063cc:	e05f      	b.n	800648e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	330c      	adds	r3, #12
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063f4:	e04b      	b.n	800648e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b02      	cmp	r3, #2
 8006402:	d12b      	bne.n	800645c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d912      	bls.n	8006434 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b02      	subs	r3, #2
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006432:	e02c      	b.n	800648e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800645a:	e018      	b.n	800648e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800645c:	f7fc f9c4 	bl	80027e8 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d803      	bhi.n	8006474 <HAL_SPI_Transmit+0x26e>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d102      	bne.n	800647a <HAL_SPI_Transmit+0x274>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e02d      	b.n	80064ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1ae      	bne.n	80063f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fcf5 	bl	8006e8c <SPI_EndRxTxTransaction>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80064e8:	2300      	movs	r3, #0
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b088      	sub	sp, #32
 80064f6:	af02      	add	r7, sp, #8
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	d001      	beq.n	8006512 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800650e:	2302      	movs	r3, #2
 8006510:	e123      	b.n	800675a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800651a:	d112      	bne.n	8006542 <HAL_SPI_Receive+0x50>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10e      	bne.n	8006542 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2204      	movs	r2, #4
 8006528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4613      	mov	r3, r2
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f912 	bl	8006762 <HAL_SPI_TransmitReceive>
 800653e:	4603      	mov	r3, r0
 8006540:	e10b      	b.n	800675a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006542:	f7fc f951 	bl	80027e8 <HAL_GetTick>
 8006546:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_SPI_Receive+0x62>
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e100      	b.n	800675a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_SPI_Receive+0x74>
 8006562:	2302      	movs	r3, #2
 8006564:	e0f9      	b.n	800675a <HAL_SPI_Receive+0x268>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2204      	movs	r2, #4
 8006572:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	88fa      	ldrh	r2, [r7, #6]
 800658e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065b8:	d908      	bls.n	80065cc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e007      	b.n	80065dc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e4:	d10f      	bne.n	8006606 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006604:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006610:	2b40      	cmp	r3, #64	@ 0x40
 8006612:	d007      	beq.n	8006624 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006622:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800662c:	d875      	bhi.n	800671a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800662e:	e037      	b.n	80066a0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d117      	bne.n	800666e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f103 020c 	add.w	r2, r3, #12
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	7812      	ldrb	r2, [r2, #0]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006660:	b29b      	uxth	r3, r3
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800666c:	e018      	b.n	80066a0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800666e:	f7fc f8bb 	bl	80027e8 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d803      	bhi.n	8006686 <HAL_SPI_Receive+0x194>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d102      	bne.n	800668c <HAL_SPI_Receive+0x19a>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e05c      	b.n	800675a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1c1      	bne.n	8006630 <HAL_SPI_Receive+0x13e>
 80066ac:	e03b      	b.n	8006726 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d115      	bne.n	80066e8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	b292      	uxth	r2, r2
 80066c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	1c9a      	adds	r2, r3, #2
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80066e6:	e018      	b.n	800671a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e8:	f7fc f87e 	bl	80027e8 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d803      	bhi.n	8006700 <HAL_SPI_Receive+0x20e>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d102      	bne.n	8006706 <HAL_SPI_Receive+0x214>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e01f      	b.n	800675a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1c3      	bne.n	80066ae <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 fb56 	bl	8006ddc <SPI_EndRxTransaction>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006758:	2300      	movs	r3, #0
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b08a      	sub	sp, #40	@ 0x28
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006770:	2301      	movs	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006774:	f7fc f838 	bl	80027e8 <HAL_GetTick>
 8006778:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006780:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006788:	887b      	ldrh	r3, [r7, #2]
 800678a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800678c:	887b      	ldrh	r3, [r7, #2]
 800678e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006790:	7ffb      	ldrb	r3, [r7, #31]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d00c      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x4e>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800679c:	d106      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x4a>
 80067a6:	7ffb      	ldrb	r3, [r7, #31]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d001      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
 80067ae:	e1f3      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x60>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x60>
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e1e8      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x72>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e1e1      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d003      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2205      	movs	r2, #5
 80067ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	887a      	ldrh	r2, [r7, #2]
 8006800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	887a      	ldrh	r2, [r7, #2]
 8006808:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	887a      	ldrh	r2, [r7, #2]
 800681c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006832:	d802      	bhi.n	800683a <HAL_SPI_TransmitReceive+0xd8>
 8006834:	8abb      	ldrh	r3, [r7, #20]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d908      	bls.n	800684c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	e007      	b.n	800685c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800685a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d007      	beq.n	800687a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006882:	f240 8083 	bls.w	800698c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_SPI_TransmitReceive+0x132>
 800688e:	8afb      	ldrh	r3, [r7, #22]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d16f      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b8:	e05c      	b.n	8006974 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d11b      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x19e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x19e>
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d113      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d11c      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x1e6>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	b292      	uxth	r2, r2
 8006926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692c:	1c9a      	adds	r2, r3, #2
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006944:	2301      	movs	r3, #1
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006948:	f7fb ff4e 	bl	80027e8 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006954:	429a      	cmp	r2, r3
 8006956:	d80d      	bhi.n	8006974 <HAL_SPI_TransmitReceive+0x212>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d009      	beq.n	8006974 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e111      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d19d      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x158>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d197      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x158>
 800698a:	e0e5      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <HAL_SPI_TransmitReceive+0x23a>
 8006994:	8afb      	ldrh	r3, [r7, #22]
 8006996:	2b01      	cmp	r3, #1
 8006998:	f040 80d1 	bne.w	8006b3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d912      	bls.n	80069cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069aa:	881a      	ldrh	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b6:	1c9a      	adds	r2, r3, #2
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b02      	subs	r3, #2
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069ca:	e0b8      	b.n	8006b3e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f2:	e0a4      	b.n	8006b3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d134      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x30a>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d02f      	beq.n	8006a6c <HAL_SPI_TransmitReceive+0x30a>
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d12c      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d912      	bls.n	8006a42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a20:	881a      	ldrh	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	1c9a      	adds	r2, r3, #2
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	3b02      	subs	r3, #2
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a40:	e012      	b.n	8006a68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d148      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x3aa>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d042      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d923      	bls.n	8006ada <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9c:	b292      	uxth	r2, r2
 8006a9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	1c9a      	adds	r2, r3, #2
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d81f      	bhi.n	8006b08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ad6:	605a      	str	r2, [r3, #4]
 8006ad8:	e016      	b.n	8006b08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f103 020c 	add.w	r2, r3, #12
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	7812      	ldrb	r2, [r2, #0]
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b0c:	f7fb fe6c 	bl	80027e8 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d803      	bhi.n	8006b24 <HAL_SPI_TransmitReceive+0x3c2>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d102      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x3c8>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e02c      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f47f af55 	bne.w	80069f4 <HAL_SPI_TransmitReceive+0x292>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f47f af4e 	bne.w	80069f4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f995 	bl	8006e8c <SPI_EndRxTxTransaction>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d008      	beq.n	8006b7a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e00e      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006b96:	2300      	movs	r3, #0
  }
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3728      	adds	r7, #40	@ 0x28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bb0:	f7fb fe1a 	bl	80027e8 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	1a9b      	subs	r3, r3, r2
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bc0:	f7fb fe12 	bl	80027e8 <HAL_GetTick>
 8006bc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bc6:	4b39      	ldr	r3, [pc, #228]	@ (8006cac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	015b      	lsls	r3, r3, #5
 8006bcc:	0d1b      	lsrs	r3, r3, #20
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	fb02 f303 	mul.w	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd6:	e054      	b.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d050      	beq.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006be0:	f7fb fe02 	bl	80027e8 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d902      	bls.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d13d      	bne.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c0e:	d111      	bne.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c18:	d004      	beq.n	8006c24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c22:	d107      	bne.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3c:	d10f      	bne.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e017      	b.n	8006ca2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d19b      	bne.n	8006bd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000001c 	.word	0x2000001c

08006cb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	@ 0x28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cc2:	f7fb fd91 	bl	80027e8 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	4413      	add	r3, r2
 8006cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006cd2:	f7fb fd89 	bl	80027e8 <HAL_GetTick>
 8006cd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8006dd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	00da      	lsls	r2, r3, #3
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	0d1b      	lsrs	r3, r3, #20
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf2:	fb02 f303 	mul.w	r3, r2, r3
 8006cf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006cf8:	e060      	b.n	8006dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d00:	d107      	bne.n	8006d12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d050      	beq.n	8006dbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d1a:	f7fb fd65 	bl	80027e8 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d902      	bls.n	8006d30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d13d      	bne.n	8006dac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d48:	d111      	bne.n	8006d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d52:	d004      	beq.n	8006d5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d5c:	d107      	bne.n	8006d6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d76:	d10f      	bne.n	8006d98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e010      	b.n	8006dce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d196      	bne.n	8006cfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3728      	adds	r7, #40	@ 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2000001c 	.word	0x2000001c

08006ddc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006df0:	d111      	bne.n	8006e16 <SPI_EndRxTransaction+0x3a>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dfa:	d004      	beq.n	8006e06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e04:	d107      	bne.n	8006e16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2180      	movs	r1, #128	@ 0x80
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff febd 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e30:	f043 0220 	orr.w	r2, r3, #32
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e023      	b.n	8006e84 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e44:	d11d      	bne.n	8006e82 <SPI_EndRxTransaction+0xa6>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e4e:	d004      	beq.n	8006e5a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e58:	d113      	bne.n	8006e82 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff ff22 	bl	8006cb0 <SPI_WaitFifoStateUntilTimeout>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e000      	b.n	8006e84 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff ff03 	bl	8006cb0 <SPI_WaitFifoStateUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e027      	b.n	8006f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2180      	movs	r1, #128	@ 0x80
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fe68 	bl	8006ba0 <SPI_WaitFlagStateUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eda:	f043 0220 	orr.w	r2, r3, #32
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e014      	b.n	8006f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fedc 	bl	8006cb0 <SPI_WaitFifoStateUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f02:	f043 0220 	orr.w	r2, r3, #32
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e000      	b.n	8006f10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e049      	b.n	8006fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fb faf8 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f000 fa04 	bl	8007364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d001      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e04f      	b.n	8007080 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a23      	ldr	r2, [pc, #140]	@ (800708c <HAL_TIM_Base_Start_IT+0xc4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700a:	d018      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1f      	ldr	r2, [pc, #124]	@ (8007090 <HAL_TIM_Base_Start_IT+0xc8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1e      	ldr	r2, [pc, #120]	@ (8007094 <HAL_TIM_Base_Start_IT+0xcc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1c      	ldr	r2, [pc, #112]	@ (8007098 <HAL_TIM_Base_Start_IT+0xd0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1b      	ldr	r2, [pc, #108]	@ (800709c <HAL_TIM_Base_Start_IT+0xd4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIM_Base_Start_IT+0x76>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a19      	ldr	r2, [pc, #100]	@ (80070a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d115      	bne.n	800706a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	4b17      	ldr	r3, [pc, #92]	@ (80070a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007046:	4013      	ands	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b06      	cmp	r3, #6
 800704e:	d015      	beq.n	800707c <HAL_TIM_Base_Start_IT+0xb4>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007056:	d011      	beq.n	800707c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	e008      	b.n	800707c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e000      	b.n	800707e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40013400 	.word	0x40013400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	00010007 	.word	0x00010007

080070a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6a1a      	ldr	r2, [r3, #32]
 80070c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10f      	bne.n	80070f0 <HAL_TIM_Base_Stop_IT+0x48>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d107      	bne.n	80070f0 <HAL_TIM_Base_Stop_IT+0x48>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0201 	bic.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d020      	beq.n	800716a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01b      	beq.n	800716a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f06f 0202 	mvn.w	r2, #2
 800713a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f8e9 	bl	8007328 <HAL_TIM_IC_CaptureCallback>
 8007156:	e005      	b.n	8007164 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f8db 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8ec 	bl	800733c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d020      	beq.n	80071b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01b      	beq.n	80071b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f06f 0204 	mvn.w	r2, #4
 8007186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f8c3 	bl	8007328 <HAL_TIM_IC_CaptureCallback>
 80071a2:	e005      	b.n	80071b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8b5 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8c6 	bl	800733c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d020      	beq.n	8007202 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01b      	beq.n	8007202 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f06f 0208 	mvn.w	r2, #8
 80071d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2204      	movs	r2, #4
 80071d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f89d 	bl	8007328 <HAL_TIM_IC_CaptureCallback>
 80071ee:	e005      	b.n	80071fc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f88f 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8a0 	bl	800733c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	2b00      	cmp	r3, #0
 800720a:	d020      	beq.n	800724e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01b      	beq.n	800724e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0210 	mvn.w	r2, #16
 800721e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2208      	movs	r2, #8
 8007224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f877 	bl	8007328 <HAL_TIM_IC_CaptureCallback>
 800723a:	e005      	b.n	8007248 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f869 	bl	8007314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f87a 	bl	800733c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00c      	beq.n	8007272 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0201 	mvn.w	r2, #1
 800726a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fa f8af 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00c      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f99a 	bl	80075d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d007      	beq.n	80072c4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80072bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f992 	bl	80075e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00c      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d007      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f834 	bl	8007350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0220 	mvn.w	r2, #32
 8007304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f95a 	bl	80075c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a46      	ldr	r2, [pc, #280]	@ (8007490 <TIM_Base_SetConfig+0x12c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d013      	beq.n	80073a4 <TIM_Base_SetConfig+0x40>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007382:	d00f      	beq.n	80073a4 <TIM_Base_SetConfig+0x40>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a43      	ldr	r2, [pc, #268]	@ (8007494 <TIM_Base_SetConfig+0x130>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00b      	beq.n	80073a4 <TIM_Base_SetConfig+0x40>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a42      	ldr	r2, [pc, #264]	@ (8007498 <TIM_Base_SetConfig+0x134>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a41      	ldr	r2, [pc, #260]	@ (800749c <TIM_Base_SetConfig+0x138>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a40      	ldr	r2, [pc, #256]	@ (80074a0 <TIM_Base_SetConfig+0x13c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d108      	bne.n	80073b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a35      	ldr	r2, [pc, #212]	@ (8007490 <TIM_Base_SetConfig+0x12c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01f      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c4:	d01b      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a32      	ldr	r2, [pc, #200]	@ (8007494 <TIM_Base_SetConfig+0x130>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d017      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a31      	ldr	r2, [pc, #196]	@ (8007498 <TIM_Base_SetConfig+0x134>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a30      	ldr	r2, [pc, #192]	@ (800749c <TIM_Base_SetConfig+0x138>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00f      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2f      	ldr	r2, [pc, #188]	@ (80074a0 <TIM_Base_SetConfig+0x13c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00b      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2e      	ldr	r2, [pc, #184]	@ (80074a4 <TIM_Base_SetConfig+0x140>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d007      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <TIM_Base_SetConfig+0x144>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d003      	beq.n	80073fe <TIM_Base_SetConfig+0x9a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2c      	ldr	r2, [pc, #176]	@ (80074ac <TIM_Base_SetConfig+0x148>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d108      	bne.n	8007410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4313      	orrs	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a16      	ldr	r2, [pc, #88]	@ (8007490 <TIM_Base_SetConfig+0x12c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00f      	beq.n	800745c <TIM_Base_SetConfig+0xf8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <TIM_Base_SetConfig+0x13c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00b      	beq.n	800745c <TIM_Base_SetConfig+0xf8>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a17      	ldr	r2, [pc, #92]	@ (80074a4 <TIM_Base_SetConfig+0x140>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_Base_SetConfig+0xf8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <TIM_Base_SetConfig+0x144>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_Base_SetConfig+0xf8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a15      	ldr	r2, [pc, #84]	@ (80074ac <TIM_Base_SetConfig+0x148>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d103      	bne.n	8007464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d105      	bne.n	8007482 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f023 0201 	bic.w	r2, r3, #1
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	611a      	str	r2, [r3, #16]
  }
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40013400 	.word	0x40013400
 80074a4:	40014000 	.word	0x40014000
 80074a8:	40014400 	.word	0x40014400
 80074ac:	40014800 	.word	0x40014800

080074b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e068      	b.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2e      	ldr	r2, [pc, #184]	@ (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2d      	ldr	r2, [pc, #180]	@ (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1e      	ldr	r2, [pc, #120]	@ (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01d      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753a:	d018      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1a      	ldr	r2, [pc, #104]	@ (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a18      	ldr	r2, [pc, #96]	@ (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a13      	ldr	r2, [pc, #76]	@ (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a14      	ldr	r2, [pc, #80]	@ (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10c      	bne.n	8007588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4313      	orrs	r3, r2
 800757e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40012c00 	.word	0x40012c00
 80075ac:	40013400 	.word	0x40013400
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40000800 	.word	0x40000800
 80075b8:	40000c00 	.word	0x40000c00
 80075bc:	40014000 	.word	0x40014000

080075c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <__libc_init_array>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4d0d      	ldr	r5, [pc, #52]	@ (8007644 <__libc_init_array+0x38>)
 8007610:	4c0d      	ldr	r4, [pc, #52]	@ (8007648 <__libc_init_array+0x3c>)
 8007612:	1b64      	subs	r4, r4, r5
 8007614:	10a4      	asrs	r4, r4, #2
 8007616:	2600      	movs	r6, #0
 8007618:	42a6      	cmp	r6, r4
 800761a:	d109      	bne.n	8007630 <__libc_init_array+0x24>
 800761c:	4d0b      	ldr	r5, [pc, #44]	@ (800764c <__libc_init_array+0x40>)
 800761e:	4c0c      	ldr	r4, [pc, #48]	@ (8007650 <__libc_init_array+0x44>)
 8007620:	f000 f818 	bl	8007654 <_init>
 8007624:	1b64      	subs	r4, r4, r5
 8007626:	10a4      	asrs	r4, r4, #2
 8007628:	2600      	movs	r6, #0
 800762a:	42a6      	cmp	r6, r4
 800762c:	d105      	bne.n	800763a <__libc_init_array+0x2e>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f855 3b04 	ldr.w	r3, [r5], #4
 8007634:	4798      	blx	r3
 8007636:	3601      	adds	r6, #1
 8007638:	e7ee      	b.n	8007618 <__libc_init_array+0xc>
 800763a:	f855 3b04 	ldr.w	r3, [r5], #4
 800763e:	4798      	blx	r3
 8007640:	3601      	adds	r6, #1
 8007642:	e7f2      	b.n	800762a <__libc_init_array+0x1e>
 8007644:	080076ec 	.word	0x080076ec
 8007648:	080076ec 	.word	0x080076ec
 800764c:	080076ec 	.word	0x080076ec
 8007650:	080076f0 	.word	0x080076f0

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
