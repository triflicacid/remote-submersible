
test-lora-off-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800323c  0800323c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800323c  0800323c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0000423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003240  08003240  00004240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003244  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003250  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003250  000050e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009065  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca2  00000000  00000000  0000e0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0000fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000788  00000000  00000000  00010760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ebb  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a80b  00000000  00000000  00035da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e150d  00000000  00000000  000405ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121abb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  00121b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031e4 	.word	0x080031e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031e4 	.word	0x080031e4

080001c8 <_read>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

static uint8_t _read(lora_t *lora, uint8_t address) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
  // command - request address to read
  uint8_t cmd = address & 0x7F, data;
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	73fb      	strb	r3, [r7, #15]

  write_pin(lora->ss_port, lora->ss_pin, false);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6858      	ldr	r0, [r3, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	891b      	ldrh	r3, [r3, #8]
 80001e6:	2200      	movs	r2, #0
 80001e8:	4619      	mov	r1, r3
 80001ea:	f000 fa8d 	bl	8000708 <write_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6818      	ldr	r0, [r3, #0]
 80001f2:	f107 010f 	add.w	r1, r7, #15
 80001f6:	2364      	movs	r3, #100	@ 0x64
 80001f8:	2201      	movs	r2, #1
 80001fa:	f002 f82a 	bl	8002252 <HAL_SPI_Transmit>
  HAL_SPI_Receive(lora->spi, &data, 1, 100);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	6818      	ldr	r0, [r3, #0]
 8000202:	f107 010e 	add.w	r1, r7, #14
 8000206:	2364      	movs	r3, #100	@ 0x64
 8000208:	2201      	movs	r2, #1
 800020a:	f002 f998 	bl	800253e <HAL_SPI_Receive>
  write_pin(lora->ss_port, lora->ss_pin, true);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	6858      	ldr	r0, [r3, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	891b      	ldrh	r3, [r3, #8]
 8000216:	2201      	movs	r2, #1
 8000218:	4619      	mov	r1, r3
 800021a:	f000 fa75 	bl	8000708 <write_pin>

  return data;
 800021e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <_write_bytes>:

static void _write_bytes(lora_t *lora, uint8_t address, const uint8_t *data, uint8_t size) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	607a      	str	r2, [r7, #4]
 8000232:	461a      	mov	r2, r3
 8000234:	460b      	mov	r3, r1
 8000236:	72fb      	strb	r3, [r7, #11]
 8000238:	4613      	mov	r3, r2
 800023a:	72bb      	strb	r3, [r7, #10]
  // command - tell device to write to address
  uint8_t cmd = 0x80 | address;
 800023c:	7afb      	ldrb	r3, [r7, #11]
 800023e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000242:	b2db      	uxtb	r3, r3
 8000244:	75fb      	strb	r3, [r7, #23]

  write_pin(lora->ss_port, lora->ss_pin, false);
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	6858      	ldr	r0, [r3, #4]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	891b      	ldrh	r3, [r3, #8]
 800024e:	2200      	movs	r2, #0
 8000250:	4619      	mov	r1, r3
 8000252:	f000 fa59 	bl	8000708 <write_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	f107 0117 	add.w	r1, r7, #23
 800025e:	2364      	movs	r3, #100	@ 0x64
 8000260:	2201      	movs	r2, #1
 8000262:	f001 fff6 	bl	8002252 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(lora->spi, data, size, 100);
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	6818      	ldr	r0, [r3, #0]
 800026a:	7abb      	ldrb	r3, [r7, #10]
 800026c:	b29a      	uxth	r2, r3
 800026e:	2364      	movs	r3, #100	@ 0x64
 8000270:	6879      	ldr	r1, [r7, #4]
 8000272:	f001 ffee 	bl	8002252 <HAL_SPI_Transmit>
  write_pin(lora->ss_port, lora->ss_pin, true);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	6858      	ldr	r0, [r3, #4]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	f000 fa41 	bl	8000708 <write_pin>
}
 8000286:	bf00      	nop
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <_write>:

static void _write(lora_t *lora, uint8_t address, uint8_t data) {
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	460b      	mov	r3, r1
 8000298:	70fb      	strb	r3, [r7, #3]
 800029a:	4613      	mov	r3, r2
 800029c:	70bb      	strb	r3, [r7, #2]
  _write_bytes(lora, address, &data, 1);
 800029e:	1cba      	adds	r2, r7, #2
 80002a0:	78f9      	ldrb	r1, [r7, #3]
 80002a2:	2301      	movs	r3, #1
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f7ff ffbf 	bl	8000228 <_write_bytes>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <explicit_header_mode>:

static void explicit_header_mode(lora_t *lora) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = false;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2200      	movs	r2, #0
 80002be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) & 0xfe);
 80002c2:	211d      	movs	r1, #29
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ff7f 	bl	80001c8 <_read>
 80002ca:	4603      	mov	r3, r0
 80002cc:	f023 0301 	bic.w	r3, r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	461a      	mov	r2, r3
 80002d4:	211d      	movs	r1, #29
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ffd9 	bl	800028e <_write>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <implicit_header_mode>:

static void implicit_header_mode(lora_t *lora) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = true;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2201      	movs	r2, #1
 80002f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) | 0x01);
 80002f4:	211d      	movs	r1, #29
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ff66 	bl	80001c8 <_read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	461a      	mov	r2, r3
 8000306:	211d      	movs	r1, #29
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffc0 	bl	800028e <_write>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <lora_init>:


void lora_init(lora_t *lora, SPI_HandleTypeDef *spi, port_t *ss_port, pin_t ss_pin, port_t *rst_port, pin_t rst_pin) {
 8000316:	b580      	push	{r7, lr}
 8000318:	b084      	sub	sp, #16
 800031a:	af00      	add	r7, sp, #0
 800031c:	60f8      	str	r0, [r7, #12]
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
 8000322:	807b      	strh	r3, [r7, #2]
  lora->spi = spi;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	601a      	str	r2, [r3, #0]
  lora->ss_port = ss_port;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	605a      	str	r2, [r3, #4]
  lora->ss_pin = ss_pin;
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	887a      	ldrh	r2, [r7, #2]
 8000334:	811a      	strh	r2, [r3, #8]
  lora->rst_port = rst_port;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	69ba      	ldr	r2, [r7, #24]
 800033a:	60da      	str	r2, [r3, #12]
  lora->rst_pin = rst_pin;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	8bba      	ldrh	r2, [r7, #28]
 8000340:	821a      	strh	r2, [r3, #16]
  lora->on_receive = NULL;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  lora->on_cad_done = NULL;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  lora->on_tx_done = NULL;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]

  // set SS high
  write_pin(lora->ss_port, lora->ss_pin, true);
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	6858      	ldr	r0, [r3, #4]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	891b      	ldrh	r3, [r3, #8]
 800035c:	2201      	movs	r2, #1
 800035e:	4619      	mov	r1, r3
 8000360:	f000 f9d2 	bl	8000708 <write_pin>

  // toggle reset
  write_pin(lora->rst_port, lora->rst_pin, false);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	68d8      	ldr	r0, [r3, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	8a1b      	ldrh	r3, [r3, #16]
 800036c:	2200      	movs	r2, #0
 800036e:	4619      	mov	r1, r3
 8000370:	f000 f9ca 	bl	8000708 <write_pin>
  HAL_Delay(5);
 8000374:	2005      	movs	r0, #5
 8000376:	f000 fd4d 	bl	8000e14 <HAL_Delay>
  write_pin(lora->rst_port, lora->rst_pin, true);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	68d8      	ldr	r0, [r3, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	8a1b      	ldrh	r3, [r3, #16]
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	f000 f9bf 	bl	8000708 <write_pin>
  HAL_Delay(5);
 800038a:	2005      	movs	r0, #5
 800038c:	f000 fd42 	bl	8000e14 <HAL_Delay>

  // put in sleep mode
  lora_sleep(lora);
 8000390:	68f8      	ldr	r0, [r7, #12]
 8000392:	f000 f8a4 	bl	80004de <lora_sleep>

  // set base addresses
  _write(lora, REG_FIFO_TX_BASE_ADDR, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	210e      	movs	r1, #14
 800039a:	68f8      	ldr	r0, [r7, #12]
 800039c:	f7ff ff77 	bl	800028e <_write>
  _write(lora, REG_FIFO_RX_BASE_ADDR, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	210f      	movs	r1, #15
 80003a4:	68f8      	ldr	r0, [r7, #12]
 80003a6:	f7ff ff72 	bl	800028e <_write>

  // set LNA boost
  _write(lora, REG_LNA, _read(lora, REG_LNA) | 0x03);
 80003aa:	210c      	movs	r1, #12
 80003ac:	68f8      	ldr	r0, [r7, #12]
 80003ae:	f7ff ff0b 	bl	80001c8 <_read>
 80003b2:	4603      	mov	r3, r0
 80003b4:	f043 0303 	orr.w	r3, r3, #3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	210c      	movs	r1, #12
 80003be:	68f8      	ldr	r0, [r7, #12]
 80003c0:	f7ff ff65 	bl	800028e <_write>

  // set auto AGC
  _write(lora, REG_MODEM_CONFIG_3, 0x04);
 80003c4:	2204      	movs	r2, #4
 80003c6:	2126      	movs	r1, #38	@ 0x26
 80003c8:	68f8      	ldr	r0, [r7, #12]
 80003ca:	f7ff ff60 	bl	800028e <_write>

  // set to +17dBm
    lora_set_tx_power(lora, 17);
 80003ce:	2111      	movs	r1, #17
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f000 f891 	bl	80004f8 <lora_set_tx_power>

  // put in standby mode
  lora_idle(lora);
 80003d6:	68f8      	ldr	r0, [r7, #12]
 80003d8:	f000 f874 	bl	80004c4 <lora_idle>
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <lora_begin_packet>:

void lora_begin_packet(lora_t *lora, bool implicitHeader) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
  // put in standby mode
  lora_idle(lora);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f867 	bl	80004c4 <lora_idle>

  if (implicitHeader) {
 80003f6:	78fb      	ldrb	r3, [r7, #3]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d003      	beq.n	8000404 <lora_begin_packet+0x20>
    implicit_header_mode(lora);
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f7ff ff71 	bl	80002e4 <implicit_header_mode>
 8000402:	e002      	b.n	800040a <lora_begin_packet+0x26>
  } else {
    explicit_header_mode(lora);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff54 	bl	80002b2 <explicit_header_mode>
  }

  // reset FIFO address and payload length
  _write(lora, REG_FIFO_ADDR_PTR, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	210d      	movs	r1, #13
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff ff3d 	bl	800028e <_write>
  _write(lora, REG_PAYLOAD_LENGTH, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2122      	movs	r1, #34	@ 0x22
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff38 	bl	800028e <_write>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <lora_write_bytes>:
// write byte byte to FIFO
size_t lora_write(lora_t *lora, uint8_t byte) {
  return lora_write_bytes(lora, &byte, sizeof(byte));
}

size_t lora_write_bytes(lora_t *lora, const uint8_t *buffer, size_t size) {
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	60f8      	str	r0, [r7, #12]
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
  int current_length = _read(lora, REG_PAYLOAD_LENGTH);
 8000432:	2122      	movs	r1, #34	@ 0x22
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f7ff fec7 	bl	80001c8 <_read>
 800043a:	4603      	mov	r3, r0
 800043c:	617b      	str	r3, [r7, #20]

  // write data
  //for (size_t i = 0; i < size; i++) {
  //  _write(lora, REG_FIFO, buffer[i]);
  //}
  _write_bytes(lora, REG_FIFO, buffer, size);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	2100      	movs	r1, #0
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	f7ff feee 	bl	8000228 <_write_bytes>

  // update length
  _write(lora, REG_PAYLOAD_LENGTH, current_length + size);
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	b2da      	uxtb	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	4413      	add	r3, r2
 8000456:	b2db      	uxtb	r3, r3
 8000458:	461a      	mov	r2, r3
 800045a:	2122      	movs	r1, #34	@ 0x22
 800045c:	68f8      	ldr	r0, [r7, #12]
 800045e:	f7ff ff16 	bl	800028e <_write>

  return size;
 8000462:	687b      	ldr	r3, [r7, #4]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <lora_end_packet>:

void lora_end_packet(lora_t *lora, bool async) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
  if (async)
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d004      	beq.n	8000488 <lora_end_packet+0x1c>
      _write(lora, REG_DIO_MAPPING_1, 0x40); // DIO0 -> TXDONE
 800047e:	2240      	movs	r2, #64	@ 0x40
 8000480:	2140      	movs	r1, #64	@ 0x40
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ff03 	bl	800028e <_write>

  // put in TX mode
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000488:	2283      	movs	r2, #131	@ 0x83
 800048a:	2101      	movs	r1, #1
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff fefe 	bl	800028e <_write>

  if (!async) {
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	f083 0301 	eor.w	r3, r3, #1
 8000498:	b2db      	uxtb	r3, r3
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00e      	beq.n	80004bc <lora_end_packet+0x50>
    // wait for TX done
    while (!(_read(lora, REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 800049e:	bf00      	nop
 80004a0:	2112      	movs	r1, #18
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff fe90 	bl	80001c8 <_read>
 80004a8:	4603      	mov	r3, r0
 80004aa:	f003 0308 	and.w	r3, r3, #8
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0f6      	beq.n	80004a0 <lora_end_packet+0x34>
      ;

    // clear IRQ's
    _write(lora, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80004b2:	2208      	movs	r2, #8
 80004b4:	2112      	movs	r1, #18
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff fee9 	bl	800028e <_write>
  }
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <lora_idle>:
void lora_cad(lora_t *lora) {
  _write(lora, REG_DIO_MAPPING_1, 0x80);// DIO0 -> CADDONE
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_CAD);
}

void lora_idle(lora_t *lora) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 80004cc:	2281      	movs	r2, #129	@ 0x81
 80004ce:	2101      	movs	r1, #1
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff fedc 	bl	800028e <_write>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <lora_sleep>:

void lora_sleep(lora_t *lora) {
 80004de:	b580      	push	{r7, lr}
 80004e0:	b082      	sub	sp, #8
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	2101      	movs	r1, #1
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff fecf 	bl	800028e <_write>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <lora_set_tx_power>:

void lora_set_tx_power(lora_t *lora, int level) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  if (level > 17) {
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	2b11      	cmp	r3, #17
 8000506:	dd11      	ble.n	800052c <lora_set_tx_power+0x34>
    if (level > 20) {
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	2b14      	cmp	r3, #20
 800050c:	dd01      	ble.n	8000512 <lora_set_tx_power+0x1a>
      level = 20;
 800050e:	2314      	movs	r3, #20
 8000510:	603b      	str	r3, [r7, #0]
    }

    level -= 3;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	3b03      	subs	r3, #3
 8000516:	603b      	str	r3, [r7, #0]

    // high power operation
    _write(lora, REG_PA_DAC, 0x87);
 8000518:	2287      	movs	r2, #135	@ 0x87
 800051a:	214d      	movs	r1, #77	@ 0x4d
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff feb6 	bl	800028e <_write>
    lora_set_ocp(lora, 140);
 8000522:	218c      	movs	r1, #140	@ 0x8c
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f821 	bl	800056c <lora_set_ocp>
 800052a:	e00d      	b.n	8000548 <lora_set_tx_power+0x50>
  } else {
    if (level < 2) {
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	dc01      	bgt.n	8000536 <lora_set_tx_power+0x3e>
      level = 2;
 8000532:	2302      	movs	r3, #2
 8000534:	603b      	str	r3, [r7, #0]
    }

    _write(lora, REG_PA_DAC, 0x84);
 8000536:	2284      	movs	r2, #132	@ 0x84
 8000538:	214d      	movs	r1, #77	@ 0x4d
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fea7 	bl	800028e <_write>
    lora_set_ocp(lora, 100);
 8000540:	2164      	movs	r1, #100	@ 0x64
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f812 	bl	800056c <lora_set_ocp>
  }

  _write(lora, REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	3b02      	subs	r3, #2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	b25b      	sxtb	r3, r3
 8000552:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000556:	b25b      	sxtb	r3, r3
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	2109      	movs	r1, #9
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fe95 	bl	800028e <_write>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <lora_set_ocp>:
void lora_disable_invert_iq(lora_t *lora) {
  _write(lora, REG_INVERTIQ,  0x27);
  _write(lora, REG_INVERTIQ2, 0x1d);
}

void lora_set_ocp(lora_t *lora, uint8_t mA) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8000578:	231b      	movs	r3, #27
 800057a:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b78      	cmp	r3, #120	@ 0x78
 8000580:	d809      	bhi.n	8000596 <lora_set_ocp+0x2a>
    ocpTrim = (mA - 45) / 5;
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	3b2d      	subs	r3, #45	@ 0x2d
 8000586:	4a12      	ldr	r2, [pc, #72]	@ (80005d0 <lora_set_ocp+0x64>)
 8000588:	fb82 1203 	smull	r1, r2, r2, r3
 800058c:	1052      	asrs	r2, r2, #1
 800058e:	17db      	asrs	r3, r3, #31
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00b      	b.n	80005ae <lora_set_ocp+0x42>
  } else if (mA <=240) {
 8000596:	78fb      	ldrb	r3, [r7, #3]
 8000598:	2bf0      	cmp	r3, #240	@ 0xf0
 800059a:	d808      	bhi.n	80005ae <lora_set_ocp+0x42>
    ocpTrim = (mA + 30) / 10;
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	331e      	adds	r3, #30
 80005a0:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <lora_set_ocp+0x64>)
 80005a2:	fb82 1203 	smull	r1, r2, r2, r3
 80005a6:	1092      	asrs	r2, r2, #2
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	73fb      	strb	r3, [r7, #15]
  }

  _write(lora, REG_OCP, 0x20 | (0x1F & ocpTrim));
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	f003 031f 	and.w	r3, r3, #31
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	210b      	movs	r1, #11
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff fe64 	bl	800028e <_write>
}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	66666667 	.word	0x66666667

080005d4 <lora_dio_interrupt>:
    // set gain
    _write(lora, REG_LNA, _read(lora, REG_LNA) | (gain << 5));
  }
}

void lora_dio_interrupt(lora_t *lora) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  int irq_flags = _read(lora, REG_IRQ_FLAGS);
 80005dc:	2112      	movs	r1, #18
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fdf2 	bl	80001c8 <_read>
 80005e4:	4603      	mov	r3, r0
 80005e6:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  _write(lora, REG_IRQ_FLAGS, irq_flags);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	461a      	mov	r2, r3
 80005ee:	2112      	movs	r1, #18
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fe4c 	bl	800028e <_write>

  if (irq_flags & IRQ_CAD_DONE_MASK) {
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d010      	beq.n	8000622 <lora_dio_interrupt+0x4e>
    if (lora->on_cad_done) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d049      	beq.n	800069c <lora_dio_interrupt+0xc8>
      lora->on_cad_done(irq_flags & IRQ_CAD_DETECTED_MASK);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	f002 0201 	and.w	r2, r2, #1
 8000612:	2a00      	cmp	r2, #0
 8000614:	bf14      	ite	ne
 8000616:	2201      	movne	r2, #1
 8000618:	2200      	moveq	r2, #0
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	4610      	mov	r0, r2
 800061e:	4798      	blx	r3
      if (lora->on_tx_done) {
        lora->on_tx_done();
      }
    }
  }
}
 8000620:	e03c      	b.n	800069c <lora_dio_interrupt+0xc8>
  } else if (!(irq_flags & IRQ_PAYLOAD_CRC_ERROR_MASK)) {
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	2b00      	cmp	r3, #0
 800062a:	d137      	bne.n	800069c <lora_dio_interrupt+0xc8>
    if (irq_flags & IRQ_RX_DONE_MASK) {
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000632:	2b00      	cmp	r3, #0
 8000634:	d026      	beq.n	8000684 <lora_dio_interrupt+0xb0>
      lora->_pos = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
      int length = lora->_implicit_header ? _read(lora, REG_PAYLOAD_LENGTH) : _read(lora, REG_RX_NB_BYTES);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000642:	2b00      	cmp	r3, #0
 8000644:	d005      	beq.n	8000652 <lora_dio_interrupt+0x7e>
 8000646:	2122      	movs	r1, #34	@ 0x22
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fdbd 	bl	80001c8 <_read>
 800064e:	4603      	mov	r3, r0
 8000650:	e004      	b.n	800065c <lora_dio_interrupt+0x88>
 8000652:	2113      	movs	r1, #19
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff fdb7 	bl	80001c8 <_read>
 800065a:	4603      	mov	r3, r0
 800065c:	60bb      	str	r3, [r7, #8]
      _write(lora, REG_FIFO_ADDR_PTR, _read(lora, REG_FIFO_RX_CURRENT_ADDR));
 800065e:	2110      	movs	r1, #16
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fdb1 	bl	80001c8 <_read>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	210d      	movs	r1, #13
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff fe0e 	bl	800028e <_write>
      if (lora->on_receive) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <lora_dio_interrupt+0xc8>
        lora->on_receive(length);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	68b8      	ldr	r0, [r7, #8]
 8000680:	4798      	blx	r3
}
 8000682:	e00b      	b.n	800069c <lora_dio_interrupt+0xc8>
    } else if (irq_flags & IRQ_TX_DONE_MASK) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0308 	and.w	r3, r3, #8
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <lora_dio_interrupt+0xc8>
      if (lora->on_tx_done) {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <lora_dio_interrupt+0xc8>
        lora->on_tx_done();
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4798      	blx	r3
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <timed_lock_init>:
#include "timed-lock.h"

void timed_lock_init(timed_lock_t *lock, uint16_t waitfor, void (*callback)(void)) {
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	817b      	strh	r3, [r7, #10]
  lock->callback = callback;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	609a      	str	r2, [r3, #8]
  lock->last = 0;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
  lock->waitfor = waitfor;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	897a      	ldrh	r2, [r7, #10]
 80006c2:	809a      	strh	r2, [r3, #4]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <timed_lock_call>:

void timed_lock_reset(timed_lock_t *lock) {
  lock->last = 0;
}

void timed_lock_call(timed_lock_t *lock, uint32_t elapsed) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  // ensure sufficient time has passed
  if (lock->last == 0 || lock->waitfor <= elapsed - lock->last) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d008      	beq.n	80006f4 <timed_lock_call+0x24>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	4619      	mov	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	4299      	cmp	r1, r3
 80006f2:	d805      	bhi.n	8000700 <timed_lock_call+0x30>
    lock->last = elapsed;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	601a      	str	r2, [r3, #0]
    lock->callback();
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	4798      	blx	r3
  }
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <write_pin>:
#include "util.h"

void write_pin(port_t *port, pin_t pin, bool state) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	807b      	strh	r3, [r7, #2]
 8000714:	4613      	mov	r3, r2
 8000716:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000718:	787b      	ldrb	r3, [r7, #1]
 800071a:	461a      	mov	r2, r3
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	4619      	mov	r1, r3
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 fe97 	bl	8001454 <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <on_tx_done>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void on_tx_done(void) {
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <transmit_message>:

void transmit_message(void) {
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	if (++buffer[0] > 7) buffer[0] = 0;
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <transmit_message+0x30>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b08      	ldr	r3, [pc, #32]	@ (800076c <transmit_message+0x30>)
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <transmit_message+0x30>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b07      	cmp	r3, #7
 8000752:	d902      	bls.n	800075a <transmit_message+0x1e>
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <transmit_message+0x30>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
	do_transmit = true;
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <transmit_message+0x34>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000b4 	.word	0x200000b4
 8000770:	200000dc 	.word	0x200000dc

08000774 <setup>:

void setup(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af02      	add	r7, sp, #8
	lora_init(&lora, &hspi1, RadioSelect_GPIO_Port, RadioSelect_Pin, RadioReset_GPIO_Port, RadioReset_Pin);
 800077a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2304      	movs	r3, #4
 8000788:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800078c:	490e      	ldr	r1, [pc, #56]	@ (80007c8 <setup+0x54>)
 800078e:	480f      	ldr	r0, [pc, #60]	@ (80007cc <setup+0x58>)
 8000790:	f7ff fdc1 	bl	8000316 <lora_init>
	lora_set_tx_power(&lora, 20);
 8000794:	2114      	movs	r1, #20
 8000796:	480d      	ldr	r0, [pc, #52]	@ (80007cc <setup+0x58>)
 8000798:	f7ff feae 	bl	80004f8 <lora_set_tx_power>
	lora.on_tx_done = on_tx_done;
 800079c:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <setup+0x58>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	@ (80007d0 <setup+0x5c>)
 80007a0:	61da      	str	r2, [r3, #28]

	timed_lock_init(&send_code_lock, 10, transmit_message);
 80007a2:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <setup+0x60>)
 80007a4:	210a      	movs	r1, #10
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <setup+0x64>)
 80007a8:	f7ff ff7c 	bl	80006a4 <timed_lock_init>
	timed_lock_init(&req_code_lock, 10, transmit_message);
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <setup+0x60>)
 80007ae:	210a      	movs	r1, #10
 80007b0:	480a      	ldr	r0, [pc, #40]	@ (80007dc <setup+0x68>)
 80007b2:	f7ff ff77 	bl	80006a4 <timed_lock_init>
	timed_lock_init(&release_pod_lock, 10, transmit_message);
 80007b6:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <setup+0x60>)
 80007b8:	210a      	movs	r1, #10
 80007ba:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <setup+0x6c>)
 80007bc:	f7ff ff72 	bl	80006a4 <timed_lock_init>
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	0800072f 	.word	0x0800072f
 80007d4:	0800073d 	.word	0x0800073d
 80007d8:	200000b8 	.word	0x200000b8
 80007dc:	200000c4 	.word	0x200000c4
 80007e0:	200000d0 	.word	0x200000d0

080007e4 <loop>:

void loop(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	if (do_transmit) {
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <loop+0x44>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00f      	beq.n	8000810 <loop+0x2c>
		lora_begin_packet(&lora, false);
 80007f0:	2100      	movs	r1, #0
 80007f2:	480e      	ldr	r0, [pc, #56]	@ (800082c <loop+0x48>)
 80007f4:	f7ff fdf6 	bl	80003e4 <lora_begin_packet>
		lora_write_bytes(&lora, buffer, sizeof(buffer));
 80007f8:	2201      	movs	r2, #1
 80007fa:	490d      	ldr	r1, [pc, #52]	@ (8000830 <loop+0x4c>)
 80007fc:	480b      	ldr	r0, [pc, #44]	@ (800082c <loop+0x48>)
 80007fe:	f7ff fe12 	bl	8000426 <lora_write_bytes>
		lora_end_packet(&lora, true);
 8000802:	2101      	movs	r1, #1
 8000804:	4809      	ldr	r0, [pc, #36]	@ (800082c <loop+0x48>)
 8000806:	f7ff fe31 	bl	800046c <lora_end_packet>
		do_transmit = false;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <loop+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
	}

	if (was_interrupt) {
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <loop+0x50>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <loop+0x40>
		was_interrupt = false;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <loop+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
		lora_dio_interrupt(&lora);
 800081e:	4803      	ldr	r0, [pc, #12]	@ (800082c <loop+0x48>)
 8000820:	f7ff fed8 	bl	80005d4 <lora_dio_interrupt>
	}
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000dc 	.word	0x200000dc
 800082c:	2000008c 	.word	0x2000008c
 8000830:	200000b4 	.word	0x200000b4
 8000834:	200000dd 	.word	0x200000dd

08000838 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
	switch (pin) {
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000848:	d01e      	beq.n	8000888 <HAL_GPIO_EXTI_Callback+0x50>
 800084a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800084e:	dc27      	bgt.n	80008a0 <HAL_GPIO_EXTI_Callback+0x68>
 8000850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000854:	d010      	beq.n	8000878 <HAL_GPIO_EXTI_Callback+0x40>
 8000856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800085a:	dc21      	bgt.n	80008a0 <HAL_GPIO_EXTI_Callback+0x68>
 800085c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000860:	d01a      	beq.n	8000898 <HAL_GPIO_EXTI_Callback+0x60>
 8000862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000866:	d11b      	bne.n	80008a0 <HAL_GPIO_EXTI_Callback+0x68>
	  case SendCode_Pin:
		  timed_lock_call(&send_code_lock, HAL_GetTick());
 8000868:	f000 fac8 	bl	8000dfc <HAL_GetTick>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000872:	f7ff ff2d 	bl	80006d0 <timed_lock_call>
		  break;
 8000876:	e013      	b.n	80008a0 <HAL_GPIO_EXTI_Callback+0x68>
	  case RequestCode_Pin:
	  	  timed_lock_call(&req_code_lock, HAL_GetTick());
 8000878:	f000 fac0 	bl	8000dfc <HAL_GetTick>
 800087c:	4603      	mov	r3, r0
 800087e:	4619      	mov	r1, r3
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <HAL_GPIO_EXTI_Callback+0x74>)
 8000882:	f7ff ff25 	bl	80006d0 <timed_lock_call>
	  	  break;
 8000886:	e00b      	b.n	80008a0 <HAL_GPIO_EXTI_Callback+0x68>
	  case ReleasePod_Pin:
	  	  timed_lock_call(&release_pod_lock, HAL_GetTick());
 8000888:	f000 fab8 	bl	8000dfc <HAL_GetTick>
 800088c:	4603      	mov	r3, r0
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000892:	f7ff ff1d 	bl	80006d0 <timed_lock_call>
	  	  break;
 8000896:	e003      	b.n	80008a0 <HAL_GPIO_EXTI_Callback+0x68>
	  case RadioDIO_Pin:
		  was_interrupt = true;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
		  break;
 800089e:	bf00      	nop
	  }
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000b8 	.word	0x200000b8
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	200000d0 	.word	0x200000d0
 80008b4:	200000dd 	.word	0x200000dd

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f000 fa35 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c0:	f000 f809 	bl	80008d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c4:	f000 f896 	bl	80009f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008c8:	f000 f856 	bl	8000978 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80008cc:	f7ff ff52 	bl	8000774 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loop();
 80008d0:	f7ff ff88 	bl	80007e4 <loop>
 80008d4:	e7fc      	b.n	80008d0 <main+0x18>

080008d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b096      	sub	sp, #88	@ 0x58
 80008da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2244      	movs	r2, #68	@ 0x44
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fc51 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008fc:	f000 fde8 	bl	80014d0 <HAL_PWREx_ControlVoltageScaling>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000906:	f000 f8f1 	bl	8000aec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000924:	230a      	movs	r3, #10
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000928:	2307      	movs	r3, #7
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fe1f 	bl	800157c <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000944:	f000 f8d2 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2303      	movs	r3, #3
 800094e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	2104      	movs	r1, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f001 f9e7 	bl	8001d34 <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800096c:	f000 f8be 	bl	8000aec <Error_Handler>
  }
}
 8000970:	bf00      	nop
 8000972:	3758      	adds	r7, #88	@ 0x58
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_SPI1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <MX_SPI1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_SPI1_Init+0x74>)
 8000984:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_SPI1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_SPI1_Init+0x74>)
 8000992:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_SPI1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009ae:	2238      	movs	r2, #56	@ 0x38
 80009b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c4:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_SPI1_Init+0x74>)
 80009d8:	f001 fb98 	bl	800210c <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f883 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000028 	.word	0x20000028
 80009f0:	40013000 	.word	0x40013000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a35      	ldr	r2, [pc, #212]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a29      	ldr	r2, [pc, #164]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <MX_GPIO_Init+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RadioSelect_Pin|RadioReset_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f000 fcfa 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RadioSelect_Pin RadioReset_Pin */
  GPIO_InitStruct.Pin = RadioSelect_Pin|RadioReset_Pin;
 8000a60:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f000 fb40 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pin : RadioDIO_Pin */
  GPIO_InitStruct.Pin = RadioDIO_Pin;
 8000a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RadioDIO_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9a:	f000 fb31 	bl	8001100 <HAL_GPIO_Init>

  /*Configure GPIO pins : SendCode_Pin RequestCode_Pin ReleasePod_Pin */
  GPIO_InitStruct.Pin = SendCode_Pin|RequestCode_Pin|ReleasePod_Pin;
 8000a9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <MX_GPIO_Init+0xf4>)
 8000ab6:	f000 fb23 	bl	8001100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2017      	movs	r0, #23
 8000ac0:	f000 faa7 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ac4:	2017      	movs	r0, #23
 8000ac6:	f000 fac0 	bl	800104a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2028      	movs	r0, #40	@ 0x28
 8000ad0:	f000 fa9f 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad4:	2028      	movs	r0, #40	@ 0x28
 8000ad6:	f000 fab8 	bl	800104a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000800 	.word	0x48000800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a29      	ldr	r2, [pc, #164]	@ (8000c04 <HAL_SPI_MspInit+0xc4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d14c      	bne.n	8000bfc <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	4b29      	ldr	r3, [pc, #164]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	4a28      	ldr	r2, [pc, #160]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b6e:	4b26      	ldr	r3, [pc, #152]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b23      	ldr	r3, [pc, #140]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <HAL_SPI_MspInit+0xc8>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bba:	2305      	movs	r3, #5
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 fa9a 	bl	8001100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <HAL_SPI_MspInit+0xcc>)
 8000be8:	f000 fa8a 	bl	8001100 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2023      	movs	r0, #35	@ 0x23
 8000bf2:	f000 fa0e 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bf6:	2023      	movs	r0, #35	@ 0x23
 8000bf8:	f000 fa27 	bl	800104a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	@ 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48000400 	.word	0x48000400

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f8b5 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RadioDIO_Pin);
 8000c72:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000c76:	f000 fc05 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <SPI1_IRQHandler+0x10>)
 8000c86:	f001 ffb1 	bl	8002bec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000028 	.word	0x20000028

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SendCode_Pin);
 8000c98:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000c9c:	f000 fbf2 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RequestCode_Pin);
 8000ca0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ca4:	f000 fbee 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ReleasePod_Pin);
 8000ca8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000cac:	f000 fbea 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f002 fa49 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fdd5 	bl	80008b8 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d1c:	08003244 	.word	0x08003244
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f961 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f80e 	bl	8000d5c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff fed4 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_InitTick+0x70>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f96d 	bl	8001066 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10f      	bne.n	8000db2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d809      	bhi.n	8000dac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 f937 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da4:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_InitTick+0x74>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e007      	b.n	8000dbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e004      	b.n	8000dbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e001      	b.n	8000dbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	200000e0 	.word	0x200000e0

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000e0 	.word	0x200000e0

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	@ (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d005      	beq.n	80010a2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2204      	movs	r2, #4
 800109a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e029      	b.n	80010f6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 020e 	bic.w	r2, r2, #14
 80010b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f003 021c 	and.w	r2, r3, #28
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	4798      	blx	r3
    }
  }
  return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e17f      	b.n	8001410 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8171 	beq.w	800140a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x40>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d118      	bne.n	80011e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ac 	beq.w	800140a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x242>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4a      	ldr	r2, [pc, #296]	@ (800144c <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x22a>
 8001326:	2306      	movs	r3, #6
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132a:	2307      	movs	r3, #7
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001342:	2300      	movs	r3, #0
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001354:	4937      	ldr	r1, [pc, #220]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001386:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_GPIO_Init+0x350>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013da:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f ae78 	bne.w	8001110 <HAL_GPIO_Init+0x10>
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	48001400 	.word	0x48001400
 800144c:	48001800 	.word	0x48001800
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001470:	e002      	b.n	8001478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f9c8 	bl	8000838 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014b8:	4b04      	ldr	r3, [pc, #16]	@ (80014cc <HAL_PWREx_GetVoltageRange+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000

080014d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014de:	d130      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ec:	d038      	beq.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ee:	4b20      	ldr	r3, [pc, #128]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2232      	movs	r2, #50	@ 0x32
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	4a1b      	ldr	r2, [pc, #108]	@ (8001578 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0c9b      	lsrs	r3, r3, #18
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001514:	e002      	b.n	800151c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3b01      	subs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001528:	d102      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x60>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f2      	bne.n	8001516 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001530:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800153c:	d110      	bne.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e00f      	b.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800154a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154e:	d007      	beq.n	8001560 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001558:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40007000 	.word	0x40007000
 8001574:	20000000 	.word	0x20000000
 8001578:	431bde83 	.word	0x431bde83

0800157c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e3ca      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4b97      	ldr	r3, [pc, #604]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001598:	4b94      	ldr	r3, [pc, #592]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80e4 	beq.w	8001778 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4a>
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	f040 808b 	bne.w	80016d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 8087 	bne.w	80016d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c6:	4b89      	ldr	r3, [pc, #548]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x62>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e3a2      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	4b82      	ldr	r3, [pc, #520]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_RCC_OscConfig+0x7c>
 80015ee:	4b7f      	ldr	r3, [pc, #508]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015f6:	e005      	b.n	8001604 <HAL_RCC_OscConfig+0x88>
 80015f8:	4b7c      	ldr	r3, [pc, #496]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001604:	4293      	cmp	r3, r2
 8001606:	d223      	bcs.n	8001650 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fd1d 	bl	800204c <RCC_SetFlashLatencyFromMSIRange>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e383      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161c:	4b73      	ldr	r3, [pc, #460]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a72      	ldr	r2, [pc, #456]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b70      	ldr	r3, [pc, #448]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	496d      	ldr	r1, [pc, #436]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163a:	4b6c      	ldr	r3, [pc, #432]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4968      	ldr	r1, [pc, #416]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
 800164e:	e025      	b.n	800169c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001650:	4b66      	ldr	r3, [pc, #408]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a65      	ldr	r2, [pc, #404]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b63      	ldr	r3, [pc, #396]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4960      	ldr	r1, [pc, #384]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	4b5f      	ldr	r3, [pc, #380]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	495b      	ldr	r1, [pc, #364]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fcdd 	bl	800204c <RCC_SetFlashLatencyFromMSIRange>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e343      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800169c:	f000 fc4a 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b52      	ldr	r3, [pc, #328]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	4950      	ldr	r1, [pc, #320]	@ (80017f0 <HAL_RCC_OscConfig+0x274>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	4a4e      	ldr	r2, [pc, #312]	@ (80017f4 <HAL_RCC_OscConfig+0x278>)
 80016ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016bc:	4b4e      	ldr	r3, [pc, #312]	@ (80017f8 <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fb4b 	bl	8000d5c <HAL_InitTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d052      	beq.n	8001776 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	e327      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d032      	beq.n	8001742 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016dc:	4b43      	ldr	r3, [pc, #268]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a42      	ldr	r2, [pc, #264]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb88 	bl	8000dfc <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f0:	f7ff fb84 	bl	8000dfc <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e310      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001702:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170e:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a36      	ldr	r2, [pc, #216]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b34      	ldr	r3, [pc, #208]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4931      	ldr	r1, [pc, #196]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172c:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	492c      	ldr	r1, [pc, #176]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e01a      	b.n	8001778 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a29      	ldr	r2, [pc, #164]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb55 	bl	8000dfc <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001756:	f7ff fb51 	bl	8000dfc <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e2dd      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001768:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x1da>
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001776:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d074      	beq.n	800186e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b08      	cmp	r3, #8
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x21a>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d10e      	bne.n	80017ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d10b      	bne.n	80017ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d064      	beq.n	800186c <HAL_RCC_OscConfig+0x2f0>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d160      	bne.n	800186c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e2ba      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x24a>
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e026      	b.n	8001814 <HAL_RCC_OscConfig+0x298>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ce:	d115      	bne.n	80017fc <HAL_RCC_OscConfig+0x280>
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a02      	ldr	r2, [pc, #8]	@ (80017ec <HAL_RCC_OscConfig+0x270>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e014      	b.n	8001814 <HAL_RCC_OscConfig+0x298>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	080031fc 	.word	0x080031fc
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004
 80017fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a9f      	ldr	r2, [pc, #636]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b9d      	ldr	r3, [pc, #628]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a9c      	ldr	r2, [pc, #624]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff faee 	bl	8000dfc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff faea 	bl	8000dfc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e276      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001836:	4b92      	ldr	r3, [pc, #584]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x2a8>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fada 	bl	8000dfc <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fad6 	bl	8000dfc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e262      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x2d0>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d060      	beq.n	800193c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x310>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d119      	bne.n	80018ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d116      	bne.n	80018ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800188c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x328>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e23f      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	4973      	ldr	r1, [pc, #460]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	e040      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d023      	beq.n	800190a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fa95 	bl	8000dfc <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fa91 	bl	8000dfc <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e21d      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e8:	4b65      	ldr	r3, [pc, #404]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b62      	ldr	r3, [pc, #392]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	495f      	ldr	r1, [pc, #380]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
 8001908:	e018      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fa71 	bl	8000dfc <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fa6d 	bl	8000dfc <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1f9      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001930:	4b53      	ldr	r3, [pc, #332]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03c      	beq.n	80019c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01c      	beq.n	800198a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001950:	4b4b      	ldr	r3, [pc, #300]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001956:	4a4a      	ldr	r2, [pc, #296]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fa4c 	bl	8000dfc <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fa48 	bl	8000dfc <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1d4      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800197a:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ef      	beq.n	8001968 <HAL_RCC_OscConfig+0x3ec>
 8001988:	e01b      	b.n	80019c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001990:	4a3b      	ldr	r2, [pc, #236]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff fa2f 	bl	8000dfc <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a2:	f7ff fa2b 	bl	8000dfc <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1b7      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b4:	4b32      	ldr	r3, [pc, #200]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ef      	bne.n	80019a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80a6 	beq.w	8001b1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	4a26      	ldr	r2, [pc, #152]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_RCC_OscConfig+0x508>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d118      	bne.n	8001a3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a08:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_RCC_OscConfig+0x508>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <HAL_RCC_OscConfig+0x508>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a14:	f7ff f9f2 	bl	8000dfc <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1c:	f7ff f9ee 	bl	8000dfc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e17a      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_RCC_OscConfig+0x508>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <HAL_RCC_OscConfig+0x4d8>
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a52:	e029      	b.n	8001aa8 <HAL_RCC_OscConfig+0x52c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d115      	bne.n	8001a88 <HAL_RCC_OscConfig+0x50c>
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a62:	4a07      	ldr	r2, [pc, #28]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a72:	4a03      	ldr	r2, [pc, #12]	@ (8001a80 <HAL_RCC_OscConfig+0x504>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x52c>
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40007000 	.word	0x40007000
 8001a88:	4b9c      	ldr	r3, [pc, #624]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	4a9b      	ldr	r2, [pc, #620]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a98:	4b98      	ldr	r3, [pc, #608]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9e:	4a97      	ldr	r2, [pc, #604]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d016      	beq.n	8001ade <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f9a4 	bl	8000dfc <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f9a0 	bl	8000dfc <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e12a      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ace:	4b8b      	ldr	r3, [pc, #556]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ed      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x53c>
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f98d 	bl	8000dfc <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff f989 	bl	8000dfc <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e113      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afc:	4b7f      	ldr	r3, [pc, #508]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ed      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b7a      	ldr	r3, [pc, #488]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	4a79      	ldr	r2, [pc, #484]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80fe 	beq.w	8001d22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	f040 80d0 	bne.w	8001cd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b30:	4b72      	ldr	r3, [pc, #456]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d130      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d127      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d11f      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b70:	2a07      	cmp	r2, #7
 8001b72:	bf14      	ite	ne
 8001b74:	2201      	movne	r2, #1
 8001b76:	2200      	moveq	r2, #0
 8001b78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d113      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d06e      	beq.n	8001c84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d069      	beq.n	8001c80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bb8:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0ad      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd4:	f7ff f912 	bl	8000dfc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f90e 	bl	8000dfc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e09a      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bee:	4b43      	ldr	r3, [pc, #268]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfa:	4b40      	ldr	r3, [pc, #256]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <HAL_RCC_OscConfig+0x784>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c0a:	3a01      	subs	r2, #1
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c14:	0212      	lsls	r2, r2, #8
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c1c:	0852      	lsrs	r2, r2, #1
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	0552      	lsls	r2, r2, #21
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c28:	0852      	lsrs	r2, r2, #1
 8001c2a:	3a01      	subs	r2, #1
 8001c2c:	0652      	lsls	r2, r2, #25
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c34:	0912      	lsrs	r2, r2, #4
 8001c36:	0452      	lsls	r2, r2, #17
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	4930      	ldr	r1, [pc, #192]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c40:	4b2e      	ldr	r3, [pc, #184]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2d      	ldr	r2, [pc, #180]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c58:	f7ff f8d0 	bl	8000dfc <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f8cc 	bl	8000dfc <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e058      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b22      	ldr	r3, [pc, #136]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7e:	e050      	b.n	8001d22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e04f      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d148      	bne.n	8001d22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ca8:	f7ff f8a8 	bl	8000dfc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f8a4 	bl	8000dfc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e030      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x734>
 8001cce:	e028      	b.n	8001d22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d023      	beq.n	8001d1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_RCC_OscConfig+0x780>)
 8001cdc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f88b 	bl	8000dfc <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff f887 	bl	8000dfc <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d905      	bls.n	8001d04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e013      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ec      	bne.n	8001cea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4905      	ldr	r1, [pc, #20]	@ (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_RCC_OscConfig+0x7b4>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
 8001d1c:	e001      	b.n	8001d22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	feeefffc 	.word	0xfeeefffc

08001d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0e7      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b75      	ldr	r3, [pc, #468]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d910      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b72      	ldr	r3, [pc, #456]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4970      	ldr	r1, [pc, #448]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b6e      	ldr	r3, [pc, #440]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0cf      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b66      	ldr	r3, [pc, #408]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d908      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4960      	ldr	r1, [pc, #384]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d04c      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dba:	4b5a      	ldr	r3, [pc, #360]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d121      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0a6      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd2:	4b54      	ldr	r3, [pc, #336]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d115      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e09a      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dea:	4b4e      	ldr	r3, [pc, #312]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e08e      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e086      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e0a:	4b46      	ldr	r3, [pc, #280]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4943      	ldr	r1, [pc, #268]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1c:	f7fe ffee 	bl	8000dfc <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7fe ffea 	bl	8000dfc <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e06e      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 020c 	and.w	r2, r3, #12
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1eb      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d010      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d208      	bcs.n	8001e7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b2e      	ldr	r3, [pc, #184]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	492b      	ldr	r1, [pc, #172]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7a:	4b29      	ldr	r3, [pc, #164]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d210      	bcs.n	8001eaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 0207 	bic.w	r2, r3, #7
 8001e90:	4923      	ldr	r1, [pc, #140]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e036      	b.n	8001f18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4918      	ldr	r1, [pc, #96]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4910      	ldr	r1, [pc, #64]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee8:	f000 f824 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001eec:	4602      	mov	r2, r0
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	490b      	ldr	r1, [pc, #44]	@ (8001f28 <HAL_RCC_ClockConfig+0x1f4>)
 8001efa:	5ccb      	ldrb	r3, [r1, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_RCC_ClockConfig+0x1fc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff25 	bl	8000d5c <HAL_InitTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f16:	7afb      	ldrb	r3, [r7, #11]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	080031fc 	.word	0x080031fc
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f42:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x34>
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d121      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d11e      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f68:	4b34      	ldr	r3, [pc, #208]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f74:	4b31      	ldr	r3, [pc, #196]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e005      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f90:	4a2b      	ldr	r2, [pc, #172]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10d      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d102      	bne.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fac:	4b25      	ldr	r3, [pc, #148]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	e004      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d134      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0xa6>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d003      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fd8:	e005      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fdc:	617b      	str	r3, [r7, #20]
      break;
 8001fde:	e005      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe2:	617b      	str	r3, [r7, #20]
      break;
 8001fe4:	e002      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	617b      	str	r3, [r7, #20]
      break;
 8001fea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fec:	4b13      	ldr	r3, [pc, #76]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	fb03 f202 	mul.w	r2, r3, r2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_RCC_GetSysClockFreq+0x108>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	0e5b      	lsrs	r3, r3, #25
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	3301      	adds	r3, #1
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800202c:	69bb      	ldr	r3, [r7, #24]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	0800320c 	.word	0x0800320c
 8002044:	00f42400 	.word	0x00f42400
 8002048:	007a1200 	.word	0x007a1200

0800204c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002058:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002064:	f7ff fa26 	bl	80014b4 <HAL_PWREx_GetVoltageRange>
 8002068:	6178      	str	r0, [r7, #20]
 800206a:	e014      	b.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002070:	4a24      	ldr	r2, [pc, #144]	@ (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002076:	6593      	str	r3, [r2, #88]	@ 0x58
 8002078:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002084:	f7ff fa16 	bl	80014b4 <HAL_PWREx_GetVoltageRange>
 8002088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	4a1d      	ldr	r2, [pc, #116]	@ (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800209c:	d10b      	bne.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b80      	cmp	r3, #128	@ 0x80
 80020a2:	d919      	bls.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80020a8:	d902      	bls.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020aa:	2302      	movs	r3, #2
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	e013      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b0:	2301      	movs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e010      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b80      	cmp	r3, #128	@ 0x80
 80020ba:	d902      	bls.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020bc:	2303      	movs	r3, #3
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e00a      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b80      	cmp	r3, #128	@ 0x80
 80020c6:	d102      	bne.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c8:	2302      	movs	r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e004      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b70      	cmp	r3, #112	@ 0x70
 80020d2:	d101      	bne.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d4:	2301      	movs	r3, #1
 80020d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 0207 	bic.w	r2, r3, #7
 80020e0:	4909      	ldr	r1, [pc, #36]	@ (8002108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020e8:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	40022000 	.word	0x40022000

0800210c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e095      	b.n	800224a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800212e:	d009      	beq.n	8002144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
 8002136:	e005      	b.n	8002144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fcee 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800217a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002184:	d902      	bls.n	800218c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e002      	b.n	8002192 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800218c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002190:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800219a:	d007      	beq.n	80021ac <HAL_SPI_Init+0xa0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021a4:	d002      	beq.n	80021ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	ea42 0103 	orr.w	r1, r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	0c1b      	lsrs	r3, r3, #16
 8002208:	f003 0204 	and.w	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002228:	ea42 0103 	orr.w	r1, r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b088      	sub	sp, #32
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002262:	f7fe fdcb 	bl	8000dfc <HAL_GetTick>
 8002266:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
 800227a:	e15c      	b.n	8002536 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_SPI_Transmit+0x36>
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e154      	b.n	8002536 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_SPI_Transmit+0x48>
 8002296:	2302      	movs	r3, #2
 8002298:	e14d      	b.n	8002536 <HAL_SPI_Transmit+0x2e4>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	88fa      	ldrh	r2, [r7, #6]
 80022ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ec:	d10f      	bne.n	800230e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800230c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002318:	2b40      	cmp	r3, #64	@ 0x40
 800231a:	d007      	beq.n	800232c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800232a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002334:	d952      	bls.n	80023dc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_SPI_Transmit+0xf2>
 800233e:	8b7b      	ldrh	r3, [r7, #26]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d145      	bne.n	80023d0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002354:	1c9a      	adds	r2, r3, #2
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002368:	e032      	b.n	80023d0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d112      	bne.n	800239e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	1c9a      	adds	r2, r3, #2
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800239c:	e018      	b.n	80023d0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800239e:	f7fe fd2d 	bl	8000dfc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d803      	bhi.n	80023b6 <HAL_SPI_Transmit+0x164>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d102      	bne.n	80023bc <HAL_SPI_Transmit+0x16a>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0b2      	b.n	8002536 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1c7      	bne.n	800236a <HAL_SPI_Transmit+0x118>
 80023da:	e083      	b.n	80024e4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_SPI_Transmit+0x198>
 80023e4:	8b7b      	ldrh	r3, [r7, #26]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d177      	bne.n	80024da <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d912      	bls.n	800241a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	881a      	ldrh	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002404:	1c9a      	adds	r2, r3, #2
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b02      	subs	r3, #2
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002418:	e05f      	b.n	80024da <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	330c      	adds	r3, #12
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002440:	e04b      	b.n	80024da <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d12b      	bne.n	80024a8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d912      	bls.n	8002480 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b02      	subs	r3, #2
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800247e:	e02c      	b.n	80024da <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80024a6:	e018      	b.n	80024da <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a8:	f7fe fca8 	bl	8000dfc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d803      	bhi.n	80024c0 <HAL_SPI_Transmit+0x26e>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024be:	d102      	bne.n	80024c6 <HAL_SPI_Transmit+0x274>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e02d      	b.n	8002536 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ae      	bne.n	8002442 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fe09 	bl	8003100 <SPI_EndRxTxTransaction>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002534:	2300      	movs	r3, #0
  }
}
 8002536:	4618      	mov	r0, r3
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b088      	sub	sp, #32
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	e123      	b.n	80027a6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002566:	d112      	bne.n	800258e <HAL_SPI_Receive+0x50>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10e      	bne.n	800258e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2204      	movs	r2, #4
 8002574:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f912 	bl	80027ae <HAL_SPI_TransmitReceive>
 800258a:	4603      	mov	r3, r0
 800258c:	e10b      	b.n	80027a6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800258e:	f7fe fc35 	bl	8000dfc <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_SPI_Receive+0x62>
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e100      	b.n	80027a6 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_SPI_Receive+0x74>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0f9      	b.n	80027a6 <HAL_SPI_Receive+0x268>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2204      	movs	r2, #4
 80025be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002604:	d908      	bls.n	8002618 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e007      	b.n	8002628 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002626:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002630:	d10f      	bne.n	8002652 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265c:	2b40      	cmp	r3, #64	@ 0x40
 800265e:	d007      	beq.n	8002670 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002678:	d875      	bhi.n	8002766 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800267a:	e037      	b.n	80026ec <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d117      	bne.n	80026ba <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f103 020c 	add.w	r2, r3, #12
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80026b8:	e018      	b.n	80026ec <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ba:	f7fe fb9f 	bl	8000dfc <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d803      	bhi.n	80026d2 <HAL_SPI_Receive+0x194>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d102      	bne.n	80026d8 <HAL_SPI_Receive+0x19a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e05c      	b.n	80027a6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1c1      	bne.n	800267c <HAL_SPI_Receive+0x13e>
 80026f8:	e03b      	b.n	8002772 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d115      	bne.n	8002734 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	b292      	uxth	r2, r2
 8002714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	1c9a      	adds	r2, r3, #2
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002732:	e018      	b.n	8002766 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002734:	f7fe fb62 	bl	8000dfc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d803      	bhi.n	800274c <HAL_SPI_Receive+0x20e>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274a:	d102      	bne.n	8002752 <HAL_SPI_Receive+0x214>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e01f      	b.n	80027a6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1c3      	bne.n	80026fa <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	6839      	ldr	r1, [r7, #0]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 fc6a 	bl	8003050 <SPI_EndRxTransaction>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b08a      	sub	sp, #40	@ 0x28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c0:	f7fe fb1c 	bl	8000dfc <HAL_GetTick>
 80027c4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80027cc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027dc:	7ffb      	ldrb	r3, [r7, #31]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d00c      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x4e>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027e8:	d106      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d102      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x4a>
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d001      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e1f3      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_SPI_TransmitReceive+0x60>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_SPI_TransmitReceive+0x60>
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e1e8      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x72>
 800281c:	2302      	movs	r3, #2
 800281e:	e1e1      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b04      	cmp	r3, #4
 8002832:	d003      	beq.n	800283c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2205      	movs	r2, #5
 8002838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	887a      	ldrh	r2, [r7, #2]
 8002862:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	887a      	ldrh	r2, [r7, #2]
 8002868:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800287e:	d802      	bhi.n	8002886 <HAL_SPI_TransmitReceive+0xd8>
 8002880:	8abb      	ldrh	r3, [r7, #20]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d908      	bls.n	8002898 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	e007      	b.n	80028a8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80028a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b40      	cmp	r3, #64	@ 0x40
 80028b4:	d007      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ce:	f240 8083 	bls.w	80029d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x132>
 80028da:	8afb      	ldrh	r3, [r7, #22]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d16f      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002904:	e05c      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d11b      	bne.n	800294c <HAL_SPI_TransmitReceive+0x19e>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_SPI_TransmitReceive+0x19e>
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	2b01      	cmp	r3, #1
 8002922:	d113      	bne.n	800294c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	881a      	ldrh	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002934:	1c9a      	adds	r2, r3, #2
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b01      	cmp	r3, #1
 8002958:	d11c      	bne.n	8002994 <HAL_SPI_TransmitReceive+0x1e6>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	b292      	uxth	r2, r2
 8002972:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	1c9a      	adds	r2, r3, #2
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002990:	2301      	movs	r3, #1
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002994:	f7fe fa32 	bl	8000dfc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d80d      	bhi.n	80029c0 <HAL_SPI_TransmitReceive+0x212>
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d009      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e111      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d19d      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x158>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d197      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x158>
 80029d6:	e0e5      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x23a>
 80029e0:	8afb      	ldrh	r3, [r7, #22]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 80d1 	bne.w	8002b8a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d912      	bls.n	8002a18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b02      	subs	r3, #2
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a16:	e0b8      	b.n	8002b8a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3e:	e0a4      	b.n	8002b8a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d134      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x30a>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d02f      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x30a>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d12c      	bne.n	8002ab8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d912      	bls.n	8002a8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a78:	1c9a      	adds	r2, r3, #2
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b02      	subs	r3, #2
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a8c:	e012      	b.n	8002ab4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d148      	bne.n	8002b58 <HAL_SPI_TransmitReceive+0x3aa>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d042      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d923      	bls.n	8002b26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b02      	subs	r3, #2
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d81f      	bhi.n	8002b54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	e016      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f103 020c 	add.w	r2, r3, #12
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	7812      	ldrb	r2, [r2, #0]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b58:	f7fe f950 	bl	8000dfc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d803      	bhi.n	8002b70 <HAL_SPI_TransmitReceive+0x3c2>
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d102      	bne.n	8002b76 <HAL_SPI_TransmitReceive+0x3c8>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e02c      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f47f af55 	bne.w	8002a40 <HAL_SPI_TransmitReceive+0x292>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f af4e 	bne.w	8002a40 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 faa9 	bl	8003100 <SPI_EndRxTxTransaction>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002be2:	2300      	movs	r3, #0
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3728      	adds	r7, #40	@ 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d009      	beq.n	8002c2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
    return;
 8002c2a:	e0ce      	b.n	8002dca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_SPI_IRQHandler+0x5e>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
    return;
 8002c48:	e0bf      	b.n	8002dca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_SPI_IRQHandler+0x7e>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80b0 	beq.w	8002dca <HAL_SPI_IRQHandler+0x1de>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80aa 	beq.w	8002dca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d023      	beq.n	8002cc8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d011      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	e00b      	b.n	8002cc8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
        return;
 8002cc6:	e080      	b.n	8002dca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d014      	beq.n	8002cfc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d04f      	beq.n	8002dc8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_SPI_IRQHandler+0x168>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d034      	beq.n	8002dbe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0203 	bic.w	r2, r2, #3
 8002d62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d011      	beq.n	8002d90 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <HAL_SPI_IRQHandler+0x1e4>)
 8002d72:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe f980 	bl	800107e <HAL_DMA_Abort_IT>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <HAL_SPI_IRQHandler+0x1e4>)
 8002d9e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe f96a 	bl	800107e <HAL_DMA_Abort_IT>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002dbc:	e003      	b.n	8002dc6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f808 	bl	8002dd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002dc4:	e000      	b.n	8002dc8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002dc6:	bf00      	nop
    return;
 8002dc8:	bf00      	nop
  }
}
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08002de9 	.word	0x08002de9

08002dd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f7ff ffe5 	bl	8002dd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e24:	f7fd ffea 	bl	8000dfc <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e34:	f7fd ffe2 	bl	8000dfc <HAL_GetTick>
 8002e38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e3a:	4b39      	ldr	r3, [pc, #228]	@ (8002f20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	015b      	lsls	r3, r3, #5
 8002e40:	0d1b      	lsrs	r3, r3, #20
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e4a:	e054      	b.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d050      	beq.n	8002ef6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e54:	f7fd ffd2 	bl	8000dfc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d902      	bls.n	8002e6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d13d      	bne.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e82:	d111      	bne.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e8c:	d004      	beq.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e96:	d107      	bne.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ea6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eb0:	d10f      	bne.n	8002ed2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e017      	b.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d19b      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f36:	f7fd ff61 	bl	8000dfc <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002f46:	f7fd ff59 	bl	8000dfc <HAL_GetTick>
 8002f4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f54:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00da      	lsls	r2, r3, #3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	0d1b      	lsrs	r3, r3, #20
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f6c:	e060      	b.n	8003030 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002f74:	d107      	bne.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d050      	beq.n	8003030 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f8e:	f7fd ff35 	bl	8000dfc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d902      	bls.n	8002fa4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d13d      	bne.n	8003020 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fbc:	d111      	bne.n	8002fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc6:	d004      	beq.n	8002fd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd0:	d107      	bne.n	8002fe2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fe0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fea:	d10f      	bne.n	800300c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800300a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e010      	b.n	8003042 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3b01      	subs	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	d196      	bne.n	8002f6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3728      	adds	r7, #40	@ 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003064:	d111      	bne.n	800308a <SPI_EndRxTransaction+0x3a>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800306e:	d004      	beq.n	800307a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003078:	d107      	bne.n	800308a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	@ 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff febd 	bl	8002e14 <SPI_WaitFlagStateUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e023      	b.n	80030f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b8:	d11d      	bne.n	80030f6 <SPI_EndRxTransaction+0xa6>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c2:	d004      	beq.n	80030ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030cc:	d113      	bne.n	80030f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff22 	bl	8002f24 <SPI_WaitFifoStateUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e000      	b.n	80030f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2200      	movs	r2, #0
 8003114:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff ff03 	bl	8002f24 <SPI_WaitFifoStateUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e027      	b.n	8003184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff fe68 	bl	8002e14 <SPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e014      	b.n	8003184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff fedc 	bl	8002f24 <SPI_WaitFifoStateUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e000      	b.n	8003184 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <memset>:
 800318c:	4402      	add	r2, r0
 800318e:	4603      	mov	r3, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4d0d      	ldr	r5, [pc, #52]	@ (80031d4 <__libc_init_array+0x38>)
 80031a0:	4c0d      	ldr	r4, [pc, #52]	@ (80031d8 <__libc_init_array+0x3c>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	2600      	movs	r6, #0
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4d0b      	ldr	r5, [pc, #44]	@ (80031dc <__libc_init_array+0x40>)
 80031ae:	4c0c      	ldr	r4, [pc, #48]	@ (80031e0 <__libc_init_array+0x44>)
 80031b0:	f000 f818 	bl	80031e4 <_init>
 80031b4:	1b64      	subs	r4, r4, r5
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	2600      	movs	r6, #0
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800323c 	.word	0x0800323c
 80031d8:	0800323c 	.word	0x0800323c
 80031dc:	0800323c 	.word	0x0800323c
 80031e0:	08003240 	.word	0x08003240

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
