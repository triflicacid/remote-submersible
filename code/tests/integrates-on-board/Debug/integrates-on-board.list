
integrates-on-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005b1c  08005b1c  00006b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc4  08005bc4  0000702c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bc4  08005bc4  0000702c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bc4  08005bc4  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005bcc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000030  08005bf8  00007030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08005bf8  000073bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011797  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e27  00000000  00000000  000187f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001b620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  0001c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e40  00000000  00000000  0001d46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a16  00000000  00000000  000442ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca5e  00000000  00000000  00057cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  00144768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00148f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b04 	.word	0x08005b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08005b04 	.word	0x08005b04

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <recv_propeller>:
#include "constants.h"
#include "globals.h"
#include "pins.h"
#include "../Lib/stored-code.h"

void recv_propeller(const payload_header *hdr, const propeller_data *data) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  // update the velocity of both propeller motors
  dc_motor_set_velocity(&g_primary_motor, data->y);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	ed93 7b02 	vldr	d7, [r3, #8]
 8000ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ac8:	eef0 0a67 	vmov.f32	s1, s15
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <recv_propeller+0x3c>)
 8000ace:	f000 fbe3 	bl	8001298 <dc_motor_set_velocity>
  dc_motor_set_velocity(&g_secondary_motor, data->x);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	ed93 7b00 	vldr	d7, [r3]
 8000ad8:	eeb0 0a47 	vmov.f32	s0, s14
 8000adc:	eef0 0a67 	vmov.f32	s1, s15
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <recv_propeller+0x40>)
 8000ae2:	f000 fbd9 	bl	8001298 <dc_motor_set_velocity>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000070 	.word	0x20000070
 8000af4:	20000088 	.word	0x20000088

08000af8 <recv_ballast>:

void recv_ballast(const payload_header *hdr, const ballast_data *data) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  // update stepper motor event
  stepper_event_update(&g_ballast, data->mode);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f993 3000 	ldrsb.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <recv_ballast+0x38>)
 8000b0c:	f000 feda 	bl	80018c4 <stepper_event_update>

  // if action is to be taken, start clock
  if (!stepper_event_done(&g_ballast)) {
 8000b10:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <recv_ballast+0x38>)
 8000b12:	f000 fec4 	bl	800189e <stepper_event_done>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f083 0301 	eor.w	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <recv_ballast+0x30>
    HAL_TIM_Base_Start_IT(&TIMER_STEPPER_HANDLE);
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <recv_ballast+0x3c>)
 8000b24:	f003 fdcc 	bl	80046c0 <HAL_TIM_Base_Start_IT>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000b4 	.word	0x200000b4
 8000b34:	2000036c 	.word	0x2000036c

08000b38 <recv_send_code>:

void recv_send_code(const payload_header *hdr, const code_data *data) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  // cache code, we need to send it later
  save_code(data->code);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fffc 	bl	8001b44 <save_code>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <recv_request_code>:

void recv_request_code(const payload_header *hdr) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	6078      	str	r0, [r7, #4]
  // reply with our cached code
  code_data data = { fetch_code() };
 8000b5c:	f000 ffe6 	bl	8001b2c <fetch_code>
 8000b60:	4603      	mov	r3, r0
 8000b62:	60fb      	str	r3, [r7, #12]
  transmit(&g_lora, OP_SEND_CODE, hdr->sender, &data, sizeof(data));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	785a      	ldrb	r2, [r3, #1]
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	9100      	str	r1, [sp, #0]
 8000b70:	2110      	movs	r1, #16
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <recv_request_code+0x2c>)
 8000b74:	f000 fa4a 	bl	800100c <transmit>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000004c 	.word	0x2000004c

08000b84 <recv_release_pod>:

void recv_release_pod(const payload_header *hdr) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  // de-activate electromagnet
  set_pin(&pin_electromagnet);
 8000b8c:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <recv_release_pod+0x1c>)
 8000b8e:	f000 fffb 	bl	8001b88 <set_pin>

  // start electromagnet timer
  HAL_TIM_Base_Start_IT(&TIMER_ELECTROMAGNET_HANDLE);
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <recv_release_pod+0x20>)
 8000b94:	f003 fd94 	bl	80046c0 <HAL_TIM_Base_Start_IT>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08005b7c 	.word	0x08005b7c
 8000ba4:	20000320 	.word	0x20000320

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
dc_motor_t g_secondary_motor;
stepper_motor_t ballast_motor;
stepper_event_t g_ballast;

// INTERRUPT: override timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *h) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if (h == &TIMER_ELECTROMAGNET_HANDLE) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d106      	bne.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x1e>
    // times up! reactivate magnet and cancel timer
    reset_pin(&pin_electromagnet);
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bba:	f000 fff5 	bl	8001ba8 <reset_pin>
    HAL_TIM_Base_Stop_IT(&TIMER_ELECTROMAGNET_HANDLE);
 8000bbe:	480b      	ldr	r0, [pc, #44]	@ (8000bec <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bc0:	f003 fdee 	bl	80047a0 <HAL_TIM_Base_Stop_IT>
    return;
 8000bc4:	e00e      	b.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x3c>
  }

  if (h == &TIMER_STEPPER_HANDLE) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10a      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0x3c>
    // step ballast motor, stopping the timer if done
    if (stepper_event_microstep(&ballast_motor, &g_ballast)) {
 8000bce:	490a      	ldr	r1, [pc, #40]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bd0:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bd2:	f000 fec7 	bl	8001964 <stepper_event_microstep>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x3a>
      HAL_TIM_Base_Stop_IT(h);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f003 fddf 	bl	80047a0 <HAL_TIM_Base_Stop_IT>
    }

    return;
 8000be2:	bf00      	nop
  }
}
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000320 	.word	0x20000320
 8000bf0:	08005b7c 	.word	0x08005b7c
 8000bf4:	2000036c 	.word	0x2000036c
 8000bf8:	200000b4 	.word	0x200000b4
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <interrupt_radio>:

void interrupt_radio(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	lora_dio_interrupt(&g_lora);
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <interrupt_radio+0x18>)
 8000c06:	f000 fdc5 	bl	8001794 <lora_dio_interrupt>
	lora_receive(&g_lora, 0);
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <interrupt_radio+0x18>)
 8000c0e:	f000 fd15 	bl	800163c <lora_receive>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000004c 	.word	0x2000004c

08000c1c <on_radio_receive>:

void on_radio_receive(int size) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	on_recv(&g_lora, size);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4803      	ldr	r0, [pc, #12]	@ (8000c38 <on_radio_receive+0x1c>)
 8000c2c:	f000 f92e 	bl	8000e8c <on_recv>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000004c 	.word	0x2000004c

08000c3c <HAL_GPIO_EXTI_Callback>:

// INTERRUPT: override GPIO external interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
  switch (pin) {
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d102      	bne.n	8000c52 <HAL_GPIO_EXTI_Callback+0x16>
    case GPIO_PIN_1: // radio DIO
      create_action(interrupt_radio);
 8000c4c:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <HAL_GPIO_EXTI_Callback+0x20>)
 8000c4e:	f000 f891 	bl	8000d74 <create_action>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	08000c01 	.word	0x08000c01

08000c60 <setup>:

void setup(void) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af02      	add	r7, sp, #8
  // initialise LoRa device with +20dBm
  lora_init(&g_lora, &SPI_HANDLE, &pin_cs_radio, &pin_reset);
 8000c66:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <setup+0xb8>)
 8000c68:	4a2c      	ldr	r2, [pc, #176]	@ (8000d1c <setup+0xbc>)
 8000c6a:	492d      	ldr	r1, [pc, #180]	@ (8000d20 <setup+0xc0>)
 8000c6c:	482d      	ldr	r0, [pc, #180]	@ (8000d24 <setup+0xc4>)
 8000c6e:	f000 fbe1 	bl	8001434 <lora_init>
  g_lora.on_receive = on_radio_receive;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <setup+0xc4>)
 8000c74:	4a2c      	ldr	r2, [pc, #176]	@ (8000d28 <setup+0xc8>)
 8000c76:	60da      	str	r2, [r3, #12]
  lora_set_tx_power(&g_lora, 20);
 8000c78:	2114      	movs	r1, #20
 8000c7a:	482a      	ldr	r0, [pc, #168]	@ (8000d24 <setup+0xc4>)
 8000c7c:	f000 fd1c 	bl	80016b8 <lora_set_tx_power>

  // register payload receive handlers
  register_propeller_callback(recv_propeller);
 8000c80:	482a      	ldr	r0, [pc, #168]	@ (8000d2c <setup+0xcc>)
 8000c82:	f000 f8b3 	bl	8000dec <register_propeller_callback>
  register_ballast_callback(recv_ballast);
 8000c86:	482a      	ldr	r0, [pc, #168]	@ (8000d30 <setup+0xd0>)
 8000c88:	f000 f8c0 	bl	8000e0c <register_ballast_callback>
  register_send_code_callback(recv_send_code);
 8000c8c:	4829      	ldr	r0, [pc, #164]	@ (8000d34 <setup+0xd4>)
 8000c8e:	f000 f8cd 	bl	8000e2c <register_send_code_callback>
  register_request_code_callback(recv_request_code);
 8000c92:	4829      	ldr	r0, [pc, #164]	@ (8000d38 <setup+0xd8>)
 8000c94:	f000 f8da 	bl	8000e4c <register_request_code_callback>
  register_release_pod_callback(recv_release_pod);
 8000c98:	4828      	ldr	r0, [pc, #160]	@ (8000d3c <setup+0xdc>)
 8000c9a:	f000 f8e7 	bl	8000e6c <register_release_pod_callback>

  // initialise DC motors and respective PWM channels
  dc_motor_init(&g_primary_motor, &TIMER_PWM_HANDLE, TIM_CHANNEL_1, &pins_dc_in[0], &pins_dc_in[1]);
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <setup+0xe0>)
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <setup+0xe4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4928      	ldr	r1, [pc, #160]	@ (8000d48 <setup+0xe8>)
 8000ca8:	4828      	ldr	r0, [pc, #160]	@ (8000d4c <setup+0xec>)
 8000caa:	f000 f9d8 	bl	800105e <dc_motor_init>
  HAL_TIM_PWM_Start(&TIMER_PWM_HANDLE, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4825      	ldr	r0, [pc, #148]	@ (8000d48 <setup+0xe8>)
 8000cb2:	f003 fe05 	bl	80048c0 <HAL_TIM_PWM_Start>
  dc_motor_init(&g_secondary_motor, &TIMER_PWM_HANDLE, TIM_CHANNEL_3, &pins_dc_in[2], &pins_dc_in[3]);
 8000cb6:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <setup+0xf0>)
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <setup+0xf4>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	4922      	ldr	r1, [pc, #136]	@ (8000d48 <setup+0xe8>)
 8000cc0:	4825      	ldr	r0, [pc, #148]	@ (8000d58 <setup+0xf8>)
 8000cc2:	f000 f9cc 	bl	800105e <dc_motor_init>
  HAL_TIM_PWM_Start(&TIMER_PWM_HANDLE, TIM_CHANNEL_3);
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	481f      	ldr	r0, [pc, #124]	@ (8000d48 <setup+0xe8>)
 8000cca:	f003 fdf9 	bl	80048c0 <HAL_TIM_PWM_Start>

  // initialise stepper motor and the ballast event operating it
  stepper_motor_init(&ballast_motor, (const pin_t *[4]) { &pin_stepper_black, &pin_stepper_blue, &pin_stepper_green, &pin_stepper_red }, STEPPER_MOTOR_FULL_DRIVE);
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <setup+0xfc>)
 8000cd0:	1d3c      	adds	r4, r7, #4
 8000cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4820      	ldr	r0, [pc, #128]	@ (8000d60 <setup+0x100>)
 8000ce0:	f000 fe72 	bl	80019c8 <stepper_motor_init>
  uint8_t count = stepper_motor_microstep_count(&ballast_motor);
 8000ce4:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <setup+0x100>)
 8000ce6:	f000 ff0f 	bl	8001b08 <stepper_motor_microstep_count>
 8000cea:	4603      	mov	r3, r0
 8000cec:	75fb      	strb	r3, [r7, #23]
  stepper_event_init(&g_ballast, BALLAST_ASCEND_POSITION * count, BALLAST_DESCEND_POSITION * count);
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	22c8      	movs	r2, #200	@ 0xc8
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	22c8      	movs	r2, #200	@ 0xc8
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	4818      	ldr	r0, [pc, #96]	@ (8000d64 <setup+0x104>)
 8000d04:	f000 fdad 	bl	8001862 <stepper_event_init>

  // finally, set LoRa to receive mode
  lora_receive(&g_lora, 0);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <setup+0xc4>)
 8000d0c:	f000 fc96 	bl	800163c <lora_receive>
}
 8000d10:	bf00      	nop
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	08005b34 	.word	0x08005b34
 8000d1c:	08005b2c 	.word	0x08005b2c
 8000d20:	20000224 	.word	0x20000224
 8000d24:	2000004c 	.word	0x2000004c
 8000d28:	08000c1d 	.word	0x08000c1d
 8000d2c:	08000ab5 	.word	0x08000ab5
 8000d30:	08000af9 	.word	0x08000af9
 8000d34:	08000b39 	.word	0x08000b39
 8000d38:	08000b55 	.word	0x08000b55
 8000d3c:	08000b85 	.word	0x08000b85
 8000d40:	08005b64 	.word	0x08005b64
 8000d44:	08005b5c 	.word	0x08005b5c
 8000d48:	200002d4 	.word	0x200002d4
 8000d4c:	20000070 	.word	0x20000070
 8000d50:	08005b74 	.word	0x08005b74
 8000d54:	08005b6c 	.word	0x08005b6c
 8000d58:	20000088 	.word	0x20000088
 8000d5c:	08005b1c 	.word	0x08005b1c
 8000d60:	200000a0 	.word	0x200000a0
 8000d64:	200000b4 	.word	0x200000b4

08000d68 <loop>:

void loop(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  execute_pending_actions();
 8000d6c:	f000 f820 	bl	8000db0 <execute_pending_actions>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <create_action>:
static volatile handler pending_actions[MAX_PENDING_ACTIONS] = {NULL};

// number of pending actions
static volatile uint32_t count = 0;

bool create_action(handler action_handler) {
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  // check if at capacity
  if (count >= MAX_PENDING_ACTIONS) {
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <create_action+0x34>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d901      	bls.n	8000d88 <create_action+0x14>
    return false;
 8000d84:	2300      	movs	r3, #0
 8000d86:	e009      	b.n	8000d9c <create_action+0x28>
  }

  // insert into array and increase size
  pending_actions[count++] = action_handler;
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <create_action+0x34>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	4906      	ldr	r1, [pc, #24]	@ (8000da8 <create_action+0x34>)
 8000d90:	600a      	str	r2, [r1, #0]
 8000d92:	4906      	ldr	r1, [pc, #24]	@ (8000dac <create_action+0x38>)
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return true;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000108 	.word	0x20000108
 8000dac:	200000c8 	.word	0x200000c8

08000db0 <execute_pending_actions>:
handler next_action(void) {
  // get last item in list, or NULL if empty
  return count == 0 ? NULL : pending_actions[--count];
}

void execute_pending_actions(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  // iterate over array and call handlers
  for (uint16_t i = 0; i < count; i++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	e007      	b.n	8000dcc <execute_pending_actions+0x1c>
    pending_actions[i]();
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4a09      	ldr	r2, [pc, #36]	@ (8000de4 <execute_pending_actions+0x34>)
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	4798      	blx	r3
  for (uint16_t i = 0; i < count; i++) {
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	88fa      	ldrh	r2, [r7, #6]
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <execute_pending_actions+0x38>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3f2      	bcc.n	8000dbc <execute_pending_actions+0xc>
  }
  
  // 'empty' array (old entries will be overwritten)
  count = 0;
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <execute_pending_actions+0x38>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000c8 	.word	0x200000c8
 8000de8:	20000108 	.word	0x20000108

08000dec <register_propeller_callback>:
static ballast_callback_t ballast_cb = NULL;
static send_code_callback_t send_code_cb = NULL;
static request_code_callback_t request_code_cb = NULL;
static release_pod_callback_t release_pod_cb = NULL;

void register_propeller_callback(propeller_callback_t cb) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  propeller_cb = cb;
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <register_propeller_callback+0x1c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	2000020c 	.word	0x2000020c

08000e0c <register_ballast_callback>:

void register_ballast_callback(ballast_callback_t cb) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  ballast_cb = cb;
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <register_ballast_callback+0x1c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000210 	.word	0x20000210

08000e2c <register_send_code_callback>:

void register_send_code_callback(send_code_callback_t cb) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  send_code_cb = cb;
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <register_send_code_callback+0x1c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000214 	.word	0x20000214

08000e4c <register_request_code_callback>:

void register_request_code_callback(request_code_callback_t cb) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  request_code_cb = cb;
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <register_request_code_callback+0x1c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000218 	.word	0x20000218

08000e6c <register_release_pod_callback>:

void register_release_pod_callback(release_pod_callback_t cb) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  release_pod_cb = cb;
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <register_release_pod_callback+0x1c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	2000021c 	.word	0x2000021c

08000e8c <on_recv>:
    default:
      return 0;
  }
}

void on_recv(lora_t *lora, uint8_t recv_size) {
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
  // read bytes
  for (uint16_t i = 0; i < recv_size; i++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	81fb      	strh	r3, [r7, #14]
 8000e9c:	e00a      	b.n	8000eb4 <on_recv+0x28>
    _buffer[i] = lora_read(lora);
 8000e9e:	89fc      	ldrh	r4, [r7, #14]
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fbb1 	bl	8001608 <lora_read>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <on_recv+0x44>)
 8000eac:	551a      	strb	r2, [r3, r4]
  for (uint16_t i = 0; i < recv_size; i++) {
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	81fb      	strh	r3, [r7, #14]
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	89fa      	ldrh	r2, [r7, #14]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3ef      	bcc.n	8000e9e <on_recv+0x12>
  }

  // invoke handler
  on_recv_payload((const payload_header *) _buffer, _buffer + sizeof(payload_header));
 8000ebe:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <on_recv+0x48>)
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <on_recv+0x44>)
 8000ec4:	f000 f808 	bl	8000ed8 <on_recv_payload>
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	2000010c 	.word	0x2000010c
 8000ed4:	2000010f 	.word	0x2000010f

08000ed8 <on_recv_payload>:

void on_recv_payload(const payload_header *header, const void *buffer) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  // ensure packet is addressed to us
  if (header->receiver != RADIO_IDENTIFIER) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d178      	bne.n	8000fdc <on_recv_payload+0x104>
	  return;
  }

  // action depends on opcode...
  switch (header->opcode) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	2b1f      	cmp	r3, #31
 8000ef2:	d87e      	bhi.n	8000ff2 <on_recv_payload+0x11a>
 8000ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8000efc <on_recv_payload+0x24>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f7d 	.word	0x08000f7d
 8000f00:	08000ff3 	.word	0x08000ff3
 8000f04:	08000ff3 	.word	0x08000ff3
 8000f08:	08000ff3 	.word	0x08000ff3
 8000f0c:	08000f91 	.word	0x08000f91
 8000f10:	08000ff3 	.word	0x08000ff3
 8000f14:	08000ff3 	.word	0x08000ff3
 8000f18:	08000ff3 	.word	0x08000ff3
 8000f1c:	08000ff3 	.word	0x08000ff3
 8000f20:	08000ff3 	.word	0x08000ff3
 8000f24:	08000ff3 	.word	0x08000ff3
 8000f28:	08000ff3 	.word	0x08000ff3
 8000f2c:	08000ff3 	.word	0x08000ff3
 8000f30:	08000ff3 	.word	0x08000ff3
 8000f34:	08000ff3 	.word	0x08000ff3
 8000f38:	08000fa5 	.word	0x08000fa5
 8000f3c:	08000fb9 	.word	0x08000fb9
 8000f40:	08000ff3 	.word	0x08000ff3
 8000f44:	08000ff3 	.word	0x08000ff3
 8000f48:	08000ff3 	.word	0x08000ff3
 8000f4c:	08000ff3 	.word	0x08000ff3
 8000f50:	08000ff3 	.word	0x08000ff3
 8000f54:	08000ff3 	.word	0x08000ff3
 8000f58:	08000ff3 	.word	0x08000ff3
 8000f5c:	08000ff3 	.word	0x08000ff3
 8000f60:	08000ff3 	.word	0x08000ff3
 8000f64:	08000ff3 	.word	0x08000ff3
 8000f68:	08000ff3 	.word	0x08000ff3
 8000f6c:	08000ff3 	.word	0x08000ff3
 8000f70:	08000ff3 	.word	0x08000ff3
 8000f74:	08000ff3 	.word	0x08000ff3
 8000f78:	08000fcb 	.word	0x08000fcb
    case OP_PROPELLER:
      CALL_FN2(propeller_cb, header, buffer)
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <on_recv_payload+0x120>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d02d      	beq.n	8000fe0 <on_recv_payload+0x108>
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <on_recv_payload+0x120>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6839      	ldr	r1, [r7, #0]
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	4798      	blx	r3
      break;
 8000f8e:	e027      	b.n	8000fe0 <on_recv_payload+0x108>
    case OP_BALLAST:
      CALL_FN2(ballast_cb, header, buffer)
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <on_recv_payload+0x124>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d025      	beq.n	8000fe4 <on_recv_payload+0x10c>
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <on_recv_payload+0x124>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6839      	ldr	r1, [r7, #0]
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
      break;
 8000fa2:	e01f      	b.n	8000fe4 <on_recv_payload+0x10c>
    case OP_SEND_CODE:
      CALL_FN2(send_code_cb, header, buffer)
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <on_recv_payload+0x128>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01d      	beq.n	8000fe8 <on_recv_payload+0x110>
 8000fac:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <on_recv_payload+0x128>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
      break;
 8000fb6:	e017      	b.n	8000fe8 <on_recv_payload+0x110>
    case OP_REQUEST_CODE:
      CALL_FN1(request_code_cb, header)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <on_recv_payload+0x12c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d015      	beq.n	8000fec <on_recv_payload+0x114>
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <on_recv_payload+0x12c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	4798      	blx	r3
      break;
 8000fc8:	e010      	b.n	8000fec <on_recv_payload+0x114>
    case OP_RELEASE_POD:
      CALL_FN1(release_pod_cb, header)
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <on_recv_payload+0x130>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00e      	beq.n	8000ff0 <on_recv_payload+0x118>
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <on_recv_payload+0x130>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	4798      	blx	r3
      break;
 8000fda:	e009      	b.n	8000ff0 <on_recv_payload+0x118>
	  return;
 8000fdc:	bf00      	nop
 8000fde:	e008      	b.n	8000ff2 <on_recv_payload+0x11a>
      break;
 8000fe0:	bf00      	nop
 8000fe2:	e006      	b.n	8000ff2 <on_recv_payload+0x11a>
      break;
 8000fe4:	bf00      	nop
 8000fe6:	e004      	b.n	8000ff2 <on_recv_payload+0x11a>
      break;
 8000fe8:	bf00      	nop
 8000fea:	e002      	b.n	8000ff2 <on_recv_payload+0x11a>
      break;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <on_recv_payload+0x11a>
      break;
 8000ff0:	bf00      	nop
  }
}
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000020c 	.word	0x2000020c
 8000ffc:	20000210 	.word	0x20000210
 8001000:	20000214 	.word	0x20000214
 8001004:	20000218 	.word	0x20000218
 8001008:	2000021c 	.word	0x2000021c

0800100c <transmit>:
  lora_write(lora, RADIO_IDENTIFIER);
  lora_write(lora, recipient);
  lora_end_packet(lora, true);
}

void transmit(lora_t *lora, uint8_t opcode, uint8_t recipient, const void *data, uint8_t data_size) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	72fb      	strb	r3, [r7, #11]
 800101a:	4613      	mov	r3, r2
 800101c:	72bb      	strb	r3, [r7, #10]
  lora_begin_packet(lora, RADIO_IMPLICIT_HEADER);
 800101e:	2100      	movs	r1, #0
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f000 fa5f 	bl	80014e4 <lora_begin_packet>
  lora_write(lora, opcode);
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	4619      	mov	r1, r3
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fa7b 	bl	8001526 <lora_write>
  lora_write(lora, RADIO_IDENTIFIER);
 8001030:	2102      	movs	r1, #2
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 fa77 	bl	8001526 <lora_write>
  lora_write(lora, recipient);
 8001038:	7abb      	ldrb	r3, [r7, #10]
 800103a:	4619      	mov	r1, r3
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f000 fa72 	bl	8001526 <lora_write>
  lora_write_bytes(lora, data, data_size);
 8001042:	7e3b      	ldrb	r3, [r7, #24]
 8001044:	461a      	mov	r2, r3
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f000 fa7d 	bl	8001548 <lora_write_bytes>
  lora_end_packet(lora, true);
 800104e:	2101      	movs	r1, #1
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f000 fa9c 	bl	800158e <lora_end_packet>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <dc_motor_init>:
#include "dc-motor.h"

#include <stdbool.h>

void dc_motor_init(dc_motor_t *motor, TIM_HandleTypeDef *htim, uint32_t channel, const pin_t *in1, const pin_t *in2) {
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
  motor->htim = htim;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	601a      	str	r2, [r3, #0]
  motor->channel = channel;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
  motor->in1 = in1;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	609a      	str	r2, [r3, #8]
  motor->in2 = in2;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
  motor->vel = 0;
 8001084:	68f9      	ldr	r1, [r7, #12]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <dc_motor_forwards>:
    write_pin(motor->in1, read_pin(motor->in2));
    motor->vel = 0;
  }
}

void dc_motor_forwards(dc_motor_t *motor) {
 800109e:	b5b0      	push	{r4, r5, r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  if (motor->vel <= 0) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	f7ff fcc0 	bl	8000a38 <__aeabi_dcmple>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d100      	bne.n	80010c0 <dc_motor_forwards+0x22>
    // 1 0
    set_pin(motor->in1);
    reset_pin(motor->in2);
    motor->vel = -motor->vel;
  }
}
 80010be:	e012      	b.n	80010e6 <dc_motor_forwards+0x48>
    set_pin(motor->in1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fd5f 	bl	8001b88 <set_pin>
    reset_pin(motor->in2);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fd6a 	bl	8001ba8 <reset_pin>
    motor->vel = -motor->vel;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010da:	4614      	mov	r4, r2
 80010dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	e9c3 4504 	strd	r4, r5, [r3, #16]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdb0      	pop	{r4, r5, r7, pc}

080010ee <dc_motor_backwards>:

void dc_motor_backwards(dc_motor_t *motor) {
 80010ee:	b5b0      	push	{r4, r5, r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  if (motor->vel >= 0) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	f7ff fca2 	bl	8000a4c <__aeabi_dcmpge>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d100      	bne.n	8001110 <dc_motor_backwards+0x22>
    // 0 1
    reset_pin(motor->in1);
    set_pin(motor->in2);
    motor->vel = -motor->vel;
  }
}
 800110e:	e012      	b.n	8001136 <dc_motor_backwards+0x48>
    reset_pin(motor->in1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fd47 	bl	8001ba8 <reset_pin>
    set_pin(motor->in2);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fd32 	bl	8001b88 <set_pin>
    motor->vel = -motor->vel;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800112a:	4614      	mov	r4, r2
 800112c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	e9c3 4504 	strd	r4, r5, [r3, #16]
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001140 <dc_motor_set_speed>:
  toggle_pin(motor->in1);
  toggle_pin(motor->in2);
  motor->vel = -motor->vel;
}

void dc_motor_set_speed(dc_motor_t *motor, double frac) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6178      	str	r0, [r7, #20]
 8001148:	ed87 0b02 	vstr	d0, [r7, #8]
  // clamp fraction
  if (frac < 0) {
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001158:	f7ff fc64 	bl	8000a24 <__aeabi_dcmplt>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <dc_motor_set_speed+0x30>
    frac = 0;
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800116e:	e00e      	b.n	800118e <dc_motor_set_speed+0x4e>
  } else if (frac > 1) {
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <dc_motor_set_speed+0x154>)
 8001176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800117a:	f7ff fc71 	bl	8000a60 <__aeabi_dcmpgt>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <dc_motor_set_speed+0x4e>
    frac = 1;
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b42      	ldr	r3, [pc, #264]	@ (8001294 <dc_motor_set_speed+0x154>)
 800118a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  }

  // already at speed?
  if (motor->vel == frac || motor->vel == -frac) {
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001194:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001198:	f7ff fc3a 	bl	8000a10 <__aeabi_dcmpeq>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d173      	bne.n	800128a <dc_motor_set_speed+0x14a>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011b8:	f7ff fc2a 	bl	8000a10 <__aeabi_dcmpeq>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d163      	bne.n	800128a <dc_motor_set_speed+0x14a>
    return;
  }

  // calculate and set CCR
  uint32_t arr = __HAL_TIM_GET_AUTORELOAD(motor->htim);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t ccr = frac * (arr + 1);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f93b 	bl	800044c <__aeabi_ui2d>
 80011d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011da:	f7ff f9b1 	bl	8000540 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fc45 	bl	8000a74 <__aeabi_d2uiz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
  __HAL_TIM_SET_COMPARE(motor->htim, motor->channel, ccr);
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <dc_motor_set_speed+0xc2>
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001200:	e02c      	b.n	800125c <dc_motor_set_speed+0x11c>
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d105      	bne.n	8001216 <dc_motor_set_speed+0xd6>
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6393      	str	r3, [r2, #56]	@ 0x38
 8001214:	e022      	b.n	800125c <dc_motor_set_speed+0x11c>
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b08      	cmp	r3, #8
 800121c:	d105      	bne.n	800122a <dc_motor_set_speed+0xea>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001228:	e018      	b.n	800125c <dc_motor_set_speed+0x11c>
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d105      	bne.n	800123e <dc_motor_set_speed+0xfe>
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6413      	str	r3, [r2, #64]	@ 0x40
 800123c:	e00e      	b.n	800125c <dc_motor_set_speed+0x11c>
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d105      	bne.n	8001252 <dc_motor_set_speed+0x112>
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001250:	e004      	b.n	800125c <dc_motor_set_speed+0x11c>
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	65d3      	str	r3, [r2, #92]	@ 0x5c

  // update cached velocity (ensure correct sign)
  motor->vel = motor->vel < 0 ? -frac : frac;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	f7ff fbdb 	bl	8000a24 <__aeabi_dcmplt>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <dc_motor_set_speed+0x13e>
 8001274:	68bc      	ldr	r4, [r7, #8]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800127c:	e001      	b.n	8001282 <dc_motor_set_speed+0x142>
 800127e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	e9c3 4504 	strd	r4, r5, [r3, #16]
 8001288:	e000      	b.n	800128c <dc_motor_set_speed+0x14c>
    return;
 800128a:	bf00      	nop
}
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bdb0      	pop	{r4, r5, r7, pc}
 8001292:	bf00      	nop
 8001294:	3ff00000 	.word	0x3ff00000

08001298 <dc_motor_set_velocity>:

double dc_motor_get_speed(dc_motor_t *motor) {
  return motor->vel < 0 ? -motor->vel : motor->vel;
}

void dc_motor_set_velocity(dc_motor_t *motor, double frac) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	ed87 0b00 	vstr	d0, [r7]
  if (motor->vel == frac) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ae:	f7ff fbaf 	bl	8000a10 <__aeabi_dcmpeq>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d120      	bne.n	80012fa <dc_motor_set_velocity+0x62>
    return;
  }

  if (frac < 0) {
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012c4:	f7ff fbae 	bl	8000a24 <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <dc_motor_set_velocity+0x50>
    dc_motor_backwards(motor);
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff0d 	bl	80010ee <dc_motor_backwards>
    dc_motor_set_speed(motor, -frac);
 80012d4:	683c      	ldr	r4, [r7, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80012dc:	ec45 4b10 	vmov	d0, r4, r5
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff ff2d 	bl	8001140 <dc_motor_set_speed>
 80012e6:	e009      	b.n	80012fc <dc_motor_set_velocity+0x64>
  } else {
    dc_motor_forwards(motor);
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff fed8 	bl	800109e <dc_motor_forwards>
    dc_motor_set_speed(motor, frac);
 80012ee:	ed97 0b00 	vldr	d0, [r7]
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff ff24 	bl	8001140 <dc_motor_set_speed>
 80012f8:	e000      	b.n	80012fc <dc_motor_set_velocity+0x64>
    return;
 80012fa:	bf00      	nop
  }
}
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdb0      	pop	{r4, r5, r7, pc}

08001302 <_read>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

static uint8_t _read(lora_t *lora, uint8_t address) {
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
  // command - request address to read
  uint8_t cmd = address & 0x7F, data;
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001314:	b2db      	uxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]

  reset_pin(lora->cs);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fc43 	bl	8001ba8 <reset_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f107 010f 	add.w	r1, r7, #15
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	2201      	movs	r2, #1
 800132e:	f002 fae6 	bl	80038fe <HAL_SPI_Transmit>
  HAL_SPI_Receive(lora->spi, &data, 1, 100);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	f107 010e 	add.w	r1, r7, #14
 800133a:	2364      	movs	r3, #100	@ 0x64
 800133c:	2201      	movs	r2, #1
 800133e:	f002 fc54 	bl	8003bea <HAL_SPI_Receive>
  set_pin(lora->cs);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fc1e 	bl	8001b88 <set_pin>

  return data;
 800134c:	7bbb      	ldrb	r3, [r7, #14]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_write_bytes>:

static void _write_bytes(lora_t *lora, uint8_t address, const uint8_t *data, uint8_t size) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	461a      	mov	r2, r3
 8001362:	460b      	mov	r3, r1
 8001364:	72fb      	strb	r3, [r7, #11]
 8001366:	4613      	mov	r3, r2
 8001368:	72bb      	strb	r3, [r7, #10]
  // command - tell device to write to address
  uint8_t cmd = 0x80 | address;
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001370:	b2db      	uxtb	r3, r3
 8001372:	75fb      	strb	r3, [r7, #23]

  reset_pin(lora->cs);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fc15 	bl	8001ba8 <reset_pin>
  HAL_SPI_Transmit(lora->spi, &cmd, 1, 100);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	f107 0117 	add.w	r1, r7, #23
 8001386:	2364      	movs	r3, #100	@ 0x64
 8001388:	2201      	movs	r2, #1
 800138a:	f002 fab8 	bl	80038fe <HAL_SPI_Transmit>
  HAL_SPI_Transmit(lora->spi, data, size, 100);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	7abb      	ldrb	r3, [r7, #10]
 8001394:	b29a      	uxth	r2, r3
 8001396:	2364      	movs	r3, #100	@ 0x64
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	f002 fab0 	bl	80038fe <HAL_SPI_Transmit>
  set_pin(lora->cs);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fbf0 	bl	8001b88 <set_pin>
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <_write>:

static void _write(lora_t *lora, uint8_t address, uint8_t data) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	4613      	mov	r3, r2
 80013be:	70bb      	strb	r3, [r7, #2]
  _write_bytes(lora, address, &data, 1);
 80013c0:	1cba      	adds	r2, r7, #2
 80013c2:	78f9      	ldrb	r1, [r7, #3]
 80013c4:	2301      	movs	r3, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffc5 	bl	8001356 <_write_bytes>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <explicit_header_mode>:

static void explicit_header_mode(lora_t *lora) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = false;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	771a      	strb	r2, [r3, #28]
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) & 0xfe);
 80013e2:	211d      	movs	r1, #29
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff8c 	bl	8001302 <_read>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	211d      	movs	r1, #29
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffda 	bl	80013b0 <_write>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <implicit_header_mode>:

static void implicit_header_mode(lora_t *lora) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  lora->_implicit_header = true;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	771a      	strb	r2, [r3, #28]
  _write(lora, REG_MODEM_CONFIG_1, _read(lora, REG_MODEM_CONFIG_1) | 0x01);
 8001412:	211d      	movs	r1, #29
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff74 	bl	8001302 <_read>
 800141a:	4603      	mov	r3, r0
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	211d      	movs	r1, #29
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffc2 	bl	80013b0 <_write>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <lora_init>:


void lora_init(lora_t *lora, SPI_HandleTypeDef *spi, const pin_t *cs, const pin_t *rst) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  lora->spi = spi;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	601a      	str	r2, [r3, #0]
  lora->cs = cs;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	605a      	str	r2, [r3, #4]
  lora->rst = rst;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	609a      	str	r2, [r3, #8]
  lora->on_receive = NULL;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  lora->on_cad_done = NULL;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  lora->on_tx_done = NULL;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]

  // set SS high
  set_pin(lora->cs);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fb8c 	bl	8001b88 <set_pin>

  // toggle reset
  reset_pin(lora->rst);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fb97 	bl	8001ba8 <reset_pin>
  HAL_Delay(5);
 800147a:	2005      	movs	r0, #5
 800147c:	f001 f860 	bl	8002540 <HAL_Delay>
  set_pin(lora->rst);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fb7f 	bl	8001b88 <set_pin>
  HAL_Delay(5);
 800148a:	2005      	movs	r0, #5
 800148c:	f001 f858 	bl	8002540 <HAL_Delay>

  // put in sleep mode
  lora_sleep(lora);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f904 	bl	800169e <lora_sleep>

  // set base addresses
  _write(lora, REG_FIFO_TX_BASE_ADDR, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	210e      	movs	r1, #14
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff ff88 	bl	80013b0 <_write>
  _write(lora, REG_FIFO_RX_BASE_ADDR, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	210f      	movs	r1, #15
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ff83 	bl	80013b0 <_write>

  // set LNA boost
  _write(lora, REG_LNA, _read(lora, REG_LNA) | 0x03);
 80014aa:	210c      	movs	r1, #12
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff ff28 	bl	8001302 <_read>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f043 0303 	orr.w	r3, r3, #3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	210c      	movs	r1, #12
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff ff76 	bl	80013b0 <_write>

  // set auto AGC
  _write(lora, REG_MODEM_CONFIG_3, 0x04);
 80014c4:	2204      	movs	r2, #4
 80014c6:	2126      	movs	r1, #38	@ 0x26
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f7ff ff71 	bl	80013b0 <_write>

  // set to +17dBm
  lora_set_tx_power(lora, 17);
 80014ce:	2111      	movs	r1, #17
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f8f1 	bl	80016b8 <lora_set_tx_power>

  // put in standby mode
  lora_idle(lora);
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f8d4 	bl	8001684 <lora_idle>
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <lora_begin_packet>:

void lora_begin_packet(lora_t *lora, bool implicit_header) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  // put in standby mode
  lora_idle(lora);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f8c7 	bl	8001684 <lora_idle>

  if (implicit_header) {
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <lora_begin_packet+0x20>
    implicit_header_mode(lora);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff81 	bl	8001404 <implicit_header_mode>
 8001502:	e002      	b.n	800150a <lora_begin_packet+0x26>
  } else {
    explicit_header_mode(lora);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff65 	bl	80013d4 <explicit_header_mode>
  }

  // reset FIFO address and payload length
  _write(lora, REG_FIFO_ADDR_PTR, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210d      	movs	r1, #13
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff4e 	bl	80013b0 <_write>
  _write(lora, REG_PAYLOAD_LENGTH, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2122      	movs	r1, #34	@ 0x22
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff49 	bl	80013b0 <_write>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <lora_write>:

// write byte byte to FIFO
size_t lora_write(lora_t *lora, uint8_t byte) {
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	70fb      	strb	r3, [r7, #3]
  return lora_write_bytes(lora, &byte, sizeof(byte));
 8001532:	1cfb      	adds	r3, r7, #3
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f805 	bl	8001548 <lora_write_bytes>
 800153e:	4603      	mov	r3, r0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <lora_write_bytes>:

size_t lora_write_bytes(lora_t *lora, const uint8_t *buffer, size_t size) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  int current_length = _read(lora, REG_PAYLOAD_LENGTH);
 8001554:	2122      	movs	r1, #34	@ 0x22
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7ff fed3 	bl	8001302 <_read>
 800155c:	4603      	mov	r3, r0
 800155e:	617b      	str	r3, [r7, #20]

  // write data
  //for (size_t i = 0; i < size; i++) {
  //  _write(lora, REG_FIFO, buffer[i]);
  //}
  _write_bytes(lora, REG_FIFO, buffer, size);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	2100      	movs	r1, #0
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fef4 	bl	8001356 <_write_bytes>

  // update length
  _write(lora, REG_PAYLOAD_LENGTH, current_length + size);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	2122      	movs	r1, #34	@ 0x22
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7ff ff16 	bl	80013b0 <_write>

  return size;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lora_end_packet>:

void lora_end_packet(lora_t *lora, bool async) {
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
  if (async)
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <lora_end_packet+0x1c>
      _write(lora, REG_DIO_MAPPING_1, 0x40); // DIO0 -> TXDONE
 80015a0:	2240      	movs	r2, #64	@ 0x40
 80015a2:	2140      	movs	r1, #64	@ 0x40
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff03 	bl	80013b0 <_write>

  // put in TX mode
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80015aa:	2283      	movs	r2, #131	@ 0x83
 80015ac:	2101      	movs	r1, #1
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fefe 	bl	80013b0 <_write>

  if (!async) {
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	f083 0301 	eor.w	r3, r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00e      	beq.n	80015de <lora_end_packet+0x50>
    // wait for TX done
    while (!(_read(lora, REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK))
 80015c0:	bf00      	nop
 80015c2:	2112      	movs	r1, #18
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fe9c 	bl	8001302 <_read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f6      	beq.n	80015c2 <lora_end_packet+0x34>
      ;

    // clear IRQ's
    _write(lora, REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80015d4:	2208      	movs	r2, #8
 80015d6:	2112      	movs	r1, #18
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fee9 	bl	80013b0 <_write>
  }
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <lora_available>:

  return packet_length;
}

// get number of available bytes in FIFO
int lora_available(lora_t *lora) {
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  return _read(lora, REG_RX_NB_BYTES) - lora->_pos;
 80015ee:	2113      	movs	r1, #19
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe86 	bl	8001302 <_read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	1ad3      	subs	r3, r2, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <lora_read>:

// read one byte from FIFO
uint8_t lora_read(lora_t *lora) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if (!lora_available(lora)) {
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ffe8 	bl	80015e6 <lora_available>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <lora_read+0x18>
    return 0;
 800161c:	2300      	movs	r3, #0
 800161e:	e009      	b.n	8001634 <lora_read+0x2c>
  }

  lora->_pos++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]

  return _read(lora, REG_FIFO);
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fe68 	bl	8001302 <_read>
 8001632:	4603      	mov	r3, r0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <lora_receive>:
  _write(lora, REG_FIFO_ADDR_PTR, address);

  return b;
}

void lora_receive(lora_t *lora, int size) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  _write(lora, REG_DIO_MAPPING_1, 0x00); // DIO0 -> RXDONE
 8001646:	2200      	movs	r2, #0
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff feb0 	bl	80013b0 <_write>

  if (size > 0) {
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dd0a      	ble.n	800166c <lora_receive+0x30>
    implicit_header_mode(lora);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fed4 	bl	8001404 <implicit_header_mode>

    _write(lora, REG_PAYLOAD_LENGTH, size & 0xff);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	2122      	movs	r1, #34	@ 0x22
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fea3 	bl	80013b0 <_write>
 800166a:	e002      	b.n	8001672 <lora_receive+0x36>
  } else {
    explicit_header_mode(lora);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff feb1 	bl	80013d4 <explicit_header_mode>
  }

  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001672:	2285      	movs	r2, #133	@ 0x85
 8001674:	2101      	movs	r1, #1
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fe9a 	bl	80013b0 <_write>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <lora_idle>:
void lora_cad(lora_t *lora) {
  _write(lora, REG_DIO_MAPPING_1, 0x80);// DIO0 -> CADDONE
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_CAD);
}

void lora_idle(lora_t *lora) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 800168c:	2281      	movs	r2, #129	@ 0x81
 800168e:	2101      	movs	r1, #1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe8d 	bl	80013b0 <_write>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <lora_sleep>:

void lora_sleep(lora_t *lora) {
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  _write(lora, REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fe80 	bl	80013b0 <_write>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <lora_set_tx_power>:

void lora_set_tx_power(lora_t *lora, int level) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  if (level > 17) {
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b11      	cmp	r3, #17
 80016c6:	dd11      	ble.n	80016ec <lora_set_tx_power+0x34>
    if (level > 20) {
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b14      	cmp	r3, #20
 80016cc:	dd01      	ble.n	80016d2 <lora_set_tx_power+0x1a>
      level = 20;
 80016ce:	2314      	movs	r3, #20
 80016d0:	603b      	str	r3, [r7, #0]
    }

    level -= 3;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	603b      	str	r3, [r7, #0]

    // high power operation
    _write(lora, REG_PA_DAC, 0x87);
 80016d8:	2287      	movs	r2, #135	@ 0x87
 80016da:	214d      	movs	r1, #77	@ 0x4d
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fe67 	bl	80013b0 <_write>
    lora_set_ocp(lora, 140);
 80016e2:	218c      	movs	r1, #140	@ 0x8c
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f821 	bl	800172c <lora_set_ocp>
 80016ea:	e00d      	b.n	8001708 <lora_set_tx_power+0x50>
  } else {
    if (level < 2) {
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	dc01      	bgt.n	80016f6 <lora_set_tx_power+0x3e>
      level = 2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	603b      	str	r3, [r7, #0]
    }

    _write(lora, REG_PA_DAC, 0x84);
 80016f6:	2284      	movs	r2, #132	@ 0x84
 80016f8:	214d      	movs	r1, #77	@ 0x4d
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe58 	bl	80013b0 <_write>
    lora_set_ocp(lora, 100);
 8001700:	2164      	movs	r1, #100	@ 0x64
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f812 	bl	800172c <lora_set_ocp>
  }

  _write(lora, REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	3b02      	subs	r3, #2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b25b      	sxtb	r3, r3
 8001712:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	2109      	movs	r1, #9
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe46 	bl	80013b0 <_write>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <lora_set_ocp>:
void lora_disable_invert_iq(lora_t *lora) {
  _write(lora, REG_INVERTIQ,  0x27);
  _write(lora, REG_INVERTIQ2, 0x1d);
}

void lora_set_ocp(lora_t *lora, uint8_t mA) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	70fb      	strb	r3, [r7, #3]
  uint8_t ocpTrim = 27;
 8001738:	231b      	movs	r3, #27
 800173a:	73fb      	strb	r3, [r7, #15]

  if (mA <= 120) {
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	2b78      	cmp	r3, #120	@ 0x78
 8001740:	d809      	bhi.n	8001756 <lora_set_ocp+0x2a>
    ocpTrim = (mA - 45) / 5;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	3b2d      	subs	r3, #45	@ 0x2d
 8001746:	4a12      	ldr	r2, [pc, #72]	@ (8001790 <lora_set_ocp+0x64>)
 8001748:	fb82 1203 	smull	r1, r2, r2, r3
 800174c:	1052      	asrs	r2, r2, #1
 800174e:	17db      	asrs	r3, r3, #31
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e00b      	b.n	800176e <lora_set_ocp+0x42>
  } else if (mA <=240) {
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	2bf0      	cmp	r3, #240	@ 0xf0
 800175a:	d808      	bhi.n	800176e <lora_set_ocp+0x42>
    ocpTrim = (mA + 30) / 10;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	331e      	adds	r3, #30
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <lora_set_ocp+0x64>)
 8001762:	fb82 1203 	smull	r1, r2, r2, r3
 8001766:	1092      	asrs	r2, r2, #2
 8001768:	17db      	asrs	r3, r3, #31
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	73fb      	strb	r3, [r7, #15]
  }

  _write(lora, REG_OCP, 0x20 | (0x1F & ocpTrim));
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	210b      	movs	r1, #11
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fe15 	bl	80013b0 <_write>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	66666667 	.word	0x66666667

08001794 <lora_dio_interrupt>:
    // set gain
    _write(lora, REG_LNA, _read(lora, REG_LNA) | (gain << 5));
  }
}

void lora_dio_interrupt(lora_t *lora) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  int irq_flags = _read(lora, REG_IRQ_FLAGS);
 800179c:	2112      	movs	r1, #18
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fdaf 	bl	8001302 <_read>
 80017a4:	4603      	mov	r3, r0
 80017a6:	60fb      	str	r3, [r7, #12]

  // clear IRQ's
  _write(lora, REG_IRQ_FLAGS, irq_flags);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	2112      	movs	r1, #18
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fdfd 	bl	80013b0 <_write>

  if (irq_flags & IRQ_CAD_DONE_MASK) {
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d010      	beq.n	80017e2 <lora_dio_interrupt+0x4e>
    if (lora->on_cad_done) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d048      	beq.n	800185a <lora_dio_interrupt+0xc6>
      lora->on_cad_done(irq_flags & IRQ_CAD_DETECTED_MASK);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	f002 0201 	and.w	r2, r2, #1
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	2200      	moveq	r2, #0
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	4610      	mov	r0, r2
 80017de:	4798      	blx	r3
      if (lora->on_tx_done) {
        lora->on_tx_done();
      }
    }
  }
}
 80017e0:	e03b      	b.n	800185a <lora_dio_interrupt+0xc6>
  } else if (!(irq_flags & IRQ_PAYLOAD_CRC_ERROR_MASK)) {
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d136      	bne.n	800185a <lora_dio_interrupt+0xc6>
    if (irq_flags & IRQ_RX_DONE_MASK) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d025      	beq.n	8001842 <lora_dio_interrupt+0xae>
      lora->_pos = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
      int length = lora->_implicit_header ? _read(lora, REG_PAYLOAD_LENGTH) : _read(lora, REG_RX_NB_BYTES);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7f1b      	ldrb	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <lora_dio_interrupt+0x7c>
 8001804:	2122      	movs	r1, #34	@ 0x22
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fd7b 	bl	8001302 <_read>
 800180c:	4603      	mov	r3, r0
 800180e:	e004      	b.n	800181a <lora_dio_interrupt+0x86>
 8001810:	2113      	movs	r1, #19
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fd75 	bl	8001302 <_read>
 8001818:	4603      	mov	r3, r0
 800181a:	60bb      	str	r3, [r7, #8]
      _write(lora, REG_FIFO_ADDR_PTR, _read(lora, REG_FIFO_RX_CURRENT_ADDR));
 800181c:	2110      	movs	r1, #16
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fd6f 	bl	8001302 <_read>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	210d      	movs	r1, #13
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fdc0 	bl	80013b0 <_write>
      if (lora->on_receive) {
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d010      	beq.n	800185a <lora_dio_interrupt+0xc6>
        lora->on_receive(length);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	4798      	blx	r3
}
 8001840:	e00b      	b.n	800185a <lora_dio_interrupt+0xc6>
    } else if (irq_flags & IRQ_TX_DONE_MASK) {
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <lora_dio_interrupt+0xc6>
      if (lora->on_tx_done) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <lora_dio_interrupt+0xc6>
        lora->on_tx_done();
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4798      	blx	r3
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <stepper_event_init>:
#include "stepper-motor-event.h"

void stepper_event_init(stepper_event_t *event, uint32_t forwards_target, uint32_t backwards_target) {
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  event->target_pos = POSITION_MIDDLE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
  event->step_fwd = true;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2201      	movs	r2, #1
 8001878:	705a      	strb	r2, [r3, #1]
  event->progress = 0;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  event->target = 0;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  event->target_fwd = forwards_target;
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	60da      	str	r2, [r3, #12]
  event->target_bwd = backwards_target;
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	611a      	str	r2, [r3, #16]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <stepper_event_done>:

bool stepper_event_done(stepper_event_t *event) {
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return event->progress == event->target;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	bf0c      	ite	eq
 80018b2:	2301      	moveq	r3, #1
 80018b4:	2300      	movne	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <stepper_event_update>:

void stepper_event_update(stepper_event_t *event, int8_t new_position) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
  // same as old direction? all's good
  if (new_position == event->target_pos) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f993 3000 	ldrsb.w	r3, [r3]
 80018d6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d03c      	beq.n	8001958 <stepper_event_update+0x94>
    return;
  }
  
  // arrive at centre by undoing steps
  event->target = event->progress;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	609a      	str	r2, [r3, #8]
  
  // from new position, update target steps and step direction
  switch (new_position) {
 80018e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d022      	beq.n	8001934 <stepper_event_update+0x70>
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	dc2b      	bgt.n	800194a <stepper_event_update+0x86>
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d002      	beq.n	80018fe <stepper_event_update+0x3a>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <stepper_event_update+0x50>
 80018fc:	e025      	b.n	800194a <stepper_event_update+0x86>
    case POSITION_BACKWARD:
      event->target += event->target_bwd;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6912      	ldr	r2, [r2, #16]
 8001906:	441a      	add	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
      event->step_fwd = false;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	705a      	strb	r2, [r3, #1]
      break;
 8001912:	e01a      	b.n	800194a <stepper_event_update+0x86>
    case POSITION_MIDDLE:
      event->step_fwd = !event->step_fwd;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	705a      	strb	r2, [r3, #1]
      break;
 8001932:	e00a      	b.n	800194a <stepper_event_update+0x86>
    case POSITION_FORWARD:
      event->target += event->target_fwd;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68d2      	ldr	r2, [r2, #12]
 800193c:	441a      	add	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
      event->step_fwd = true;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	705a      	strb	r2, [r3, #1]
      break;
 8001948:	bf00      	nop
  }
  
  // reset progress
  event->progress = 0;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
  
  // set new target position
  event->target_pos = new_position;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e000      	b.n	800195a <stepper_event_update+0x96>
    return;
 8001958:	bf00      	nop
}
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <stepper_event_microstep>:

bool stepper_event_microstep(stepper_motor_t *motor, stepper_event_t *event) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  // are we already done?
  if (stepper_event_done(event)) {
 800196e:	6838      	ldr	r0, [r7, #0]
 8001970:	f7ff ff95 	bl	800189e <stepper_event_done>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <stepper_event_microstep+0x1a>
    return true;
 800197a:	2301      	movs	r3, #1
 800197c:	e007      	b.n	800198e <stepper_event_microstep+0x2a>
  }
  
  // we are not done, so same as forcing step
  stepper_event_force_microstep(motor, event);
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f808 	bl	8001996 <stepper_event_force_microstep>
  
  // return if event is now done
  return stepper_event_done(event);
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7ff ff89 	bl	800189e <stepper_event_done>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <stepper_event_force_microstep>:

void stepper_event_force_microstep(stepper_motor_t *motor, stepper_event_t *event) {
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  // step motor in stated direction
  if (event->step_fwd) {
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <stepper_event_force_microstep+0x1a>
    stepper_motor_microstep(motor);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f867 	bl	8001a7c <stepper_motor_microstep>
 80019ae:	e002      	b.n	80019b6 <stepper_event_force_microstep+0x20>
  } else {
    stepper_motor_microstep_back(motor);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f885 	bl	8001ac0 <stepper_motor_microstep_back>
  }
  
  // increase step count
  event->progress++;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	605a      	str	r2, [r3, #4]
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <stepper_motor_init>:

// map mode to sequences, length determined by sequence_count[]
static uint8_t *sequences[] = { sequence_wave_drive, sequence_full_drive, sequence_half_drive };


void stepper_motor_init(stepper_motor_t *motor, const pin_t *pins[STEPPER_MOTOR_PINS], uint8_t mode) {
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	4613      	mov	r3, r2
 80019d4:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < STEPPER_MOTOR_PINS; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
 80019da:	e00b      	b.n	80019f4 <stepper_motor_init+0x2c>
    motor->pins[i] = pins[i];
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	4413      	add	r3, r2
 80019e4:	7dfa      	ldrb	r2, [r7, #23]
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0; i < STEPPER_MOTOR_PINS; i++) {
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	3301      	adds	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d9f0      	bls.n	80019dc <stepper_motor_init+0x14>
  }

  motor->step = 0;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	741a      	strb	r2, [r3, #16]
  motor->mode = mode;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	745a      	strb	r2, [r3, #17]
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <stepper_set_state>:

// set a stepper motor to the given step
static void stepper_set_state(stepper_motor_t *motor, uint8_t step) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  // extract sequence data from corresponding step
  uint8_t state = sequences[motor->mode][step];
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7c5b      	ldrb	r3, [r3, #17]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <stepper_set_state+0x64>)
 8001a28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	72bb      	strb	r3, [r7, #10]
  
  // mask to check against sequence
  uint32_t mask = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
  
  // set motor pins
  for (uint8_t i = 0; i < STEPPER_MOTOR_PINS; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	72fb      	strb	r3, [r7, #11]
 8001a3c:	e014      	b.n	8001a68 <stepper_set_state+0x54>
    write_pin(motor->pins[i], state & mask);
 8001a3e:	7afa      	ldrb	r2, [r7, #11]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a46:	7aba      	ldrb	r2, [r7, #10]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	f000 f884 	bl	8001b64 <write_pin>
    mask <<= 1;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < STEPPER_MOTOR_PINS; i++) {
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	3301      	adds	r3, #1
 8001a66:	72fb      	strb	r3, [r7, #11]
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d9e7      	bls.n	8001a3e <stepper_set_state+0x2a>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000014 	.word	0x20000014

08001a7c <stepper_motor_microstep>:

void stepper_motor_microstep(stepper_motor_t *motor) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  stepper_set_state(motor, motor->step);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7c1b      	ldrb	r3, [r3, #16]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffc2 	bl	8001a14 <stepper_set_state>

  // increase step count, overflowing if necessary
  motor->step++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7c1b      	ldrb	r3, [r3, #16]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	741a      	strb	r2, [r3, #16]
  
  if (motor->step >= sequence_lengths[motor->mode]) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7c1a      	ldrb	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7c5b      	ldrb	r3, [r3, #17]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <stepper_motor_microstep+0x40>)
 8001aa8:	5c5b      	ldrb	r3, [r3, r1]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <stepper_motor_microstep+0x38>
    motor->step = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	741a      	strb	r2, [r3, #16]
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000000 	.word	0x20000000

08001ac0 <stepper_motor_microstep_back>:

void stepper_motor_microstep_back(stepper_motor_t *motor) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  stepper_set_state(motor, motor->step);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7c1b      	ldrb	r3, [r3, #16]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa0 	bl	8001a14 <stepper_set_state>

  // decrease step count, underflowing if necessary
  if (motor->step == 0) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7c1b      	ldrb	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <stepper_motor_microstep_back+0x30>
    motor->step = sequence_lengths[motor->mode] - 1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7c5b      	ldrb	r3, [r3, #17]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <stepper_motor_microstep_back+0x44>)
 8001ae4:	5c9b      	ldrb	r3, [r3, r2]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	741a      	strb	r2, [r3, #16]
  } else {
    motor->step--;
  }
}
 8001aee:	e005      	b.n	8001afc <stepper_motor_microstep_back+0x3c>
    motor->step--;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7c1b      	ldrb	r3, [r3, #16]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	741a      	strb	r2, [r3, #16]
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000

08001b08 <stepper_motor_microstep_count>:

uint8_t stepper_motor_microstep_count(const stepper_motor_t *motor) {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return sequence_lengths[motor->mode];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7c5b      	ldrb	r3, [r3, #17]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <stepper_motor_microstep_count+0x20>)
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <fetch_code>:
#include "stored-code.h"

static volatile code_t _code;

code_t fetch_code(void) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return _code;
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <fetch_code+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000220 	.word	0x20000220

08001b44 <save_code>:

void save_code(code_t code) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  _code = code;
 8001b4c:	4a04      	ldr	r2, [pc, #16]	@ (8001b60 <save_code+0x1c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000220 	.word	0x20000220

08001b64 <write_pin>:
  } else if ((value) > (max)) {\
    (value) = (max);           \
  }

// set (state=true) or reset (state=false) the given pin
inline void write_pin(const pin_t *pin, bool state) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(pin->port, pin->pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	889b      	ldrh	r3, [r3, #4]
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f000 ffc0 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <set_pin>:

// set a pin high
inline void set_pin(const pin_t *pin) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	889b      	ldrh	r3, [r3, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f000 ffb0 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <reset_pin>:

// set a pin low
inline void reset_pin(const pin_t *pin) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	889b      	ldrh	r3, [r3, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f000 ffa0 	bl	8002b00 <HAL_GPIO_WritePin>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bcc:	f000 fc3c 	bl	8002448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd0:	f000 f811 	bl	8001bf6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd4:	f000 f9de 	bl	8001f94 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001bd8:	f000 f920 	bl	8001e1c <MX_TIM3_Init>
  MX_TIM6_Init();
 8001bdc:	f000 f96c 	bl	8001eb8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001be0:	f000 f9a2 	bl	8001f28 <MX_TIM7_Init>
  MX_SPI2_Init();
 8001be4:	f000 f858 	bl	8001c98 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001be8:	f000 f894 	bl	8001d14 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001bec:	f7ff f838 	bl	8000c60 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	loop();
 8001bf0:	f7ff f8ba 	bl	8000d68 <loop>
 8001bf4:	e7fc      	b.n	8001bf0 <main+0x28>

08001bf6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b096      	sub	sp, #88	@ 0x58
 8001bfa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2244      	movs	r2, #68	@ 0x44
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 ff51 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c18:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c1c:	f000 ffae 	bl	8002b7c <HAL_PWREx_ControlVoltageScaling>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c26:	f000 fa57 	bl	80020d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c34:	2310      	movs	r3, #16
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c44:	230a      	movs	r3, #10
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c50:	2302      	movs	r3, #2
 8001c52:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 ffe5 	bl	8002c28 <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c64:	f000 fa38 	bl	80020d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c68:	230f      	movs	r3, #15
 8001c6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2104      	movs	r1, #4
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 fbad 	bl	80033e0 <HAL_RCC_ClockConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c8c:	f000 fa24 	bl	80020d8 <Error_Handler>
  }
}
 8001c90:	bf00      	nop
 8001c92:	3758      	adds	r7, #88	@ 0x58
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <MX_SPI2_Init+0x78>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001ca4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ca8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cb2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001cb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cce:	2238      	movs	r2, #56	@ 0x38
 8001cd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_SPI2_Init+0x74>)
 8001cf8:	f001 fd5e 	bl	80037b8 <HAL_SPI_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d02:	f000 f9e9 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000224 	.word	0x20000224
 8001d10:	40003800 	.word	0x40003800

08001d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	@ 0x38
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d46:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d4e:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d5c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001d60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d6e:	482a      	ldr	r0, [pc, #168]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d70:	f002 fc4e 	bl	8004610 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d7a:	f000 f9ad 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4823      	ldr	r0, [pc, #140]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d8c:	f003 f8ba 	bl	8004f04 <HAL_TIM_ConfigClockSource>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d96:	f000 f99f 	bl	80020d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d9a:	481f      	ldr	r0, [pc, #124]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001d9c:	f002 fd2f 	bl	80047fe <HAL_TIM_PWM_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001da6:	f000 f997 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4817      	ldr	r0, [pc, #92]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001dba:	f003 fdd1 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001dc4:	f000 f988 	bl	80020d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc8:	2360      	movs	r3, #96	@ 0x60
 8001dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480e      	ldr	r0, [pc, #56]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001de0:	f002 ff7c 	bl	8004cdc <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001dea:	f000 f975 	bl	80020d8 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001dee:	2304      	movs	r3, #4
 8001df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001df2:	463b      	mov	r3, r7
 8001df4:	2208      	movs	r2, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001dfa:	f002 ff6f 	bl	8004cdc <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001e04:	f000 f968 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e08:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <MX_TIM2_Init+0x104>)
 8001e0a:	f000 fa3b 	bl	8002284 <HAL_TIM_MspPostInit>

}
 8001e0e:	bf00      	nop
 8001e10:	3738      	adds	r7, #56	@ 0x38
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000288 	.word	0x20000288

08001e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <MX_TIM3_Init+0x98>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e4e:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e5c:	2280      	movs	r2, #128	@ 0x80
 8001e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e60:	4813      	ldr	r0, [pc, #76]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e62:	f002 fbd5 	bl	8004610 <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e6c:	f000 f934 	bl	80020d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e7e:	f003 f841 	bl	8004f04 <HAL_TIM_ConfigClockSource>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e88:	f000 f926 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	@ (8001eb0 <MX_TIM3_Init+0x94>)
 8001e9a:	f003 fd61 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ea4:	f000 f918 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200002d4 	.word	0x200002d4
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001eca:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <MX_TIM6_Init+0x6c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2476;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001ed0:	f640 12ac 	movw	r2, #2476	@ 0x9ac
 8001ed4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64515;
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001ede:	f64f 4203 	movw	r2, #64515	@ 0xfc03
 8001ee2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eea:	480d      	ldr	r0, [pc, #52]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001eec:	f002 fb90 	bl	8004610 <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ef6:	f000 f8ef 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <MX_TIM6_Init+0x68>)
 8001f08:	f003 fd2a 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001f12:	f000 f8e1 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000320 	.word	0x20000320
 8001f24:	40001000 	.word	0x40001000

08001f28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f3a:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <MX_TIM7_Init+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f4c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001f50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f54:	2280      	movs	r2, #128	@ 0x80
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f5a:	f002 fb59 	bl	8004610 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f64:	f000 f8b8 	bl	80020d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_TIM7_Init+0x64>)
 8001f76:	f003 fcf3 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f80:	f000 f8aa 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000036c 	.word	0x2000036c
 8001f90:	40001400 	.word	0x40001400

08001f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	4b48      	ldr	r3, [pc, #288]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a47      	ldr	r2, [pc, #284]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b42      	ldr	r3, [pc, #264]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	4a41      	ldr	r2, [pc, #260]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fce:	4b3f      	ldr	r3, [pc, #252]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b3c      	ldr	r3, [pc, #240]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe6:	4b39      	ldr	r3, [pc, #228]	@ (80020cc <MX_GPIO_Init+0x138>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEPPER_BLACK_Pin|STEPPER_BLUE_Pin|STEPPER_GREEN_Pin|STEPPER_RED_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	4836      	ldr	r0, [pc, #216]	@ (80020d0 <MX_GPIO_Init+0x13c>)
 8001ff8:	f000 fd82 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_MOTOR_IN1_Pin|DC_MOTOR_IN2_Pin|DC_MOTOR_IN3_Pin|DC_MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002004:	f000 fd7c 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFM_RESET_Pin|RFM_SELECT_Pin|ELECTROMAGNET_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f241 0109 	movw	r1, #4105	@ 0x1009
 800200e:	4831      	ldr	r0, [pc, #196]	@ (80020d4 <MX_GPIO_Init+0x140>)
 8002010:	f000 fd76 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800201a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4619      	mov	r1, r3
 800202a:	4829      	ldr	r0, [pc, #164]	@ (80020d0 <MX_GPIO_Init+0x13c>)
 800202c:	f000 fbbe 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_BLACK_Pin STEPPER_BLUE_Pin STEPPER_GREEN_Pin STEPPER_RED_Pin */
  GPIO_InitStruct.Pin = STEPPER_BLACK_Pin|STEPPER_BLUE_Pin|STEPPER_GREEN_Pin|STEPPER_RED_Pin;
 8002030:	230f      	movs	r3, #15
 8002032:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	4619      	mov	r1, r3
 8002046:	4822      	ldr	r0, [pc, #136]	@ (80020d0 <MX_GPIO_Init+0x13c>)
 8002048:	f000 fbb0 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_MOTOR_IN1_Pin DC_MOTOR_IN2_Pin DC_MOTOR_IN3_Pin DC_MOTOR_IN4_Pin */
  GPIO_InitStruct.Pin = DC_MOTOR_IN1_Pin|DC_MOTOR_IN2_Pin|DC_MOTOR_IN3_Pin|DC_MOTOR_IN4_Pin;
 800204c:	230f      	movs	r3, #15
 800204e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002066:	f000 fba1 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_RESET_Pin RFM_SELECT_Pin ELECTROMAGNET_Pin */
  GPIO_InitStruct.Pin = RFM_RESET_Pin|RFM_SELECT_Pin|ELECTROMAGNET_Pin;
 800206a:	f241 0309 	movw	r3, #4105	@ 0x1009
 800206e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	4814      	ldr	r0, [pc, #80]	@ (80020d4 <MX_GPIO_Init+0x140>)
 8002084:	f000 fb92 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_DIO_Pin */
  GPIO_InitStruct.Pin = RFM_DIO_Pin;
 8002088:	2302      	movs	r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800208c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFM_DIO_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	4619      	mov	r1, r3
 800209c:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <MX_GPIO_Init+0x140>)
 800209e:	f000 fb85 	bl	80027ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2007      	movs	r0, #7
 80020a8:	f000 fb49 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020ac:	2007      	movs	r0, #7
 80020ae:	f000 fb62 	bl	8002776 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2028      	movs	r0, #40	@ 0x28
 80020b8:	f000 fb41 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020bc:	2028      	movs	r0, #40	@ 0x28
 80020be:	f000 fb5a 	bl	8002776 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020c2:	bf00      	nop
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000800 	.word	0x48000800
 80020d4:	48000400 	.word	0x48000400

080020d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <Error_Handler+0x8>

080020e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <HAL_MspInit+0x44>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002128 <HAL_MspInit+0x44>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_MspInit+0x44>)
 80020f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_MspInit+0x44>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	4a08      	ldr	r2, [pc, #32]	@ (8002128 <HAL_MspInit+0x44>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6593      	str	r3, [r2, #88]	@ 0x58
 800210e:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_MspInit+0x44>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	@ 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a17      	ldr	r2, [pc, #92]	@ (80021a8 <HAL_SPI_MspInit+0x7c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d128      	bne.n	80021a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <HAL_SPI_MspInit+0x80>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	4a16      	ldr	r2, [pc, #88]	@ (80021ac <HAL_SPI_MspInit+0x80>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002158:	6593      	str	r3, [r2, #88]	@ 0x58
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_SPI_MspInit+0x80>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <HAL_SPI_MspInit+0x80>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <HAL_SPI_MspInit+0x80>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_SPI_MspInit+0x80>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800217e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002190:	2305      	movs	r3, #5
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <HAL_SPI_MspInit+0x84>)
 800219c:	f000 fb06 	bl	80027ac <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	@ 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40003800 	.word	0x40003800
 80021ac:	40021000 	.word	0x40021000
 80021b0:	48000400 	.word	0x48000400

080021b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c4:	d10c      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d2:	4b28      	ldr	r3, [pc, #160]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021de:	e044      	b.n	800226a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a24      	ldr	r2, [pc, #144]	@ (8002278 <HAL_TIM_Base_MspInit+0xc4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10c      	bne.n	8002204 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
}
 8002202:	e032      	b.n	800226a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <HAL_TIM_Base_MspInit+0xc8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d114      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6593      	str	r3, [r2, #88]	@ 0x58
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2036      	movs	r0, #54	@ 0x36
 800222c:	f000 fa87 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002230:	2036      	movs	r0, #54	@ 0x36
 8002232:	f000 faa0 	bl	8002776 <HAL_NVIC_EnableIRQ>
}
 8002236:	e018      	b.n	800226a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <HAL_TIM_Base_MspInit+0xcc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d113      	bne.n	800226a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	6593      	str	r3, [r2, #88]	@ 0x58
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_TIM_Base_MspInit+0xc0>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2037      	movs	r0, #55	@ 0x37
 8002260:	f000 fa6d 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002264:	2037      	movs	r0, #55	@ 0x37
 8002266:	f000 fa86 	bl	8002776 <HAL_NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	40000400 	.word	0x40000400
 800227c:	40001000 	.word	0x40001000
 8002280:	40001400 	.word	0x40001400

08002284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a4:	d139      	bne.n	800231a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002324 <HAL_TIM_MspPostInit+0xa0>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <HAL_TIM_MspPostInit+0xa0>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <HAL_TIM_MspPostInit+0xa0>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022be:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_TIM_MspPostInit+0xa0>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_TIM_MspPostInit+0xa0>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_TIM_MspPostInit+0xa0>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = DC_MOTOR_EN1_2_Pin;
 80022d6:	2320      	movs	r3, #32
 80022d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_MOTOR_EN1_2_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f4:	f000 fa5a 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_MOTOR_EN3_4_Pin;
 80022f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DC_MOTOR_EN3_4_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4804      	ldr	r0, [pc, #16]	@ (8002328 <HAL_TIM_MspPostInit+0xa4>)
 8002316:	f000 fa49 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	@ 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	48000400 	.word	0x48000400

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <NMI_Handler+0x4>

08002334 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <MemManage_Handler+0x4>

08002344 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <UsageFault_Handler+0x4>

08002354 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002382:	f000 f8bd 	bl	8002500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}

0800238a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_DIO_Pin);
 800238e:	2002      	movs	r0, #2
 8002390:	f000 fbce 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800239c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80023a0:	f000 fbc6 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023ac:	4802      	ldr	r0, [pc, #8]	@ (80023b8 <TIM6_DAC_IRQHandler+0x10>)
 80023ae:	f002 fb8d 	bl	8004acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000320 	.word	0x20000320

080023bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023c0:	4802      	ldr	r0, [pc, #8]	@ (80023cc <TIM7_IRQHandler+0x10>)
 80023c2:	f002 fb83 	bl	8004acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000036c 	.word	0x2000036c

080023d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800242c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f8:	f7ff ffea 	bl	80023d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480c      	ldr	r0, [pc, #48]	@ (8002430 <LoopForever+0x6>)
  ldr r1, =_edata
 80023fe:	490d      	ldr	r1, [pc, #52]	@ (8002434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002400:	4a0d      	ldr	r2, [pc, #52]	@ (8002438 <LoopForever+0xe>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002414:	4c0a      	ldr	r4, [pc, #40]	@ (8002440 <LoopForever+0x16>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002422:	f003 fb4b 	bl	8005abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002426:	f7ff fbcf 	bl	8001bc8 <main>

0800242a <LoopForever>:

LoopForever:
    b LoopForever
 800242a:	e7fe      	b.n	800242a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800242c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002438:	08005bcc 	.word	0x08005bcc
  ldr r2, =_sbss
 800243c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8002440:	200003bc 	.word	0x200003bc

08002444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC1_2_IRQHandler>
	...

08002448 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_Init+0x3c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <HAL_Init+0x3c>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800245c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245e:	2003      	movs	r0, #3
 8002460:	f000 f962 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002464:	2000      	movs	r0, #0
 8002466:	f000 f80f 	bl	8002488 <HAL_InitTick>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	e001      	b.n	800247a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002476:	f7ff fe35 	bl	80020e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800247a:	79fb      	ldrb	r3, [r7, #7]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40022000 	.word	0x40022000

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <HAL_InitTick+0x6c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d023      	beq.n	80024e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800249c:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <HAL_InitTick+0x70>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_InitTick+0x6c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f96d 	bl	8002792 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d809      	bhi.n	80024d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 f937 	bl	800273e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024d0:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <HAL_InitTick+0x74>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e007      	b.n	80024e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e004      	b.n	80024e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e001      	b.n	80024e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000028 	.word	0x20000028
 80024f8:	20000020 	.word	0x20000020
 80024fc:	20000024 	.word	0x20000024

08002500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_IncTick+0x20>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_IncTick+0x24>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <HAL_IncTick+0x24>)
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000028 	.word	0x20000028
 8002524:	200003b8 	.word	0x200003b8

08002528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b03      	ldr	r3, [pc, #12]	@ (800253c <HAL_GetTick+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200003b8 	.word	0x200003b8

08002540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff ffee 	bl	8002528 <HAL_GetTick>
 800254c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d005      	beq.n	8002566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <HAL_Delay+0x44>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002566:	bf00      	nop
 8002568:	f7ff ffde 	bl	8002528 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	429a      	cmp	r2, r3
 8002576:	d8f7      	bhi.n	8002568 <HAL_Delay+0x28>
  {
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000028 	.word	0x20000028

08002588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ba:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	60d3      	str	r3, [r2, #12]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	@ (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	@ (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	@ (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	@ 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff8e 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff29 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff3e 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff8e 	bl	800267c <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5d 	bl	8002628 <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff31 	bl	80025ec <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa2 	bl	80026e4 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ba:	e17f      	b.n	8002abc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8171 	beq.w	8002ab6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d005      	beq.n	80027ec <HAL_GPIO_Init+0x40>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d130      	bne.n	800284e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002822:	2201      	movs	r2, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0201 	and.w	r2, r3, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b03      	cmp	r3, #3
 8002858:	d118      	bne.n	800288c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	6939      	ldr	r1, [r7, #16]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80ac 	beq.w	8002ab6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b5f      	ldr	r3, [pc, #380]	@ (8002adc <HAL_GPIO_Init+0x330>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002962:	4a5e      	ldr	r2, [pc, #376]	@ (8002adc <HAL_GPIO_Init+0x330>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6613      	str	r3, [r2, #96]	@ 0x60
 800296a:	4b5c      	ldr	r3, [pc, #368]	@ (8002adc <HAL_GPIO_Init+0x330>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002976:	4a5a      	ldr	r2, [pc, #360]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029a0:	d025      	beq.n	80029ee <HAL_GPIO_Init+0x242>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01f      	beq.n	80029ea <HAL_GPIO_Init+0x23e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4e      	ldr	r2, [pc, #312]	@ (8002ae8 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d019      	beq.n	80029e6 <HAL_GPIO_Init+0x23a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4d      	ldr	r2, [pc, #308]	@ (8002aec <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_GPIO_Init+0x236>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4c      	ldr	r2, [pc, #304]	@ (8002af0 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00d      	beq.n	80029de <HAL_GPIO_Init+0x232>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	@ (8002af4 <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <HAL_GPIO_Init+0x22e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	@ (8002af8 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_GPIO_Init+0x22a>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e00c      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029d6:	2307      	movs	r3, #7
 80029d8:	e00a      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029ee:	2300      	movs	r3, #0
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a00:	4937      	ldr	r1, [pc, #220]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a32:	4a32      	ldr	r2, [pc, #200]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a38:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a5c:	4a27      	ldr	r2, [pc, #156]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a62:	4b26      	ldr	r3, [pc, #152]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a86:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab0:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <HAL_GPIO_Init+0x350>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f ae78 	bne.w	80027bc <HAL_GPIO_Init+0x10>
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	48000c00 	.word	0x48000c00
 8002af0:	48001000 	.word	0x48001000
 8002af4:	48001400 	.word	0x48001400
 8002af8:	48001800 	.word	0x48001800
 8002afc:	40010400 	.word	0x40010400

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f874 	bl	8000c3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40010400 	.word	0x40010400

08002b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40007000 	.word	0x40007000

08002b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b8a:	d130      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b8c:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b98:	d038      	beq.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9a:	4b20      	ldr	r3, [pc, #128]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002baa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2232      	movs	r2, #50	@ 0x32
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9b      	lsrs	r3, r3, #18
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc0:	e002      	b.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc8:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd4:	d102      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f2      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be8:	d110      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d007      	beq.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c04:	4a05      	ldr	r2, [pc, #20]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	20000020 	.word	0x20000020
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e3ca      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3a:	4b97      	ldr	r3, [pc, #604]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c44:	4b94      	ldr	r3, [pc, #592]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80e4 	beq.w	8002e24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_RCC_OscConfig+0x4a>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	f040 808b 	bne.w	8002d80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 8087 	bne.w	8002d80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c72:	4b89      	ldr	r3, [pc, #548]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x62>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e3a2      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1a      	ldr	r2, [r3, #32]
 8002c8e:	4b82      	ldr	r3, [pc, #520]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x7c>
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ca2:	e005      	b.n	8002cb0 <HAL_RCC_OscConfig+0x88>
 8002ca4:	4b7c      	ldr	r3, [pc, #496]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d223      	bcs.n	8002cfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fd1d 	bl	80036f8 <RCC_SetFlashLatencyFromMSIRange>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e383      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc8:	4b73      	ldr	r3, [pc, #460]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a72      	ldr	r2, [pc, #456]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	496d      	ldr	r1, [pc, #436]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	4968      	ldr	r1, [pc, #416]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
 8002cfa:	e025      	b.n	8002d48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cfc:	4b66      	ldr	r3, [pc, #408]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a65      	ldr	r2, [pc, #404]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4960      	ldr	r1, [pc, #384]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	495b      	ldr	r1, [pc, #364]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fcdd 	bl	80036f8 <RCC_SetFlashLatencyFromMSIRange>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e343      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d48:	f000 fc4a 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b52      	ldr	r3, [pc, #328]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	4950      	ldr	r1, [pc, #320]	@ (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	4a4e      	ldr	r2, [pc, #312]	@ (8002ea0 <HAL_RCC_OscConfig+0x278>)
 8002d66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d68:	4b4e      	ldr	r3, [pc, #312]	@ (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fb8b 	bl	8002488 <HAL_InitTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d052      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	e327      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d032      	beq.n	8002dee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d88:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a42      	ldr	r2, [pc, #264]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d94:	f7ff fbc8 	bl	8002528 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9c:	f7ff fbc4 	bl	8002528 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e310      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dae:	4b3a      	ldr	r3, [pc, #232]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dba:	4b37      	ldr	r3, [pc, #220]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a36      	ldr	r2, [pc, #216]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4931      	ldr	r1, [pc, #196]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	492c      	ldr	r1, [pc, #176]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e01a      	b.n	8002e24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dee:	4b2a      	ldr	r3, [pc, #168]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a29      	ldr	r2, [pc, #164]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fb95 	bl	8002528 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e02:	f7ff fb91 	bl	8002528 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e2dd      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e14:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x1da>
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d074      	beq.n	8002f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x21a>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d10e      	bne.n	8002e5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e42:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d064      	beq.n	8002f18 <HAL_RCC_OscConfig+0x2f0>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d160      	bne.n	8002f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e2ba      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x24a>
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0b      	ldr	r2, [pc, #44]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e026      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e7a:	d115      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x280>
 8002e7c:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a05      	ldr	r2, [pc, #20]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a02      	ldr	r2, [pc, #8]	@ (8002e98 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e014      	b.n	8002ec0 <HAL_RCC_OscConfig+0x298>
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08005b84 	.word	0x08005b84
 8002ea0:	20000020 	.word	0x20000020
 8002ea4:	20000024 	.word	0x20000024
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a9f      	ldr	r2, [pc, #636]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a9c      	ldr	r2, [pc, #624]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7ff fb2e 	bl	8002528 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7ff fb2a 	bl	8002528 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e276      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee2:	4b92      	ldr	r3, [pc, #584]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2a8>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fb1a 	bl	8002528 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7ff fb16 	bl	8002528 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	@ 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e262      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f0a:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2d0>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d060      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x310>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d119      	bne.n	8002f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d116      	bne.n	8002f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f38:	4b7c      	ldr	r3, [pc, #496]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x328>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e23f      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f50:	4b76      	ldr	r3, [pc, #472]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	4973      	ldr	r1, [pc, #460]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f64:	e040      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d023      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6e      	ldr	r2, [pc, #440]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7ff fad5 	bl	8002528 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f82:	f7ff fad1 	bl	8002528 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e21d      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	4b65      	ldr	r3, [pc, #404]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b62      	ldr	r3, [pc, #392]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	495f      	ldr	r1, [pc, #380]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	e018      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5c      	ldr	r2, [pc, #368]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7ff fab1 	bl	8002528 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fca:	f7ff faad 	bl	8002528 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1f9      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fdc:	4b53      	ldr	r3, [pc, #332]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d03c      	beq.n	800306e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003002:	4a4a      	ldr	r2, [pc, #296]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7ff fa8c 	bl	8002528 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7ff fa88 	bl	8002528 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e1d4      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003026:	4b41      	ldr	r3, [pc, #260]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ef      	beq.n	8003014 <HAL_RCC_OscConfig+0x3ec>
 8003034:	e01b      	b.n	800306e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b3d      	ldr	r3, [pc, #244]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800303c:	4a3b      	ldr	r2, [pc, #236]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7ff fa6f 	bl	8002528 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304e:	f7ff fa6b 	bl	8002528 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1b7      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003060:	4b32      	ldr	r3, [pc, #200]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ef      	bne.n	800304e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a6 	beq.w	80031c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003080:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	4b27      	ldr	r3, [pc, #156]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	4a26      	ldr	r2, [pc, #152]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6593      	str	r3, [r2, #88]	@ 0x58
 8003098:	4b24      	ldr	r3, [pc, #144]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a8:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <HAL_RCC_OscConfig+0x508>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d118      	bne.n	80030e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003130 <HAL_RCC_OscConfig+0x508>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <HAL_RCC_OscConfig+0x508>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c0:	f7ff fa32 	bl	8002528 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7ff fa2e 	bl	8002528 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e17a      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030da:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <HAL_RCC_OscConfig+0x508>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d108      	bne.n	8003100 <HAL_RCC_OscConfig+0x4d8>
 80030ee:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	4a0d      	ldr	r2, [pc, #52]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030fe:	e029      	b.n	8003154 <HAL_RCC_OscConfig+0x52c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d115      	bne.n	8003134 <HAL_RCC_OscConfig+0x50c>
 8003108:	4b08      	ldr	r3, [pc, #32]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310e:	4a07      	ldr	r2, [pc, #28]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	4a03      	ldr	r2, [pc, #12]	@ (800312c <HAL_RCC_OscConfig+0x504>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x52c>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	40007000 	.word	0x40007000
 8003134:	4b9c      	ldr	r3, [pc, #624]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	4a9b      	ldr	r2, [pc, #620]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003144:	4b98      	ldr	r3, [pc, #608]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314a:	4a97      	ldr	r2, [pc, #604]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d016      	beq.n	800318a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7ff f9e4 	bl	8002528 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7ff f9e0 	bl	8002528 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e12a      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	4b8b      	ldr	r3, [pc, #556]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ed      	beq.n	8003164 <HAL_RCC_OscConfig+0x53c>
 8003188:	e015      	b.n	80031b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7ff f9cd 	bl	8002528 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7ff f9c9 	bl	8002528 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e113      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a8:	4b7f      	ldr	r3, [pc, #508]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ed      	bne.n	8003192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b7a      	ldr	r3, [pc, #488]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	4a79      	ldr	r2, [pc, #484]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80fe 	beq.w	80033ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	f040 80d0 	bne.w	800337c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031dc:	4b72      	ldr	r3, [pc, #456]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0203 	and.w	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d130      	bne.n	8003252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	3b01      	subs	r3, #1
 80031fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d127      	bne.n	8003252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11f      	bne.n	8003252 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800321c:	2a07      	cmp	r2, #7
 800321e:	bf14      	ite	ne
 8003220:	2201      	movne	r2, #1
 8003222:	2200      	moveq	r2, #0
 8003224:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003226:	4293      	cmp	r3, r2
 8003228:	d113      	bne.n	8003252 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d109      	bne.n	8003252 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d06e      	beq.n	8003330 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b0c      	cmp	r3, #12
 8003256:	d069      	beq.n	800332c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0ad      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003274:	4b4c      	ldr	r3, [pc, #304]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4b      	ldr	r2, [pc, #300]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800327a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800327e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003280:	f7ff f952 	bl	8002528 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7ff f94e 	bl	8002528 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e09a      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329a:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a6:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b40      	ldr	r3, [pc, #256]	@ (80033ac <HAL_RCC_OscConfig+0x784>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032b6:	3a01      	subs	r2, #1
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032c0:	0212      	lsls	r2, r2, #8
 80032c2:	4311      	orrs	r1, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032c8:	0852      	lsrs	r2, r2, #1
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0552      	lsls	r2, r2, #21
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032d4:	0852      	lsrs	r2, r2, #1
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0652      	lsls	r2, r2, #25
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032e0:	0912      	lsrs	r2, r2, #4
 80032e2:	0452      	lsls	r2, r2, #17
 80032e4:	430a      	orrs	r2, r1
 80032e6:	4930      	ldr	r1, [pc, #192]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032ec:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2d      	ldr	r2, [pc, #180]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80032f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f8:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 80032fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003304:	f7ff f910 	bl	8002528 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7ff f90c 	bl	8002528 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e058      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	4b22      	ldr	r3, [pc, #136]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800332a:	e050      	b.n	80033ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e04f      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003330:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d148      	bne.n	80033ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003348:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a16      	ldr	r2, [pc, #88]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003354:	f7ff f8e8 	bl	8002528 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7ff f8e4 	bl	8002528 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e030      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x734>
 800337a:	e028      	b.n	80033ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d023      	beq.n	80033ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <HAL_RCC_OscConfig+0x780>)
 8003388:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800338c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7ff f8cb 	bl	8002528 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	e00c      	b.n	80033b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003396:	f7ff f8c7 	bl	8002528 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d905      	bls.n	80033b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e013      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
 80033a8:	40021000 	.word	0x40021000
 80033ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b0:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <HAL_RCC_OscConfig+0x7b0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ec      	bne.n	8003396 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_RCC_OscConfig+0x7b0>)
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4905      	ldr	r1, [pc, #20]	@ (80033d8 <HAL_RCC_OscConfig+0x7b0>)
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_RCC_OscConfig+0x7b4>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
 80033c8:	e001      	b.n	80033ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	feeefffc 	.word	0xfeeefffc

080033e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0e7      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f4:	4b75      	ldr	r3, [pc, #468]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d910      	bls.n	8003424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b72      	ldr	r3, [pc, #456]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	4970      	ldr	r1, [pc, #448]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b6e      	ldr	r3, [pc, #440]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0cf      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d010      	beq.n	8003452 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	4b66      	ldr	r3, [pc, #408]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800343c:	429a      	cmp	r2, r3
 800343e:	d908      	bls.n	8003452 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003440:	4b63      	ldr	r3, [pc, #396]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4960      	ldr	r1, [pc, #384]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04c      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b03      	cmp	r3, #3
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	4b5a      	ldr	r3, [pc, #360]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d121      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0a6      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347e:	4b54      	ldr	r3, [pc, #336]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d115      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e09a      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003496:	4b4e      	ldr	r3, [pc, #312]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e08e      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a6:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e086      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b6:	4b46      	ldr	r3, [pc, #280]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f023 0203 	bic.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4943      	ldr	r1, [pc, #268]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7ff f82e 	bl	8002528 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d0:	f7ff f82a 	bl	8002528 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e06e      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	4b3a      	ldr	r3, [pc, #232]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 020c 	and.w	r2, r3, #12
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d1eb      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003510:	429a      	cmp	r2, r3
 8003512:	d208      	bcs.n	8003526 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b2e      	ldr	r3, [pc, #184]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	492b      	ldr	r1, [pc, #172]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003526:	4b29      	ldr	r3, [pc, #164]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d210      	bcs.n	8003556 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003534:	4b25      	ldr	r3, [pc, #148]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 0207 	bic.w	r2, r3, #7
 800353c:	4923      	ldr	r1, [pc, #140]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	4313      	orrs	r3, r2
 8003542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003544:	4b21      	ldr	r3, [pc, #132]	@ (80035cc <HAL_RCC_ClockConfig+0x1ec>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d001      	beq.n	8003556 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e036      	b.n	80035c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003562:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4918      	ldr	r1, [pc, #96]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003580:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4910      	ldr	r1, [pc, #64]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	4313      	orrs	r3, r2
 8003592:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003594:	f000 f824 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	490b      	ldr	r1, [pc, #44]	@ (80035d4 <HAL_RCC_ClockConfig+0x1f4>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	4a09      	ldr	r2, [pc, #36]	@ (80035d8 <HAL_RCC_ClockConfig+0x1f8>)
 80035b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035b4:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <HAL_RCC_ClockConfig+0x1fc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe ff65 	bl	8002488 <HAL_InitTick>
 80035be:	4603      	mov	r3, r0
 80035c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80035c2:	7afb      	ldrb	r3, [r7, #11]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40022000 	.word	0x40022000
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08005b84 	.word	0x08005b84
 80035d8:	20000020 	.word	0x20000020
 80035dc:	20000024 	.word	0x20000024

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	@ 0x24
 80035e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ee:	4b3e      	ldr	r3, [pc, #248]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f8:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d121      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d11e      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003614:	4b34      	ldr	r3, [pc, #208]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003620:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e005      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003630:	4b2d      	ldr	r3, [pc, #180]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d102      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003658:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	e004      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d101      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003664:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d134      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800366e:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0xa6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d003      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0xac>
 8003684:	e005      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	e005      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800368e:	617b      	str	r3, [r7, #20]
      break;
 8003690:	e002      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	617b      	str	r3, [r7, #20]
      break;
 8003696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003698:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036a6:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	fb03 f202 	mul.w	r2, r3, r2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036be:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	0e5b      	lsrs	r3, r3, #25
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	3301      	adds	r3, #1
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036d8:	69bb      	ldr	r3, [r7, #24]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	@ 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08005b94 	.word	0x08005b94
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	007a1200 	.word	0x007a1200

080036f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003704:	4b2a      	ldr	r3, [pc, #168]	@ (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003710:	f7ff fa26 	bl	8002b60 <HAL_PWREx_GetVoltageRange>
 8003714:	6178      	str	r0, [r7, #20]
 8003716:	e014      	b.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371c:	4a24      	ldr	r2, [pc, #144]	@ (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	@ 0x58
 8003724:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003730:	f7ff fa16 	bl	8002b60 <HAL_PWREx_GetVoltageRange>
 8003734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373a:	4a1d      	ldr	r2, [pc, #116]	@ (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003740:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003748:	d10b      	bne.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b80      	cmp	r3, #128	@ 0x80
 800374e:	d919      	bls.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2ba0      	cmp	r3, #160	@ 0xa0
 8003754:	d902      	bls.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003756:	2302      	movs	r3, #2
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e013      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800375c:	2301      	movs	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e010      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b80      	cmp	r3, #128	@ 0x80
 8003766:	d902      	bls.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003768:	2303      	movs	r3, #3
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e00a      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b80      	cmp	r3, #128	@ 0x80
 8003772:	d102      	bne.n	800377a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003774:	2302      	movs	r3, #2
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e004      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b70      	cmp	r3, #112	@ 0x70
 800377e:	d101      	bne.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003780:	2301      	movs	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 0207 	bic.w	r2, r3, #7
 800378c:	4909      	ldr	r1, [pc, #36]	@ (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40022000 	.word	0x40022000

080037b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e095      	b.n	80038f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037da:	d009      	beq.n	80037f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
 80037e2:	e005      	b.n	80037f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fe fc8e 	bl	800212c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003830:	d902      	bls.n	8003838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e002      	b.n	800383e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800383c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003846:	d007      	beq.n	8003858 <HAL_SPI_Init+0xa0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389a:	ea42 0103 	orr.w	r1, r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	f003 0204 	and.w	r2, r3, #4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800390e:	f7fe fe0b 	bl	8002528 <HAL_GetTick>
 8003912:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003914:	88fb      	ldrh	r3, [r7, #6]
 8003916:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	d001      	beq.n	8003928 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	e15c      	b.n	8003be2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Transmit+0x36>
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e154      	b.n	8003be2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Transmit+0x48>
 8003942:	2302      	movs	r3, #2
 8003944:	e14d      	b.n	8003be2 <HAL_SPI_Transmit+0x2e4>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2203      	movs	r2, #3
 8003952:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003998:	d10f      	bne.n	80039ba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	2b40      	cmp	r3, #64	@ 0x40
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039e0:	d952      	bls.n	8003a88 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Transmit+0xf2>
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d145      	bne.n	8003a7c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a14:	e032      	b.n	8003a7c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d112      	bne.n	8003a4a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a48:	e018      	b.n	8003a7c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a4a:	f7fe fd6d 	bl	8002528 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d803      	bhi.n	8003a62 <HAL_SPI_Transmit+0x164>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d102      	bne.n	8003a68 <HAL_SPI_Transmit+0x16a>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0b2      	b.n	8003be2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1c7      	bne.n	8003a16 <HAL_SPI_Transmit+0x118>
 8003a86:	e083      	b.n	8003b90 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Transmit+0x198>
 8003a90:	8b7b      	ldrh	r3, [r7, #26]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d177      	bne.n	8003b86 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d912      	bls.n	8003ac6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	881a      	ldrh	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	1c9a      	adds	r2, r3, #2
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b02      	subs	r3, #2
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ac4:	e05f      	b.n	8003b86 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003aec:	e04b      	b.n	8003b86 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d12b      	bne.n	8003b54 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d912      	bls.n	8003b2c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b02      	subs	r3, #2
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b2a:	e02c      	b.n	8003b86 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b52:	e018      	b.n	8003b86 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b54:	f7fe fce8 	bl	8002528 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d803      	bhi.n	8003b6c <HAL_SPI_Transmit+0x26e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d102      	bne.n	8003b72 <HAL_SPI_Transmit+0x274>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e02d      	b.n	8003be2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ae      	bne.n	8003aee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fcf5 	bl	8004584 <SPI_EndRxTxTransaction>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
  }
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b088      	sub	sp, #32
 8003bee:	af02      	add	r7, sp, #8
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d001      	beq.n	8003c0a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
 8003c08:	e123      	b.n	8003e52 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c12:	d112      	bne.n	8003c3a <HAL_SPI_Receive+0x50>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10e      	bne.n	8003c3a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f912 	bl	8003e5a <HAL_SPI_TransmitReceive>
 8003c36:	4603      	mov	r3, r0
 8003c38:	e10b      	b.n	8003e52 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fe fc75 	bl	8002528 <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_Receive+0x62>
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e100      	b.n	8003e52 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_SPI_Receive+0x74>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0f9      	b.n	8003e52 <HAL_SPI_Receive+0x268>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2204      	movs	r2, #4
 8003c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	88fa      	ldrh	r2, [r7, #6]
 8003c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cb0:	d908      	bls.n	8003cc4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e007      	b.n	8003cd4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cd2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cdc:	d10f      	bne.n	8003cfe <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003cfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b40      	cmp	r3, #64	@ 0x40
 8003d0a:	d007      	beq.n	8003d1c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d24:	d875      	bhi.n	8003e12 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d26:	e037      	b.n	8003d98 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d117      	bne.n	8003d66 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f103 020c 	add.w	r2, r3, #12
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003d64:	e018      	b.n	8003d98 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d66:	f7fe fbdf 	bl	8002528 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d803      	bhi.n	8003d7e <HAL_SPI_Receive+0x194>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d102      	bne.n	8003d84 <HAL_SPI_Receive+0x19a>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e05c      	b.n	8003e52 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1c1      	bne.n	8003d28 <HAL_SPI_Receive+0x13e>
 8003da4:	e03b      	b.n	8003e1e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d115      	bne.n	8003de0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	b292      	uxth	r2, r2
 8003dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	1c9a      	adds	r2, r3, #2
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003dde:	e018      	b.n	8003e12 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de0:	f7fe fba2 	bl	8002528 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d803      	bhi.n	8003df8 <HAL_SPI_Receive+0x20e>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df6:	d102      	bne.n	8003dfe <HAL_SPI_Receive+0x214>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e01f      	b.n	8003e52 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1c3      	bne.n	8003da6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fb56 	bl	80044d4 <SPI_EndRxTransaction>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b08a      	sub	sp, #40	@ 0x28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e6c:	f7fe fb5c 	bl	8002528 <HAL_GetTick>
 8003e70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003e84:	887b      	ldrh	r3, [r7, #2]
 8003e86:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x4e>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e94:	d106      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x4a>
 8003e9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d001      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e1f3      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x60>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_TransmitReceive+0x60>
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1e8      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_SPI_TransmitReceive+0x72>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e1e1      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d003      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f2a:	d802      	bhi.n	8003f32 <HAL_SPI_TransmitReceive+0xd8>
 8003f2c:	8abb      	ldrh	r3, [r7, #20]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d908      	bls.n	8003f44 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e007      	b.n	8003f54 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b40      	cmp	r3, #64	@ 0x40
 8003f60:	d007      	beq.n	8003f72 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f7a:	f240 8083 	bls.w	8004084 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x132>
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d16f      	bne.n	800406c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	881a      	ldrh	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb0:	e05c      	b.n	800406c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x19e>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x19e>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d113      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe0:	1c9a      	adds	r2, r3, #2
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d11c      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x1e6>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d016      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	b292      	uxth	r2, r2
 800401e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004040:	f7fe fa72 	bl	8002528 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404c:	429a      	cmp	r2, r3
 800404e:	d80d      	bhi.n	800406c <HAL_SPI_TransmitReceive+0x212>
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d009      	beq.n	800406c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e111      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d19d      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x158>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d197      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x158>
 8004082:	e0e5      	b.n	8004250 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_SPI_TransmitReceive+0x23a>
 800408c:	8afb      	ldrh	r3, [r7, #22]
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 80d1 	bne.w	8004236 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d912      	bls.n	80040c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b02      	subs	r3, #2
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040c2:	e0b8      	b.n	8004236 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ea:	e0a4      	b.n	8004236 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d134      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x30a>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02f      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x30a>
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	2b01      	cmp	r3, #1
 8004108:	d12c      	bne.n	8004164 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d912      	bls.n	800413a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b02      	subs	r3, #2
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004138:	e012      	b.n	8004160 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b01      	cmp	r3, #1
 8004170:	d148      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x3aa>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d042      	beq.n	8004204 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d923      	bls.n	80041d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	b292      	uxth	r2, r2
 8004196:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	1c9a      	adds	r2, r3, #2
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b02      	subs	r3, #2
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d81f      	bhi.n	8004200 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	e016      	b.n	8004200 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f103 020c 	add.w	r2, r3, #12
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004200:	2301      	movs	r3, #1
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004204:	f7fe f990 	bl	8002528 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004210:	429a      	cmp	r2, r3
 8004212:	d803      	bhi.n	800421c <HAL_SPI_TransmitReceive+0x3c2>
 8004214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d102      	bne.n	8004222 <HAL_SPI_TransmitReceive+0x3c8>
 800421c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e02c      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	f47f af55 	bne.w	80040ec <HAL_SPI_TransmitReceive+0x292>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	f47f af4e 	bne.w	80040ec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004250:	6a3a      	ldr	r2, [r7, #32]
 8004252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f995 	bl	8004584 <SPI_EndRxTxTransaction>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e00e      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800428e:	2300      	movs	r3, #0
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3728      	adds	r7, #40	@ 0x28
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a8:	f7fe f93e 	bl	8002528 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	4413      	add	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b8:	f7fe f936 	bl	8002528 <HAL_GetTick>
 80042bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042be:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	015b      	lsls	r3, r3, #5
 80042c4:	0d1b      	lsrs	r3, r3, #20
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ce:	e054      	b.n	800437a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d6:	d050      	beq.n	800437a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d8:	f7fe f926 	bl	8002528 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d902      	bls.n	80042ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d13d      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004306:	d111      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004310:	d004      	beq.n	800431c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431a:	d107      	bne.n	800432c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004334:	d10f      	bne.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e017      	b.n	800439a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3b01      	subs	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d19b      	bne.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000020 	.word	0x20000020

080043a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043ba:	f7fe f8b5 	bl	8002528 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043ca:	f7fe f8ad 	bl	8002528 <HAL_GetTick>
 80043ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043d8:	4b3d      	ldr	r3, [pc, #244]	@ (80044d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00da      	lsls	r2, r3, #3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	0d1b      	lsrs	r3, r3, #20
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043f0:	e060      	b.n	80044b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80043f8:	d107      	bne.n	800440a <SPI_WaitFifoStateUntilTimeout+0x62>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004408:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d050      	beq.n	80044b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004412:	f7fe f889 	bl	8002528 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441e:	429a      	cmp	r2, r3
 8004420:	d902      	bls.n	8004428 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d13d      	bne.n	80044a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004436:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004440:	d111      	bne.n	8004466 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800444a:	d004      	beq.n	8004456 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004454:	d107      	bne.n	8004466 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004464:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446e:	d10f      	bne.n	8004490 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800448e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e010      	b.n	80044c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d196      	bne.n	80043f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3728      	adds	r7, #40	@ 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000020 	.word	0x20000020

080044d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e8:	d111      	bne.n	800450e <SPI_EndRxTransaction+0x3a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044f2:	d004      	beq.n	80044fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fc:	d107      	bne.n	800450e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2200      	movs	r2, #0
 8004516:	2180      	movs	r1, #128	@ 0x80
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7ff febd 	bl	8004298 <SPI_WaitFlagStateUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e023      	b.n	800457c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800453c:	d11d      	bne.n	800457a <SPI_EndRxTransaction+0xa6>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004546:	d004      	beq.n	8004552 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004550:	d113      	bne.n	800457a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2200      	movs	r2, #0
 800455a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff22 	bl	80043a8 <SPI_WaitFifoStateUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e000      	b.n	800457c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff ff03 	bl	80043a8 <SPI_WaitFifoStateUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e027      	b.n	8004608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	@ 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff fe68 	bl	8004298 <SPI_WaitFlagStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e014      	b.n	8004608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fedc 	bl	80043a8 <SPI_WaitFifoStateUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e000      	b.n	8004608 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e049      	b.n	80046b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd fdbc 	bl	80021b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fd4a 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e04f      	b.n	8004778 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a23      	ldr	r2, [pc, #140]	@ (8004784 <HAL_TIM_Base_Start_IT+0xc4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01d      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x76>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004702:	d018      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x76>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <HAL_TIM_Base_Start_IT+0xc8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x76>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1e      	ldr	r2, [pc, #120]	@ (800478c <HAL_TIM_Base_Start_IT+0xcc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x76>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1c      	ldr	r2, [pc, #112]	@ (8004790 <HAL_TIM_Base_Start_IT+0xd0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x76>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_TIM_Base_Start_IT+0xd4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIM_Base_Start_IT+0x76>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <HAL_TIM_Base_Start_IT+0xd8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d115      	bne.n	8004762 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	4b17      	ldr	r3, [pc, #92]	@ (800479c <HAL_TIM_Base_Start_IT+0xdc>)
 800473e:	4013      	ands	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b06      	cmp	r3, #6
 8004746:	d015      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0xb4>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474e:	d011      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	e008      	b.n	8004774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e000      	b.n	8004776 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004774:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40013400 	.word	0x40013400
 8004798:	40014000 	.word	0x40014000
 800479c:	00010007 	.word	0x00010007

080047a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10f      	bne.n	80047e8 <HAL_TIM_Base_Stop_IT+0x48>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d107      	bne.n	80047e8 <HAL_TIM_Base_Stop_IT+0x48>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e049      	b.n	80048a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f841 	bl	80048ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 fc53 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_TIM_PWM_Start+0x24>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e03c      	b.n	800495e <HAL_TIM_PWM_Start+0x9e>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d109      	bne.n	80048fe <HAL_TIM_PWM_Start+0x3e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	e02f      	b.n	800495e <HAL_TIM_PWM_Start+0x9e>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d109      	bne.n	8004918 <HAL_TIM_PWM_Start+0x58>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	bf14      	ite	ne
 8004910:	2301      	movne	r3, #1
 8004912:	2300      	moveq	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e022      	b.n	800495e <HAL_TIM_PWM_Start+0x9e>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d109      	bne.n	8004932 <HAL_TIM_PWM_Start+0x72>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e015      	b.n	800495e <HAL_TIM_PWM_Start+0x9e>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b10      	cmp	r3, #16
 8004936:	d109      	bne.n	800494c <HAL_TIM_PWM_Start+0x8c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e008      	b.n	800495e <HAL_TIM_PWM_Start+0x9e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e09c      	b.n	8004aa0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0xb6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004974:	e023      	b.n	80049be <HAL_TIM_PWM_Start+0xfe>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start+0xc6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004984:	e01b      	b.n	80049be <HAL_TIM_PWM_Start+0xfe>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d104      	bne.n	8004996 <HAL_TIM_PWM_Start+0xd6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004994:	e013      	b.n	80049be <HAL_TIM_PWM_Start+0xfe>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xe6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049a4:	e00b      	b.n	80049be <HAL_TIM_PWM_Start+0xfe>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0xf6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b4:	e003      	b.n	80049be <HAL_TIM_PWM_Start+0xfe>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2201      	movs	r2, #1
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 ffa4 	bl	8005914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a35      	ldr	r2, [pc, #212]	@ (8004aa8 <HAL_TIM_PWM_Start+0x1e8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_TIM_PWM_Start+0x13e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a34      	ldr	r2, [pc, #208]	@ (8004aac <HAL_TIM_PWM_Start+0x1ec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIM_PWM_Start+0x13e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a32      	ldr	r2, [pc, #200]	@ (8004ab0 <HAL_TIM_PWM_Start+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_TIM_PWM_Start+0x13e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a31      	ldr	r2, [pc, #196]	@ (8004ab4 <HAL_TIM_PWM_Start+0x1f4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIM_PWM_Start+0x13e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2f      	ldr	r2, [pc, #188]	@ (8004ab8 <HAL_TIM_PWM_Start+0x1f8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x142>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_TIM_PWM_Start+0x144>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a22      	ldr	r2, [pc, #136]	@ (8004aa8 <HAL_TIM_PWM_Start+0x1e8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x19e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d018      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x19e>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a22      	ldr	r2, [pc, #136]	@ (8004abc <HAL_TIM_PWM_Start+0x1fc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x19e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	@ (8004ac0 <HAL_TIM_PWM_Start+0x200>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x19e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac4 <HAL_TIM_PWM_Start+0x204>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x19e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a17      	ldr	r2, [pc, #92]	@ (8004aac <HAL_TIM_PWM_Start+0x1ec>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x19e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a15      	ldr	r2, [pc, #84]	@ (8004ab0 <HAL_TIM_PWM_Start+0x1f0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d115      	bne.n	8004a8a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	4b18      	ldr	r3, [pc, #96]	@ (8004ac8 <HAL_TIM_PWM_Start+0x208>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d015      	beq.n	8004a9c <HAL_TIM_PWM_Start+0x1dc>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a76:	d011      	beq.n	8004a9c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	e008      	b.n	8004a9c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e000      	b.n	8004a9e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40013400 	.word	0x40013400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	00010007 	.word	0x00010007

08004acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d020      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01b      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0202 	mvn.w	r2, #2
 8004b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fac7 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fab9 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 faca 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d020      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01b      	beq.n	8004b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0204 	mvn.w	r2, #4
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2202      	movs	r2, #2
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 faa1 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fa93 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 faa4 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0208 	mvn.w	r2, #8
 8004b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa7b 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa6d 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fa7e 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0210 	mvn.w	r2, #16
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2208      	movs	r2, #8
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa55 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa47 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa58 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0201 	mvn.w	r2, #1
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fb ffb8 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00c      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 ff0f 	bl	8005a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 ff07 	bl	8005a98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00c      	beq.n	8004cae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fa12 	bl	80050d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0220 	mvn.w	r2, #32
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fecf 	bl	8005a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e0ff      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b14      	cmp	r3, #20
 8004d06:	f200 80f0 	bhi.w	8004eea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004eeb 	.word	0x08004eeb
 8004d18:	08004eeb 	.word	0x08004eeb
 8004d1c:	08004eeb 	.word	0x08004eeb
 8004d20:	08004da5 	.word	0x08004da5
 8004d24:	08004eeb 	.word	0x08004eeb
 8004d28:	08004eeb 	.word	0x08004eeb
 8004d2c:	08004eeb 	.word	0x08004eeb
 8004d30:	08004de7 	.word	0x08004de7
 8004d34:	08004eeb 	.word	0x08004eeb
 8004d38:	08004eeb 	.word	0x08004eeb
 8004d3c:	08004eeb 	.word	0x08004eeb
 8004d40:	08004e27 	.word	0x08004e27
 8004d44:	08004eeb 	.word	0x08004eeb
 8004d48:	08004eeb 	.word	0x08004eeb
 8004d4c:	08004eeb 	.word	0x08004eeb
 8004d50:	08004e69 	.word	0x08004e69
 8004d54:	08004eeb 	.word	0x08004eeb
 8004d58:	08004eeb 	.word	0x08004eeb
 8004d5c:	08004eeb 	.word	0x08004eeb
 8004d60:	08004ea9 	.word	0x08004ea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa62 	bl	8005234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6999      	ldr	r1, [r3, #24]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	619a      	str	r2, [r3, #24]
      break;
 8004da2:	e0a5      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fad2 	bl	8005354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	619a      	str	r2, [r3, #24]
      break;
 8004de4:	e084      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fb3b 	bl	8005468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0208 	orr.w	r2, r2, #8
 8004e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0204 	bic.w	r2, r2, #4
 8004e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	61da      	str	r2, [r3, #28]
      break;
 8004e24:	e064      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fba3 	bl	8005578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69d9      	ldr	r1, [r3, #28]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	61da      	str	r2, [r3, #28]
      break;
 8004e66:	e043      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fbec 	bl	800564c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0204 	bic.w	r2, r2, #4
 8004e92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ea6:	e023      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fc30 	bl	8005714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ee8:	e002      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
      break;
 8004eee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop

08004f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_TIM_ConfigClockSource+0x1c>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e0b6      	b.n	800508e <HAL_TIM_ConfigClockSource+0x18a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5c:	d03e      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0xd8>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f62:	f200 8087 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6a:	f000 8086 	beq.w	800507a <HAL_TIM_ConfigClockSource+0x176>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f72:	d87f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f74:	2b70      	cmp	r3, #112	@ 0x70
 8004f76:	d01a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xaa>
 8004f78:	2b70      	cmp	r3, #112	@ 0x70
 8004f7a:	d87b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f7c:	2b60      	cmp	r3, #96	@ 0x60
 8004f7e:	d050      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x11e>
 8004f80:	2b60      	cmp	r3, #96	@ 0x60
 8004f82:	d877      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f84:	2b50      	cmp	r3, #80	@ 0x50
 8004f86:	d03c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xfe>
 8004f88:	2b50      	cmp	r3, #80	@ 0x50
 8004f8a:	d873      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	d058      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x13e>
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d86f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f94:	2b30      	cmp	r3, #48	@ 0x30
 8004f96:	d064      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15e>
 8004f98:	2b30      	cmp	r3, #48	@ 0x30
 8004f9a:	d86b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d060      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15e>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d867      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15e>
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d05a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15e>
 8004fac:	e062      	b.n	8005074 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	f000 fc89 	bl	80058d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e04f      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	f000 fc72 	bl	80058d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e03c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	461a      	mov	r2, r3
 8005010:	f000 fbe6 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2150      	movs	r1, #80	@ 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fc3f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005020:	e02c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	461a      	mov	r2, r3
 8005030:	f000 fc05 	bl	800583e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2160      	movs	r1, #96	@ 0x60
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fc2f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005040:	e01c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	461a      	mov	r2, r3
 8005050:	f000 fbc6 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2140      	movs	r1, #64	@ 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fc1f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005060:	e00c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 fc16 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005072:	e003      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e000      	b.n	800507c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800507a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a46      	ldr	r2, [pc, #280]	@ (8005214 <TIM_Base_SetConfig+0x12c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a43      	ldr	r2, [pc, #268]	@ (8005218 <TIM_Base_SetConfig+0x130>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a42      	ldr	r2, [pc, #264]	@ (800521c <TIM_Base_SetConfig+0x134>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a41      	ldr	r2, [pc, #260]	@ (8005220 <TIM_Base_SetConfig+0x138>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a40      	ldr	r2, [pc, #256]	@ (8005224 <TIM_Base_SetConfig+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a35      	ldr	r2, [pc, #212]	@ (8005214 <TIM_Base_SetConfig+0x12c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01f      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d01b      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <TIM_Base_SetConfig+0x130>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d017      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a31      	ldr	r2, [pc, #196]	@ (800521c <TIM_Base_SetConfig+0x134>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a30      	ldr	r2, [pc, #192]	@ (8005220 <TIM_Base_SetConfig+0x138>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00f      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2f      	ldr	r2, [pc, #188]	@ (8005224 <TIM_Base_SetConfig+0x13c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00b      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2e      	ldr	r2, [pc, #184]	@ (8005228 <TIM_Base_SetConfig+0x140>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2d      	ldr	r2, [pc, #180]	@ (800522c <TIM_Base_SetConfig+0x144>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2c      	ldr	r2, [pc, #176]	@ (8005230 <TIM_Base_SetConfig+0x148>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d108      	bne.n	8005194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <TIM_Base_SetConfig+0x12c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <TIM_Base_SetConfig+0x13c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <TIM_Base_SetConfig+0x140>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	@ (800522c <TIM_Base_SetConfig+0x144>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <TIM_Base_SetConfig+0x148>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d103      	bne.n	80051e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d105      	bne.n	8005206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]
  }
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f023 0201 	bic.w	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2c      	ldr	r2, [pc, #176]	@ (8005340 <TIM_OC1_SetConfig+0x10c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00f      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a2b      	ldr	r2, [pc, #172]	@ (8005344 <TIM_OC1_SetConfig+0x110>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2a      	ldr	r2, [pc, #168]	@ (8005348 <TIM_OC1_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a29      	ldr	r2, [pc, #164]	@ (800534c <TIM_OC1_SetConfig+0x118>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_OC1_SetConfig+0x80>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a28      	ldr	r2, [pc, #160]	@ (8005350 <TIM_OC1_SetConfig+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10c      	bne.n	80052ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0308 	bic.w	r3, r3, #8
 80052ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <TIM_OC1_SetConfig+0x10c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <TIM_OC1_SetConfig+0x110>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <TIM_OC1_SetConfig+0x114>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a18      	ldr	r2, [pc, #96]	@ (800534c <TIM_OC1_SetConfig+0x118>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC1_SetConfig+0xc2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a17      	ldr	r2, [pc, #92]	@ (8005350 <TIM_OC1_SetConfig+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800

08005354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f023 0210 	bic.w	r2, r3, #16
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0320 	bic.w	r3, r3, #32
 80053a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a28      	ldr	r2, [pc, #160]	@ (8005454 <TIM_OC2_SetConfig+0x100>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC2_SetConfig+0x6c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a27      	ldr	r2, [pc, #156]	@ (8005458 <TIM_OC2_SetConfig+0x104>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d10d      	bne.n	80053dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1d      	ldr	r2, [pc, #116]	@ (8005454 <TIM_OC2_SetConfig+0x100>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <TIM_OC2_SetConfig+0x104>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00b      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	@ (800545c <TIM_OC2_SetConfig+0x108>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d007      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005460 <TIM_OC2_SetConfig+0x10c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC2_SetConfig+0xb0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a19      	ldr	r2, [pc, #100]	@ (8005464 <TIM_OC2_SetConfig+0x110>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d113      	bne.n	800542c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800540a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40013400 	.word	0x40013400
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a27      	ldr	r2, [pc, #156]	@ (8005564 <TIM_OC3_SetConfig+0xfc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d003      	beq.n	80054d2 <TIM_OC3_SetConfig+0x6a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	@ (8005568 <TIM_OC3_SetConfig+0x100>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10d      	bne.n	80054ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <TIM_OC3_SetConfig+0xfc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00f      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005568 <TIM_OC3_SetConfig+0x100>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00b      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1a      	ldr	r2, [pc, #104]	@ (800556c <TIM_OC3_SetConfig+0x104>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d007      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a19      	ldr	r2, [pc, #100]	@ (8005570 <TIM_OC3_SetConfig+0x108>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC3_SetConfig+0xae>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a18      	ldr	r2, [pc, #96]	@ (8005574 <TIM_OC3_SetConfig+0x10c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d113      	bne.n	800553e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800551c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	621a      	str	r2, [r3, #32]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	031b      	lsls	r3, r3, #12
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a18      	ldr	r2, [pc, #96]	@ (8005638 <TIM_OC4_SetConfig+0xc0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00f      	beq.n	80055fc <TIM_OC4_SetConfig+0x84>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a17      	ldr	r2, [pc, #92]	@ (800563c <TIM_OC4_SetConfig+0xc4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_OC4_SetConfig+0x84>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a16      	ldr	r2, [pc, #88]	@ (8005640 <TIM_OC4_SetConfig+0xc8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_OC4_SetConfig+0x84>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a15      	ldr	r2, [pc, #84]	@ (8005644 <TIM_OC4_SetConfig+0xcc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC4_SetConfig+0x84>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a14      	ldr	r2, [pc, #80]	@ (8005648 <TIM_OC4_SetConfig+0xd0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d109      	bne.n	8005610 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	019b      	lsls	r3, r3, #6
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40013400 	.word	0x40013400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800567a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005690:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a17      	ldr	r2, [pc, #92]	@ (8005700 <TIM_OC5_SetConfig+0xb4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <TIM_OC5_SetConfig+0x7a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a16      	ldr	r2, [pc, #88]	@ (8005704 <TIM_OC5_SetConfig+0xb8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_OC5_SetConfig+0x7a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a15      	ldr	r2, [pc, #84]	@ (8005708 <TIM_OC5_SetConfig+0xbc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_OC5_SetConfig+0x7a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a14      	ldr	r2, [pc, #80]	@ (800570c <TIM_OC5_SetConfig+0xc0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_OC5_SetConfig+0x7a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a13      	ldr	r2, [pc, #76]	@ (8005710 <TIM_OC5_SetConfig+0xc4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d109      	bne.n	80056da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40012c00 	.word	0x40012c00
 8005704:	40013400 	.word	0x40013400
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400
 8005710:	40014800 	.word	0x40014800

08005714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800575a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	051b      	lsls	r3, r3, #20
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a18      	ldr	r2, [pc, #96]	@ (80057cc <TIM_OC6_SetConfig+0xb8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00f      	beq.n	8005790 <TIM_OC6_SetConfig+0x7c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a17      	ldr	r2, [pc, #92]	@ (80057d0 <TIM_OC6_SetConfig+0xbc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00b      	beq.n	8005790 <TIM_OC6_SetConfig+0x7c>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a16      	ldr	r2, [pc, #88]	@ (80057d4 <TIM_OC6_SetConfig+0xc0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_OC6_SetConfig+0x7c>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <TIM_OC6_SetConfig+0xc4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_OC6_SetConfig+0x7c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a14      	ldr	r2, [pc, #80]	@ (80057dc <TIM_OC6_SetConfig+0xc8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d109      	bne.n	80057a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005796:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	029b      	lsls	r3, r3, #10
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40013400 	.word	0x40013400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 030a 	bic.w	r3, r3, #10
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583e:	b480      	push	{r7}
 8005840:	b087      	sub	sp, #28
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f023 0210 	bic.w	r2, r3, #16
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800587a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 0307 	orr.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2201      	movs	r2, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e068      	b.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a2d      	ldr	r2, [pc, #180]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d108      	bne.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ea:	d018      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a13      	ldr	r2, [pc, #76]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a14      	ldr	r2, [pc, #80]	@ (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d10c      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40014000 	.word	0x40014000

08005a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <__libc_init_array>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	4d0d      	ldr	r5, [pc, #52]	@ (8005af4 <__libc_init_array+0x38>)
 8005ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8005af8 <__libc_init_array+0x3c>)
 8005ac2:	1b64      	subs	r4, r4, r5
 8005ac4:	10a4      	asrs	r4, r4, #2
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	42a6      	cmp	r6, r4
 8005aca:	d109      	bne.n	8005ae0 <__libc_init_array+0x24>
 8005acc:	4d0b      	ldr	r5, [pc, #44]	@ (8005afc <__libc_init_array+0x40>)
 8005ace:	4c0c      	ldr	r4, [pc, #48]	@ (8005b00 <__libc_init_array+0x44>)
 8005ad0:	f000 f818 	bl	8005b04 <_init>
 8005ad4:	1b64      	subs	r4, r4, r5
 8005ad6:	10a4      	asrs	r4, r4, #2
 8005ad8:	2600      	movs	r6, #0
 8005ada:	42a6      	cmp	r6, r4
 8005adc:	d105      	bne.n	8005aea <__libc_init_array+0x2e>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae4:	4798      	blx	r3
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	e7ee      	b.n	8005ac8 <__libc_init_array+0xc>
 8005aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aee:	4798      	blx	r3
 8005af0:	3601      	adds	r6, #1
 8005af2:	e7f2      	b.n	8005ada <__libc_init_array+0x1e>
 8005af4:	08005bc4 	.word	0x08005bc4
 8005af8:	08005bc4 	.word	0x08005bc4
 8005afc:	08005bc4 	.word	0x08005bc4
 8005b00:	08005bc8 	.word	0x08005bc8

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
